<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축구2 경기 컨트롤 패널</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }
        
        body {
            background-color: var(--light-color);
            padding: 10px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .control-panel {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .panel-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .score-section {
            margin: 15px 0;
        }
        
        .score-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .score-input::-webkit-inner-spin-button,
        .score-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .score-input {
            appearance: textfield; /* 표준 속성 */
            -moz-appearance: textfield; /* Firefox */
            width: 80px;
            height: 40px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #ddd;
            padding: 5px;
        }
        
        .score-controls {
            display: flex;
            gap: 5px;
        }
        
        .score-btn {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            font-size: 20px;
        }
        
        .team-color-section {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        .color-picker {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
        
        .stats-section {
            margin: 20px 0;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .stat-group {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #e9ecef;
        }
        
        .stat-title {
            font-weight: 600;
            margin-bottom: 10px;
            color: #495057;
        }
        
        .stat-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
        }
        
        .stat-label {
            min-width: 80px;
            font-size: 14px;
        }
        
        .stat-input {
            width: 60px;
            height: 35px;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
        }
        
        .stat-btn {
            width: 35px;
            height: 35px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            font-size: 16px;
        }
        
        .timer-section {
            margin: 20px 0;
            padding: 20px;
            background-color: #e3f2fd;
            border-radius: 10px;
            border: 1px solid #bbdefb;
        }
        
        .timer-display {
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 15px;
            color: #1976d2;
        }
        
        .timer-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        
        .timer-btn {
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 8px;
        }
        
        .match-state-section {
            margin: 20px 0;
        }
        
        .state-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .state-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .overlay-section {
            margin: 20px 0;
            padding: 20px;
            background-color: #f3e5f5;
            border-radius: 10px;
            border: 1px solid #e1bee7;
        }
        
        .overlay-links {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .overlay-link {
            padding: 10px 15px;
            background-color: #9c27b0;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: background-color 0.3s;
        }
        
        .overlay-link:hover {
            background-color: #7b1fa2;
            color: white;
        }
        
        .team-header-section {
            margin: 20px 0;
        }
        
        .header-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-bottom: 10px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-connected {
            background-color: #28a745;
        }
        
        .status-disconnected {
            background-color: #dc3545;
        }
        
        .connection-info {
            font-size: 14px;
            color: #6c757d;
        }
        
        .auto-save-indicator {
            display: inline-block;
            padding: 4px 8px;
            background-color: #28a745;
            color: white;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 10px;
        }
        
        .save-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .save-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }
        
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .notification.success {
            background-color: #28a745;
        }
        
        .notification.error {
            background-color: #dc3545;
        }
        
        .notification.info {
            background-color: #17a2b8;
        }
        
        @media (max-width: 768px) {
            .control-panel {
                padding: 10px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .timer-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .overlay-links {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <div class="panel-header">
            <h1 class="panel-title">
                <span class="status-indicator" id="connectionStatus"></span>
                축구2 경기 컨트롤 패널
                <span class="auto-save-indicator" id="autoSaveIndicator">자동저장</span>
            </h1>
            <div class="save-status">
                <span class="connection-info" id="connectionInfo">연결 중...</span>
                <button class="btn btn-outline-primary save-btn" id="manualSaveBtn">
                    <i class="bi bi-save"></i> 수동저장
                </button>
            </div>
        </div>

        <!-- 경기 정보 -->
        <div class="row">
            <div class="col-md-6">
                <div class="score-section">
                    <h4>홈팀: <span id="homeTeamName"><%= match.home_team %></span></h4>
                    <div class="score-input-group">
                        <input type="number" class="score-input" id="homeScore" value="<%= match.home_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-success score-btn" onclick="adjustScore('home', 1)">
                                <i class="bi bi-plus"></i>
                            </button>
                            <button class="btn btn-danger score-btn" onclick="adjustScore('home', -1)">
                                <i class="bi bi-dash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="team-color-section">
                        <label>팀 색상:</label>
                        <input type="color" class="color-picker" id="homeTeamColor" 
                               value="<%= match.home_team_color || defaultColors.home %>">
                    </div>
                    <div class="team-header-section">
                        <input type="text" class="header-input" id="homeTeamHeader" 
                               placeholder="홈팀 헤더" value="<%= match.home_team_header || 'HOME' %>">
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="score-section">
                    <h4>원정팀: <span id="awayTeamName"><%= match.away_team %></span></h4>
                    <div class="score-input-group">
                        <input type="number" class="score-input" id="awayScore" value="<%= match.away_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-success score-btn" onclick="adjustScore('away', 1)">
                                <i class="bi bi-plus"></i>
                            </button>
                            <button class="btn btn-danger score-btn" onclick="adjustScore('away', -1)">
                                <i class="bi bi-dash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="team-color-section">
                        <label>팀 색상:</label>
                        <input type="color" class="color-picker" id="awayTeamColor" 
                               value="<%= match.away_team_color || defaultColors.away %>">
                    </div>
                    <div class="team-header-section">
                        <input type="text" class="header-input" id="awayTeamHeader" 
                               placeholder="원정팀 헤더" value="<%= match.away_team_header || 'AWAY' %>">
                    </div>
                </div>
            </div>
        </div>

        <!-- 타이머 섹션 -->
        <div class="timer-section">
            <h4>경기 시간</h4>
            <div class="timer-display" id="timerDisplay">00:00</div>
            <div class="timer-controls">
                <button class="btn btn-success timer-btn" id="startTimerBtn">
                    <i class="bi bi-play-fill"></i> 시작
                </button>
                <button class="btn btn-warning timer-btn" id="pauseTimerBtn">
                    <i class="bi bi-pause-fill"></i> 일시정지
                </button>
                <button class="btn btn-danger timer-btn" id="stopTimerBtn">
                    <i class="bi bi-stop-fill"></i> 정지
                </button>
                <button class="btn btn-secondary timer-btn" id="resetTimerBtn">
                    <i class="bi bi-arrow-clockwise"></i> 리셋
                </button>
            </div>
        </div>

        <!-- 경기 상태 -->
        <div class="match-state-section">
            <h4>경기 상태</h4>
            <div class="state-buttons">
                <button class="btn btn-outline-primary state-btn" onclick="setMatchState('경기 전')">경기 전</button>
                <button class="btn btn-outline-success state-btn" onclick="setMatchState('전반')">전반</button>
                <button class="btn btn-outline-warning state-btn" onclick="setMatchState('하프타임')">하프타임</button>
                <button class="btn btn-outline-info state-btn" onclick="setMatchState('후반')">후반</button>
                <button class="btn btn-outline-danger state-btn" onclick="setMatchState('연장전')">연장전</button>
                <button class="btn btn-outline-dark state-btn" onclick="setMatchState('경기 종료')">경기 종료</button>
            </div>
        </div>

        <!-- 통계 섹션 -->
        <div class="stats-section">
            <h4>경기 통계</h4>
            <div class="stats-grid">
                <div class="stat-group">
                    <div class="stat-title">슈팅</div>
                    <div class="stat-controls">
                        <span class="stat-label">홈팀:</span>
                        <input type="number" class="stat-input" id="homeShots" value="<%= match.match_data?.home_shots || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('home_shots', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('home_shots', -1)">-</button>
                    </div>
                    <div class="stat-controls">
                        <span class="stat-label">원정팀:</span>
                        <input type="number" class="stat-input" id="awayShots" value="<%= match.match_data?.away_shots || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('away_shots', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('away_shots', -1)">-</button>
                    </div>
                </div>
                
                <div class="stat-group">
                    <div class="stat-title">유효슈팅</div>
                    <div class="stat-controls">
                        <span class="stat-label">홈팀:</span>
                        <input type="number" class="stat-input" id="homeShotsOnTarget" value="<%= match.match_data?.home_shots_on_target || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('home_shots_on_target', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('home_shots_on_target', -1)">-</button>
                    </div>
                    <div class="stat-controls">
                        <span class="stat-label">원정팀:</span>
                        <input type="number" class="stat-input" id="awayShotsOnTarget" value="<%= match.match_data?.away_shots_on_target || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('away_shots_on_target', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('away_shots_on_target', -1)">-</button>
                    </div>
                </div>
                
                <div class="stat-group">
                    <div class="stat-title">코너킥</div>
                    <div class="stat-controls">
                        <span class="stat-label">홈팀:</span>
                        <input type="number" class="stat-input" id="homeCorners" value="<%= match.match_data?.home_corners || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('home_corners', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('home_corners', -1)">-</button>
                    </div>
                    <div class="stat-controls">
                        <span class="stat-label">원정팀:</span>
                        <input type="number" class="stat-input" id="awayCorners" value="<%= match.match_data?.away_corners || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('away_corners', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('away_corners', -1)">-</button>
                    </div>
                </div>
                
                <div class="stat-group">
                    <div class="stat-title">파울</div>
                    <div class="stat-controls">
                        <span class="stat-label">홈팀:</span>
                        <input type="number" class="stat-input" id="homeFouls" value="<%= match.match_data?.home_fouls || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('home_fouls', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('home_fouls', -1)">-</button>
                    </div>
                    <div class="stat-controls">
                        <span class="stat-label">원정팀:</span>
                        <input type="number" class="stat-input" id="awayFouls" value="<%= match.match_data?.away_fouls || 0 %>" min="0">
                        <button class="btn btn-sm btn-success stat-btn" onclick="adjustStat('away_fouls', 1)">+</button>
                        <button class="btn btn-sm btn-danger stat-btn" onclick="adjustStat('away_fouls', -1)">-</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 오버레이 링크 -->
        <div class="overlay-section">
            <h4>오버레이 링크</h4>
            <div class="overlay-links">
                <a href="/soccer2/<%= match.id %>/overlay" class="overlay-link" target="_blank">
                    <i class="bi bi-display"></i> 축구2 오버레이
                </a>
                <a href="/match-tabs" class="overlay-link" target="_blank">
                    <i class="bi bi-collection"></i> 탭 전용 페이지
                </a>
            </div>
        </div>
    </div>

    <!-- 알림 -->
    <div class="notification" id="notification"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 소켓 연결
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // 연결 상태 관리
        let isConnected = false;
        let autoSaveEnabled = true;
        let lastSaveTime = Date.now();
        
        // DOM 요소들
        const connectionStatus = document.getElementById('connectionStatus');
        const connectionInfo = document.getElementById('connectionInfo');
        const autoSaveIndicator = document.getElementById('autoSaveIndicator');
        const manualSaveBtn = document.getElementById('manualSaveBtn');
        const notification = document.getElementById('notification');
        
        // 타이머 관련 요소들
        const timerDisplay = document.getElementById('timerDisplay');
        const startTimerBtn = document.getElementById('startTimerBtn');
        const pauseTimerBtn = document.getElementById('pauseTimerBtn');
        const stopTimerBtn = document.getElementById('stopTimerBtn');
        const resetTimerBtn = document.getElementById('resetTimerBtn');
        
        // 소켓 이벤트 리스너
        socket.on('connect', () => {
            isConnected = true;
            connectionStatus.className = 'status-indicator status-connected';
            connectionInfo.textContent = '연결됨';
            socket.emit('join_match', matchId);
            showNotification('서버에 연결되었습니다.', 'success');
        });
        
        socket.on('disconnect', () => {
            isConnected = false;
            connectionStatus.className = 'status-indicator status-disconnected';
            connectionInfo.textContent = '연결 끊김';
            showNotification('서버 연결이 끊어졌습니다.', 'error');
        });
        
        socket.on('match_updated', (data) => {
            updateDisplay(data);
            showNotification('경기 정보가 업데이트되었습니다.', 'info');
        });
        
        socket.on('timer_started', (data) => {
            updateTimerDisplay(data);
            showNotification('타이머가 시작되었습니다.', 'info');
        });
        
        socket.on('timer_stopped', (data) => {
            updateTimerDisplay(data);
            showNotification('타이머가 정지되었습니다.', 'info');
        });
        
        socket.on('timer_updated', (data) => {
            updateTimerDisplay(data);
        });
        
        // 점수 조정 함수
        function adjustScore(team, change) {
            const scoreInput = document.getElementById(team + 'Score');
            const currentScore = parseInt(scoreInput.value) || 0;
            const newScore = Math.max(0, currentScore + change);
            scoreInput.value = newScore;
            
            updateMatchData();
        }
        
        // 통계 조정 함수
        function adjustStat(statName, change) {
            const statInput = document.getElementById(statName.replace('_', ''));
            const currentValue = parseInt(statInput.value) || 0;
            const newValue = Math.max(0, currentValue + change);
            statInput.value = newValue;
            
            updateMatchData();
        }
        
        // 경기 상태 설정 함수
        function setMatchState(state) {
            const matchData = getCurrentMatchData();
            matchData.state = state;
            updateMatchData();
            showNotification(`경기 상태가 "${state}"로 변경되었습니다.`, 'info');
        }
        
        // 현재 경기 데이터 수집
        function getCurrentMatchData() {
            return {
                home_score: parseInt(document.getElementById('homeScore').value) || 0,
                away_score: parseInt(document.getElementById('awayScore').value) || 0,
                home_team_color: document.getElementById('homeTeamColor').value,
                away_team_color: document.getElementById('awayTeamColor').value,
                home_team_header: document.getElementById('homeTeamHeader').value,
                away_team_header: document.getElementById('awayTeamHeader').value,
                home_shots: parseInt(document.getElementById('homeShots').value) || 0,
                away_shots: parseInt(document.getElementById('awayShots').value) || 0,
                home_shots_on_target: parseInt(document.getElementById('homeShotsOnTarget').value) || 0,
                away_shots_on_target: parseInt(document.getElementById('awayShotsOnTarget').value) || 0,
                home_corners: parseInt(document.getElementById('homeCorners').value) || 0,
                away_corners: parseInt(document.getElementById('awayCorners').value) || 0,
                home_fouls: parseInt(document.getElementById('homeFouls').value) || 0,
                away_fouls: parseInt(document.getElementById('awayFouls').value) || 0,
                state: document.querySelector('.state-btn.active')?.textContent || '경기 전'
            };
        }
        
        // 경기 데이터 업데이트
        function updateMatchData() {
            if (!isConnected) {
                showNotification('서버에 연결되지 않았습니다.', 'error');
                return;
            }
            
            const matchData = getCurrentMatchData();
            
            // 소켓을 통해 업데이트 전송
            socket.emit('update_match', {
                matchId: matchId,
                matchData: matchData
            });
            
            // 자동 저장
            if (autoSaveEnabled) {
                lastSaveTime = Date.now();
                autoSaveIndicator.textContent = '자동저장';
                setTimeout(() => {
                    autoSaveIndicator.textContent = '자동저장';
                }, 2000);
            }
        }
        
        // 디스플레이 업데이트
        function updateDisplay(data) {
            if (data.home_score !== undefined) document.getElementById('homeScore').value = data.home_score;
            if (data.away_score !== undefined) document.getElementById('awayScore').value = data.away_score;
            if (data.home_team_color) document.getElementById('homeTeamColor').value = data.home_team_color;
            if (data.away_team_color) document.getElementById('awayTeamColor').value = data.away_team_color;
            if (data.home_team_header) document.getElementById('homeTeamHeader').value = data.home_team_header;
            if (data.away_team_header) document.getElementById('awayTeamHeader').value = data.away_team_header;
            
            // 통계 업데이트
            if (data.home_shots !== undefined) document.getElementById('homeShots').value = data.home_shots;
            if (data.away_shots !== undefined) document.getElementById('awayShots').value = data.away_shots;
            if (data.home_shots_on_target !== undefined) document.getElementById('homeShotsOnTarget').value = data.home_shots_on_target;
            if (data.away_shots_on_target !== undefined) document.getElementById('awayShotsOnTarget').value = data.away_shots_on_target;
            if (data.home_corners !== undefined) document.getElementById('homeCorners').value = data.home_corners;
            if (data.away_corners !== undefined) document.getElementById('awayCorners').value = data.away_corners;
            if (data.home_fouls !== undefined) document.getElementById('homeFouls').value = data.home_fouls;
            if (data.away_fouls !== undefined) document.getElementById('awayFouls').value = data.away_fouls;
        }
        
        // 타이머 디스플레이 업데이트
        function updateTimerDisplay(data) {
            if (data.timer !== undefined) {
                const minutes = Math.floor(data.timer / 60);
                const seconds = data.timer % 60;
                timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            if (data.isRunning !== undefined) {
                startTimerBtn.disabled = data.isRunning;
                pauseTimerBtn.disabled = !data.isRunning;
                stopTimerBtn.disabled = !data.isRunning;
            }
        }
        
        // 타이머 컨트롤
        startTimerBtn.addEventListener('click', () => {
            socket.emit('start_timer', matchId);
        });
        
        pauseTimerBtn.addEventListener('click', () => {
            socket.emit('pause_timer', matchId);
        });
        
        stopTimerBtn.addEventListener('click', () => {
            socket.emit('stop_timer', matchId);
        });
        
        resetTimerBtn.addEventListener('click', () => {
            socket.emit('reset_timer', matchId);
        });
        
        // 수동 저장
        manualSaveBtn.addEventListener('click', () => {
            updateMatchData();
            showNotification('수동으로 저장되었습니다.', 'success');
        });
        
        // 입력 필드 이벤트 리스너
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('change', updateMatchData);
        });
        
        // 색상 선택 이벤트 리스너
        document.querySelectorAll('input[type="color"]').forEach(input => {
            input.addEventListener('change', updateMatchData);
        });
        
        // 알림 표시 함수
        function showNotification(message, type) {
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', () => {
            // 현재 경기 상태 버튼 활성화
            const currentState = '<%= match.match_data?.state || "경기 전" %>';
            document.querySelectorAll('.state-btn').forEach(btn => {
                if (btn.textContent === currentState) {
                    btn.classList.add('active');
                }
            });
            
            // 타이머 초기 상태 설정
            const timerData = {
                timer: <%= match.match_data?.timer || 0 %>,
                isRunning: <%= match.match_data?.isRunning || false %>
            };
            updateTimerDisplay(timerData);
        });
    </script>
</body>
</html> 