<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축구 경기 컨트롤 패널 (모바일)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 10px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .control-panel {
            max-width: 400px;
            margin: 0 auto;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .score-section {
            margin: 15px 0;
        }
        .score-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .score-input {
            width: 70px;
            height: 35px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #ddd;
            padding: 5px;
        }
        .score-controls {
            display: flex;
            gap: 5px;
        }
        .score-btn {
            width: 35px;
            height: 35px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            font-size: 18px;
        }
        .timer-section {
            margin: 20px 0 10px 0;
        }
        #timer-display {
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            margin: 10px 0;
            font-family: monospace;
            color: #007bff;
        }
        .timer-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
        }
        .timer-btn {
            min-width: 70px;
            border-radius: 8px;
            font-weight: 500;
            padding: 8px 12px;
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 팀명 표시 -->
        <div class="row mb-2">
            <div class="col-6 text-center" style="font-weight:700; font-size:1.1rem;">
                <%= match.home_team || 'HOME' %>
            </div>
            <div class="col-6 text-center" style="font-weight:700; font-size:1.1rem;">
                <%= match.away_team || 'AWAY' %>
            </div>
        </div>
        <!-- 스코어 영역 -->
        <div class="row mb-3">
            <div class="col-6">
                <div class="score-section">
                    <div class="score-input-group">
                        <input type="number" id="home-score" class="score-input" value="<%= match.home_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="score-section">
                    <div class="score-input-group">
                        <input type="number" id="away-score" class="score-input" value="<%= match.away_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- 경기 상태 선택 -->
        <div class="row mb-3">
            <div class="col-12 text-center">
                <div class="btn-group" role="group" aria-label="Match State">
                    <input type="radio" class="btn-check" name="matchState" id="state-first" value="전반" autocomplete="off" checked>
                    <label class="btn btn-outline-primary" for="state-first">전반</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-first-end" value="전반종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-first-end">전반종료</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-second" value="후반" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-second">후반</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-second-end" value="후반종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-second-end">후반종료</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-end" value="경기종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-end">경기종료</label>
                </div>
            </div>
        </div>
        <!-- 타이머 영역 -->
        <div class="timer-section">
            <div id="timer-display">00:00</div>
            <div class="timer-controls mb-2">
                <button id="start-timer" class="btn btn-success timer-btn">
                    <i class="bi bi-play-fill"></i> 시작
                </button>
                <button id="stop-timer" class="btn btn-danger timer-btn">
                    <i class="bi bi-pause-fill"></i> 멈춤
                </button>
                <button id="reset-timer" class="btn btn-secondary timer-btn">
                    <i class="bi bi-arrow-counterclockwise"></i> 리셋
                </button>
            </div>
            <!-- 시간 수정 UI -->
            <div class="d-flex justify-content-center align-items-center gap-2 mb-2">
                <input type="text" id="time-edit-input" class="form-control" style="width:80px; text-align:center;" placeholder="00:00" pattern="[0-9]{2}:[0-9]{2}">
                <button id="apply-time-btn" class="btn btn-primary btn-sm">적용</button>
            </div>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        let currentSeconds = 0;
        let isRunning = false;
        let lastServerTime = 0;
        let lastUpdateTime = 0;
        let isConnected = true;
        let localTimer = null;

        // 타이머 표시 업데이트
        function updateTimerDisplay() {
            const minutes = Math.floor(currentSeconds / 60);
            const seconds = currentSeconds % 60;
            document.getElementById('timer-display').textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // 점수 변경 이벤트
        function updateScore(team, change) {
            const scoreInput = document.getElementById(`${team}-score`);
            const currentScore = parseInt(scoreInput.value) || 0;
            const newScore = Math.max(0, currentScore + change);
            scoreInput.value = newScore;
            updateMatchInfo();
        }

        // 서버와 소켓 연결
        socket.on('connect', () => {
            socket.emit('join', matchId);
        });

        // 서버로부터 타이머 상태 수신
        socket.on('timer_state', (data) => {
            currentSeconds = data.currentSeconds;
            isRunning = data.isRunning;
            lastServerTime = data.currentSeconds;
            lastUpdateTime = data.lastUpdateTime || Date.now();
            updateTimerDisplay();
            if (data.isRunning) {
                startLocalTimer();
            }
        });

        socket.on('timer_update', (data) => {
            currentSeconds = data.currentSeconds;
            isRunning = data.isRunning;
            lastServerTime = data.currentSeconds;
            lastUpdateTime = data.lastUpdateTime || Date.now();
            updateTimerDisplay();
            if (data.isRunning && !localTimer) {
                startLocalTimer();
            } else if (!data.isRunning && localTimer) {
                stopLocalTimer();
            }
        });

        // 타이머 컨트롤 버튼 이벤트
        document.getElementById('start-timer').addEventListener('click', function() {
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'start'
            });
        });
        document.getElementById('stop-timer').addEventListener('click', function() {
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'stop'
            });
        });
        document.getElementById('reset-timer').addEventListener('click', function() {
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'reset'
            });
        });

        // 경기 상태 변경 이벤트
        document.querySelectorAll('input[name="matchState"]').forEach(radio => {
            radio.addEventListener('change', updateMatchInfo);
        });

        // 점수/타이머/경기상태 변경 시 서버에 업데이트
        async function updateMatchInfo() {
            const formData = {
                home_score: parseInt(document.getElementById('home-score').value) || 0,
                away_score: parseInt(document.getElementById('away-score').value) || 0,
                match_data: {
                    state: document.querySelector('input[name="matchState"]:checked')?.value || '전반'
                }
            };
            try {
                await fetch(`/api/match/${matchId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
            } catch (error) {
                // 에러 무시
            }
        }

        // 시간 입력란 자동 포맷팅
        document.getElementById('time-edit-input').addEventListener('input', function(e) {
            let val = this.value.replace(/[^0-9]/g, '');
            if (val.length === 0) {
                this.value = '';
                return;
            }
            if (val.length <= 2) {
                this.value = '00:' + val.padStart(2, '0');
            } else if (val.length === 3) {
                this.value = '0' + val[0] + ':' + val.slice(1, 3);
            } else if (val.length >= 4) {
                this.value = val.slice(0, val.length - 2).padStart(2, '0') + ':' + val.slice(-2);
            }
        });

        // 시간 수정 적용 버튼 이벤트
        document.getElementById('apply-time-btn').addEventListener('click', function() {
            const timeEditInput = document.getElementById('time-edit-input');
            let timeValue = timeEditInput.value;
            // 숫자만 입력된 경우에도 자동 변환
            let val = timeValue.replace(/[^0-9]/g, '');
            if (val.length === 0) {
                timeValue = '00:00';
            } else if (val.length <= 2) {
                timeValue = '00:' + val.padStart(2, '0');
            } else if (val.length === 3) {
                timeValue = '0' + val[0] + ':' + val.slice(1, 3);
            } else if (val.length >= 4) {
                timeValue = val.slice(0, val.length - 2).padStart(2, '0') + ':' + val.slice(-2);
            }
            timeEditInput.value = timeValue;
            // 00:00 형식 검증
            const timeRegex = /^([0-9]{2}):([0-9]{2})$/;
            if (!timeRegex.test(timeValue)) {
                alert('올바른 시간 형식(00:00)으로 입력해주세요.');
                return;
            }
            // 분과 초 추출
            let [minutes, seconds] = timeValue.split(':').map(Number);
            if (minutes > 90) minutes = 90;
            if (seconds > 59) seconds = 59;
            // 서버에 시간 변경 요청
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'set',
                minutes: minutes,
                seconds: seconds
            });
        });

        // 로컬 타이머
        function startLocalTimer() {
            if (localTimer) return;
            localTimer = setInterval(() => {
                if (!isConnected && isRunning) {
                    const currentTime = Date.now();
                    const timeDiff = Math.floor((currentTime - lastUpdateTime) / 1000);
                    currentSeconds = lastServerTime + timeDiff;
                    updateTimerDisplay();
                }
            }, 1000);
        }
        function stopLocalTimer() {
            if (localTimer) {
                clearInterval(localTimer);
                localTimer = null;
            }
        }
    </script>
</body>
</html> 