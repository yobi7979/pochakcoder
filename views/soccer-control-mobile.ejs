<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축구 경기 컨트롤 패널 (모바일)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 2px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 1.2em;
        }
        .control-panel {
            max-width: 480px;
            margin: 0 auto;
            background-color: white;
            padding: 6px;
            border-radius: 12px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }
        .score-section {
            margin: 1px 0;
        }
        .unified-score-section {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 2px;
            padding: 12px 4px;
            background-color: #f8f9fa;
            border-radius: 12px;
            margin: 4px 0;
        }
        
        .score-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
        }
        
        .score-buttons {
            display: flex;
            flex-direction: column;
            gap: 4px;
            margin: 0 16px;
        }
        
        .score-display {
            width: 80px;
            height: 60px;
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            border-radius: 10px;
            border: 3px solid #007bff;
            padding: 8px;
            background-color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .center-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 6px;
            min-width: 180px;
            justify-content: center;
        }
        
        .score-display-container {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        .score-btn {
            width: 100px;
            height: 36px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            font-size: 20px;
        }
        .timer-section {
            margin: 1px 0;
        }
        #timer-display {
            font-size: 2.4rem;
            font-weight: bold;
            text-align: center;
            margin: 2px 0;
            font-family: monospace;
            color: #007bff;
        }
        .timer-controls {
            display: flex;
            gap: 12px;
            margin-top: 8px;
            justify-content: center;
        }
        .timer-btn {
            min-width: 84px;
            border-radius: 10px;
            font-weight: 500;
            padding: 10px 14px;
            font-size: 1.1em;
        }
        
        .team-name-edit-section {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-top: 2px;
        }
        
        .team-name-edit-section input {
            flex: 1;
            font-size: 1rem;
        }
        
        .team-name-edit-section .btn {
            padding: 5px 10px;
            font-size: 1rem;
        }
        
        /* 모바일 추가 박스 스타일 */
        .extra-box-mobile-section {
            background-color: #f8f9fa;
            border-radius: 6px;
            padding: 6px;
            margin: 1px 0;
            border: 1px solid #e9ecef;
        }
        
        .extra-box-mobile-header {
            text-align: center;
            margin-bottom: 1px;
        }
        
        .extra-box-mobile-controls {
            text-align: center;
        }
        
        .extra-box-team {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
        }
        
        .extra-box-team small {
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .extra-box-team .btn-group-sm .btn {
            padding: 8px 12px;
            font-size: 1rem;
            min-width: 40px;
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mb-0">
            <div id="list-info-box" class="col-12 text-center" style="background-color: #e9ecef; padding: 4px; border-radius: 8px; margin-bottom: 2px;">
                <div style="font-weight: 600; font-size: 1.1rem; color: #495057;">
                    <%= listName %> (경기 <%= currentMatchIndex + 1 %> / <%= totalMatches %>)
                </div>
            </div>
        </div>
        <% } %>
        
        
        <!-- 팀명 표시 및 수정 -->
        <div class="row mb-0">
            <div class="col-6 text-center">
                <div style="font-weight:700; font-size:1.3rem; margin-bottom: 2px;" id="home-team-display">
                    <%= match.home_team || 'HOME' %>
                </div>
                <button class="btn btn-outline-primary" style="font-size: 1.1em; padding: 6px 12px;" onclick="openTeamNameModal('home')">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
            <div class="col-6 text-center">
                <div style="font-weight:700; font-size:1.3rem; margin-bottom: 2px;" id="away-team-display">
                    <%= match.away_team || 'AWAY' %>
                </div>
                <button class="btn btn-outline-primary" style="font-size: 1.1em; padding: 6px 12px;" onclick="openTeamNameModal('away')">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
        </div>
        <!-- 통합 스코어 영역 (1줄) -->
        <div class="row mb-0">
            <div class="col-12">
                <div class="unified-score-section">
                    <!-- 홈팀 스코어 컨트롤 -->
                    <div class="score-group">
                        <div class="score-buttons">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- 중앙 컨트롤 영역 -->
                    <div class="center-controls">
                        <div class="form-check form-check-inline">
                            <input type="checkbox" class="form-check-input" id="use-team-logos" checked style="transform: scale(0.8);">
                            <label class="form-check-label" for="use-team-logos" style="font-size: 0.85em;">
                                팀로고 사용
                            </label>
                        </div>
                        <div class="score-display-container">
                            <div id="home-score" class="score-display"><%= match.home_score || 0 %></div>
                            <div id="away-score" class="score-display"><%= match.away_score || 0 %></div>
                        </div>
                        <button class="btn btn-warning btn-sm" style="font-size: 0.8em; padding: 4px 8px;" onclick="swapTeams()">
                            <i class="bi bi-arrow-left-right"></i> 위치변경
                        </button>
                    </div>
                    
                    <!-- 어웨이팀 스코어 컨트롤 -->
                    <div class="score-group">
                        <div class="score-buttons">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- 경기 상태 선택 (숨김) -->
        <div class="row mb-0" style="display: none;">
            <div class="col-12 text-center">
                <div class="btn-group" role="group" aria-label="Match State">
                    <input type="radio" class="btn-check" name="matchState" id="state-first" value="전반" autocomplete="off" checked>
                    <label class="btn btn-outline-primary" for="state-first">전반</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-first-end" value="전반종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-first-end">전반종료</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-second" value="후반" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-second">후반</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-second-end" value="후반종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-second-end">후반종료</label>

                    <input type="radio" class="btn-check" name="matchState" id="state-end" value="경기종료" autocomplete="off">
                    <label class="btn btn-outline-primary" for="state-end">경기종료</label>
                </div>
            </div>
        </div>
        <!-- 타이머 영역 -->
        <div class="timer-section">
            <div id="timer-display">00:00</div>
            <div class="timer-controls mb-2">
                <button class="btn btn-success timer-btn" onclick="startTimer()">
                    <i class="bi bi-play-fill"></i> 시작
                </button>
                <button class="btn btn-danger timer-btn" onclick="stopTimer()">
                    <i class="bi bi-pause-fill"></i> 멈춤
                </button>
                <button class="btn btn-secondary timer-btn" onclick="resetTimer()">
                    <i class="bi bi-arrow-counterclockwise"></i> 리셋
                </button>
            </div>
            <!-- 시간 수정 입력 필드 (수정 버튼 클릭 시 표시) -->
            <div id="time-edit-container" class="d-flex justify-content-center align-items-center gap-3 mb-2" style="display: none;">
                <input type="text" id="time-edit-input" class="form-control" style="width:96px; text-align:center; font-size: 1.1em;" placeholder="00:00" pattern="[0-9]{2}:[0-9]{2}">
                <button id="apply-time-btn" class="btn btn-primary" style="font-size: 1.1em; padding: 8px 16px;">적용</button>
            </div>
        </div>
        
        <!-- 스코어 보드 추가 박스 (모바일) -->
        <div class="extra-box-mobile-section">
            <div class="extra-box-mobile-header">
                <div class="d-flex justify-content-between align-items-center mb-0">
                    <button class="btn btn-primary btn-sm" id="mobileToggleExtraBox" style="font-size: 0.8em; padding: 3px 6px;">
                        <i class="fas fa-eye"></i> 승부차기표시
                    </button>
                    <small class="text-muted" id="mobilePenaltyText">0 (승부차기) 0</small>
                </div>
                <div class="d-flex align-items-center justify-content-center gap-2">
                    <div class="extra-box-team">
                        <small>홈</small>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-danger d-flex align-items-center justify-content-center" id="mobileHomeScoreMinus" style="width: 60px; height: 30px;">
                                <i class="fas fa-minus"></i> -
                            </button>
                            <button class="btn btn-outline-success d-flex align-items-center justify-content-center" id="mobileHomeScorePlus" style="width: 60px; height: 30px;">
                                <i class="fas fa-plus"></i> +
                            </button>
                        </div>
                    </div>
                    <div class="mx-2">
                        <small class="text-muted">VS</small>
                    </div>
                    <div class="extra-box-team">
                        <small>어웨이</small>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-danger d-flex align-items-center justify-content-center" id="mobileAwayScoreMinus" style="width: 60px; height: 30px;">
                                <i class="fas fa-minus"></i> -
                            </button>
                            <button class="btn btn-outline-success d-flex align-items-center justify-content-center" id="mobileAwayScorePlus" style="width: 60px; height: 30px;">
                                <i class="fas fa-plus"></i> +
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 리스트 네비게이션 버튼 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mt-0">
            <div class="col-12">
                <div class="d-flex justify-content-between gap-2 mb-2">
                    <button class="btn btn-outline-secondary" onclick="prevMatch()" style="flex: 1; font-size: 0.8em; padding: 5px 8px;">
                        <i class="bi bi-chevron-left"></i> 이전경기
                    </button>
                    <button class="btn btn-outline-secondary" onclick="nextMatch()" style="flex: 1; font-size: 0.8em; padding: 5px 8px;">
                        다음경기 <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-center gap-2">
                    <button class="btn btn-success" onclick="pushToIntegratedOverlay()" style="flex: 1; font-size: 0.8em; padding: 5px 8px;">
                        <i class="bi bi-display"></i> 통합 URL에 푸시
                    </button>
                    <button class="btn btn-warning" onclick="forceRefreshOverlay()" style="flex: 1; font-size: 0.8em; padding: 5px 8px;">
                        <i class="bi bi-arrow-clockwise"></i> 강제 새로고침
                    </button>
                </div>
            </div>
        </div>
        <% } %>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // 경기별 타이머 상태 관리 객체 (호환성 지원)
        const timerState = {
            startTime: Date.now(),
            pausedTime: 0,
            currentSeconds: 0,
            isRunning: false,
            lastServerTime: 0,
            lastUpdateTime: 0,
            localTimer: null
        };
        
        // 타이머 상태 (일반 컨트롤 페이지와 동일)
        let currentTime = 0;
        let isRunning = false;
        
        let isConnected = true;

        // 타이머 표시 업데이트 (일반 컨트롤 페이지와 동일)
        function updateTimerDisplay() {
            const minutes = Math.floor(currentTime / 60);
            const seconds = currentTime % 60;
            const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            document.getElementById('timer-display').textContent = display;
            console.log('타이머 표시 업데이트:', display);
        }

        // 팀로고 정보 로드 함수 (오버레이와 동일한 로직)
        async function loadTeamLogos() {
            try {
                console.log('팀로고 정보 로드 시작...');
                
                // 1. DB에서 팀로고 정보 로드 (최우선순위) - 오버레이와 동일한 방식
                try {
                    const response = await fetch(`/api/matches/${matchId}/team-logos`);
                    
                    if (response.ok) {
                        const result = await response.json();
                        console.log('팀로고 정보 로드 성공:', result.teamLogos);
                        
                        if (result.teamLogos && result.teamLogos.length > 0) {
                            // 각 팀의 로고 정보 업데이트 (오버레이와 동일한 방식)
                            result.teamLogos.forEach(teamInfo => {
                                const teamType = teamInfo.team_type;
                                console.log(`${teamType}팀 로고 정보 업데이트:`, teamInfo);
                                
                                // 로고 배경색 업데이트 (오버레이와 동일한 방식)
                                const logoBgInput = document.getElementById(`${teamType}-team-logo-bg`);
                                if (logoBgInput && teamInfo.logo_bg_color) {
                                    logoBgInput.value = teamInfo.logo_bg_color;
                                }
                                
                                // 로고 미리보기 업데이트 (오버레이와 동일한 방식)
                                const previewBg = document.getElementById(`${teamType}-preview-bg`);
                                const previewImg = document.getElementById(`${teamType}-preview-logo`);
                                const noLogoText = previewBg.querySelector('.no-logo-text');
                                
                                if (teamInfo.logo_path) {
                                    // 오버레이와 동일한 경로 및 배경색 사용
                                    previewImg.src = teamInfo.logo_path;
                                    previewImg.style.display = 'block';
                                    previewBg.style.backgroundColor = teamInfo.logo_bg_color || '#ffffff';
                                    noLogoText.style.display = 'none';
                                } else {
                                    // 로고가 없는 경우
                                    previewImg.style.display = 'none';
                                    previewBg.style.backgroundColor = teamInfo.logo_bg_color || '#ffffff';
                                    noLogoText.style.display = 'block';
                                }
                            });
                            return; // 성공적으로 로드했으면 종료
                        }
                    }
                } catch (dbError) {
                    console.error('팀로고 DB 조회 오류:', dbError);
                }
                
                // 2. 팀 로고 맵 정보 로드 (백업) - 오버레이와 동일한 방식
                try {
                    const response = await fetch('/api/overlay-images/TEAMLOGO/SOCCER/');
                    if (response.ok) {
                        const data = await response.json();
                        if (data && data.teamLogoMap) {
                            const homeTeamName = '<%= match.home_team %>';
                            const awayTeamName = '<%= match.away_team %>';
                            
                            console.log('사용 가능한 팀들:', Object.keys(data.teamLogoMap));
                            console.log('현재 경기 팀명:', { homeTeamName, awayTeamName });
                            
                            // 홈팀 로고 설정 (오버레이와 동일한 방식)
                            if (data.teamLogoMap[homeTeamName]) {
                                const previewBg = document.getElementById('home-preview-bg');
                                const previewImg = document.getElementById('home-preview-logo');
                                const noLogoText = previewBg.querySelector('.no-logo-text');
                                
                                // 오버레이와 동일한 경로 사용
                                previewImg.src = data.teamLogoMap[homeTeamName].path;
                                previewImg.style.display = 'block';
                                previewBg.style.backgroundColor = data.teamLogoMap[homeTeamName].bgColor || '#ffffff';
                                noLogoText.style.display = 'none';
                                
                                console.log('홈팀 로고 정보 로드 (팀 맵):', data.teamLogoMap[homeTeamName]);
                            }
                            
                            // 어웨이팀 로고 설정 (오버레이와 동일한 방식)
                            if (data.teamLogoMap[awayTeamName]) {
                                const previewBg = document.getElementById('away-preview-bg');
                                const previewImg = document.getElementById('away-preview-logo');
                                const noLogoText = previewBg.querySelector('.no-logo-text');
                                
                                // 오버레이와 동일한 경로 사용
                                previewImg.src = data.teamLogoMap[awayTeamName].path;
                                previewImg.style.display = 'block';
                                previewBg.style.backgroundColor = data.teamLogoMap[awayTeamName].bgColor || '#ffffff';
                                noLogoText.style.display = 'none';
                                
                                console.log('어웨이팀 로고 정보 로드 (팀 맵):', data.teamLogoMap[awayTeamName]);
                            }
                        }
                    }
                } catch (mapError) {
                    console.error('팀 로고 맵 조회 오류:', mapError);
                }
                
            } catch (error) {
                console.error('팀로고 정보 로드 오류:', error);
            }
        }

        // 시간 입력 박스 클릭 시 내용 지우기
        document.addEventListener('DOMContentLoaded', function() {
            const timeEditInput = document.getElementById('time-edit-input');
            
            if (timeEditInput) {
                timeEditInput.addEventListener('click', function() {
                    this.select(); // 모든 텍스트 선택
                });
            }

            // 팀로고 사용 유무 상태 불러오기
            loadTeamLogoVisibility();
            
            // 팀로고 정보 로드 (DB에서)
            loadTeamLogos();

            // 팀로고 사용 유무 체크박스 이벤트 리스너
            const useTeamLogosCheckbox = document.getElementById('use-team-logos');
            if (useTeamLogosCheckbox) {
                useTeamLogosCheckbox.addEventListener('change', function() {
                    const useLogos = this.checked;
                    console.log('=== 모바일 컨트롤 패널: 팀로고 사용 상태 변경 ===');
                    console.log('useLogos:', useLogos);
                    console.log('matchId:', '<%= match.id %>');
                    console.log('socket.connected:', socket.connected);
                    
                    // 서버에 상태 저장
                    saveTeamLogoVisibility(useLogos);
                    
                    // 소켓으로 오버레이에 전송
                    if (socket.connected) {
                        socket.emit('teamLogoVisibilityChanged', {
                            matchId: '<%= match.id %>',
                            useLogos: useLogos
                        });
                        console.log('소켓 이벤트 전송됨: teamLogoVisibilityChanged');
                    } else {
                        console.log('소켓 연결되지 않음, 이벤트 전송 실패');
                    }
                });
            }
            
            // 모바일 추가 박스 기능 초기화
            initializeMobileExtraBoxControls();
            loadMobileExtraBoxText();
            
            // Socket.IO 이벤트 리스너 추가
            setupMobileSocketListeners();
        });

        // 점수 변경 이벤트
        function updateScore(team, change) {
            const scoreDisplay = document.getElementById(`${team}-score`);
            const currentScore = parseInt(scoreDisplay.textContent) || 0;
            const newScore = Math.max(0, currentScore + change);
            scoreDisplay.textContent = newScore;
            updateMatchInfo();
        }

        // 서버와 소켓 연결
        socket.on('connect', () => {
            console.log('=== 소켓 연결됨 ===');
            console.log('matchId:', matchId);
            
            // 이전 방에서 나가기
            socket.emit('leave_all_rooms');
            
            // 새 방에 참가
            socket.emit('join', matchId);
            
            // 연결 시 현재 타이머 상태 요청
            socket.emit('request_timer_state', { matchId: matchId });
        });

        socket.on('disconnect', () => {
            console.log('=== 소켓 연결 끊어짐 ===');
        });

        // 페이지 언로드 시 방에서 나가기
        window.addEventListener('beforeunload', () => {
            console.log('=== 페이지 언로드 - 방에서 나가기 ===');
            socket.emit('leave_all_rooms');
        });

        // 타이머 상태 수신 (일반 컨트롤 페이지와 동일)
        socket.on('timer_state', (data) => {
            console.log('=== 타이머 상태 수신 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                currentTime = Math.max(0, data.currentSeconds || 0);
                isRunning = data.isRunning || false;
                
                if (isRunning) {
                    startLocalTimer();
                } else {
                    updateTimerDisplay();
                }
                
                console.log('타이머 상태 초기화 완료:', data);
            }
        });

        socket.on('timer_update', (data) => {
            console.log('=== 타이머 업데이트 수신 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                currentTime = Math.max(0, data.currentSeconds || 0);
                isRunning = data.isRunning || false;
                
                updateTimerDisplay();
                
                if (isRunning && !timerInterval) {
                    startLocalTimer();
                } else if (!isRunning && timerInterval) {
                    stopLocalTimer();
                }
                
                console.log('타이머 업데이트 완료:', data);
            }
        });

        // 추가 타이머 이벤트들은 단순화된 시스템에서 불필요하므로 제거

        // 복잡한 타이머 이벤트들은 단순화된 시스템에서 불필요하므로 제거

        // 타이머 컨트롤 버튼 이벤트는 onclick으로 처리됨
        


        // 경기 상태 변경 이벤트
        document.querySelectorAll('input[name="matchState"]').forEach(radio => {
            radio.addEventListener('change', updateMatchInfo);
        });

        // 점수/타이머/경기상태 변경 시 서버에 업데이트
        async function updateMatchInfo() {
            const formData = {
                home_score: parseInt(document.getElementById('home-score').textContent) || 0,
                away_score: parseInt(document.getElementById('away-score').textContent) || 0,
                match_data: {
                    state: document.querySelector('input[name="matchState"]:checked')?.value || '전반'
                }
            };
            try {
                await fetch(`/api/matches/${matchId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                // 실시간 업데이트를 위한 WebSocket 이벤트 발생
                socket.emit('match_updated', {
                    matchId: matchId,
                    home_score: formData.home_score,
                    away_score: formData.away_score,
                    state: formData.match_data.state
                });
                
                console.log('점수/상태 업데이트 완료:', formData);
            } catch (error) {
                console.error('업데이트 중 오류:', error);
            }
        }

        // 시간 수정 적용 버튼 이벤트 (일반 컨트롤 페이지와 동일)
        document.getElementById('apply-time-btn').addEventListener('click', function() {
            const timeEditInput = document.getElementById('time-edit-input');
            let timeValue = timeEditInput.value.trim();
            
            // 숫자만 입력된 경우에만 자동 변환
            if (/^\d+$/.test(timeValue)) {
                let val = timeValue;
                if (val.length === 0) {
                    timeValue = '00:00';
                } else if (val.length <= 2) {
                    timeValue = '00:' + val.padStart(2, '0');
                } else if (val.length === 3) {
                    timeValue = '0' + val[0] + ':' + val.slice(1, 3);
                } else if (val.length >= 4) {
                    timeValue = val.slice(0, val.length - 2).padStart(2, '0') + ':' + val.slice(-2);
                }
            }
            
            timeEditInput.value = timeValue;
            
            // 00:00 형식 검증
            const timeRegex = /^([0-9]{2}):([0-9]{2})$/;
            if (!timeRegex.test(timeValue)) {
                alert('올바른 시간 형식(00:00) 또는 숫자만 입력해주세요.');
                return;
            }
            
            // 분과 초 추출
            let [minutes, seconds] = timeValue.split(':').map(Number);
            
            // 0 또는 0000 입력 제한
            if (minutes === 0 && seconds === 0) {
                alert('0 또는 00:00은 입력할 수 없습니다. 최소 00:01 이상의 시간을 입력해주세요.');
                return;
            }
            
            if (minutes > 90) minutes = 90;
            if (seconds > 59) seconds = 59;
            
            // 서버에 시간 변경 요청
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'set',
                timeValue: { minutes: minutes, seconds: seconds }
            });
            
            // 시간 수정 UI 숨기기
            const timeEditContainer = document.getElementById('time-edit-container');
            if (timeEditContainer) {
                timeEditContainer.style.display = 'none';
            }
            
            console.log('시간 수정 요청:', { minutes, seconds });
        });

        // 로컬 타이머 (일반 컨트롤 페이지와 동일)
        let timerInterval = null;
        
        function startLocalTimer() {
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                if (isRunning) {
                    currentTime++;
                    updateTimerDisplay();
                }
            }, 1000);
            console.log('로컬 타이머 시작');
        }
        
        function stopLocalTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            console.log('로컬 타이머 정지');
        }

        // 타이머 제어 함수들 (일반 컨트롤 페이지와 동일)
        function startTimer() {
            console.log('=== 타이머 시작 요청 (안전 시작: 정지→시작) ===');
            console.log('matchId:', matchId);
            // 1) 먼저 정지 신호로 서버/오버레이의 잠김 상태 해제
            try {
                const currentTime = timerState.currentSeconds;
                socket.emit('timer_control', { matchId: matchId, action: 'stop', currentTime });
                console.log('사전 정지 신호 전송 완료');
            } catch (e) {
                console.warn('사전 정지 신호 전송 중 경고:', e);
            }
            // 2) 짧은 지연 후 시작 신호 전송
            setTimeout(() => {
                socket.emit('timer_control', { matchId: matchId, action: 'start' });
                console.log('시작 신호 전송 완료');
            }, 80);
        }

        function stopTimer() {
            console.log('=== 타이머 정지 요청 ===');
            console.log('matchId:', matchId, 'currentTime:', timerState.currentSeconds);
            // 현재 로컬 타이머의 시간을 서버로 전송
            const currentTime = timerState.currentSeconds;
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'stop',
                currentTime: currentTime
            });
        }

        function resetTimer() {
            console.log('=== 타이머 리셋 요청 ===');
            console.log('matchId:', matchId);
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'reset'
            });
        }


        // 리스트 기능 관련 변수
        let currentMatchIndex = 0;
        let totalMatches = 0;
        let listId = null;
        let listName = null;
        
        // 현재 경기가 푸시되어 있는지 확인하고 리스트 박스 색상 업데이트
        async function checkPushedMatchStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/pushed-match/${listId}`);
                const result = await response.json();
                
                const listInfoBox = document.getElementById('list-info-box');
                if (listInfoBox) {
                    if (result.success && result.data && result.data.matchId === matchId) {
                        // 현재 경기가 푸시되어 있음 - 빨간색
                        listInfoBox.style.backgroundColor = '#dc3545';
                        listInfoBox.querySelector('div').style.color = '#ffffff';
                    } else {
                        // 현재 경기가 푸시되어 있지 않음 - 회색
                        listInfoBox.style.backgroundColor = '#e9ecef';
                        listInfoBox.querySelector('div').style.color = '#495057';
                    }
                }
            } catch (error) {
                console.error('푸시된 경기 상태 확인 실패:', error);
            }
        }

        // URL 상태 확인
        async function checkOverlayStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/overlay-status/${listId}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.isActive) {
                        console.log('오버레이 URL 활성 상태:', result);
                        return result;
                    } else {
                        console.log('오버레이 URL 비활성 상태:', result.message);
                        return null;
                    }
                }
            } catch (error) {
                console.error('URL 상태 확인 실패:', error);
                return null;
            }
        }

        // 강제 새로고침
        async function forceRefreshOverlay() {
            if (!listId) {
                alert('리스트 정보가 없습니다.');
                return;
            }
            
            try {
                const response = await fetch(`/api/overlay-refresh/${listId}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('오버레이 URL이 강제 새로고침되었습니다.');
                    console.log('강제 새로고침 완료:', result.message);
                } else {
                    alert('강제 새로고침 실패: ' + result.message);
                }
            } catch (error) {
                console.error('강제 새로고침 실패:', error);
                alert('강제 새로고침 중 오류가 발생했습니다.');
            }
        }

        // 통합 URL에 현재 경기 푸시 (강제 새로고침 옵션 포함)
        async function pushToIntegratedOverlay(forceRefresh = false) {
            console.log('=== 통합 URL 푸시 시작 ===');
            console.log('현재 matchId:', matchId);
            console.log('현재 listId:', listId);
            console.log('현재 listName:', listName);
            console.log('현재 matchIndex:', currentMatchIndex);
            console.log('현재 totalMatches:', totalMatches);
            console.log('강제 새로고침:', forceRefresh);
            
            // listId가 없으면 경고
            if (!listId) {
                alert('리스트 정보가 없습니다. 리스트 모드에서만 사용 가능합니다.');
                return;
            }
            
            // URL 상태 확인 및 통합 확인
            const status = await checkOverlayStatus();
            
            // 현재 경기 정보 가져오기
            const homeTeam = document.getElementById('home-team-display').textContent.trim();
            const awayTeam = document.getElementById('away-team-display').textContent.trim();
            const homeScore = document.getElementById('home-score').textContent;
            const awayScore = document.getElementById('away-score').textContent;
            
            let confirmMessage = `통합 URL에 현재 경기를 푸시하시겠습니까?\n\n` +
                `경기: ${homeTeam} vs ${awayTeam}\n` +
                `점수: ${homeScore} - ${awayScore}\n` +
                `리스트: ${listName} (${currentMatchIndex + 1}/${totalMatches})`;
            
            if (status && !forceRefresh) {
                confirmMessage += `\n\n⚠️ 현재 오버레이에 다른 경기가 표시 중입니다.\n강제 새로고침이 필요합니다.`;
            }
            
            const confirmPush = confirm(confirmMessage);
            if (!confirmPush) {
                return;
            }
            
            if (status && !forceRefresh) {
                forceRefresh = true;
            }
            
            // WebSocket을 통해 리스트 오버레이에 경기 변경 알림
            const pushData = {
                listId: listId,
                matchIndex: currentMatchIndex,
                matchId: matchId,  // 현재 선택된 경기의 ID 추가
                forceRefresh: forceRefresh
            };
            
            console.log('전송할 데이터:', pushData);
            console.log('listId 타입:', typeof listId);
            console.log('listId 값:', listId);
            socket.emit('push_to_list_overlay', pushData);
            
            console.log('통합 오버레이에 경기 푸시 완료');
        }
        
        // 서버 응답 처리
        socket.on('push_to_list_overlay_response', (response) => {
            console.log('푸시 응답 수신:', response);
            if (response.success) {
                alert('통합 URL에 경기가 성공적으로 푸시되었습니다!');
                // 푸시 성공 후 색상 업데이트
                checkPushedMatchStatus();
            } else {
                alert('푸시 실패: ' + (response.error || '알 수 없는 오류'));
            }
        });

        // 팀명 수정 모달 열기
        function openTeamNameModal(team) {
            // 현재 화면에 표시된 팀명을 가져오기
            const teamDisplay = document.getElementById(`${team}-team-display`);
            const currentName = teamDisplay ? teamDisplay.textContent.trim() : '';
            
            document.getElementById('modal-team-name').value = currentName;
            document.getElementById('teamNameModal').setAttribute('data-team', team);
            new bootstrap.Modal(document.getElementById('teamNameModal')).show();
        }

        // 팀명 변경 확인
        async function confirmTeamNameChange() {
            const team = document.getElementById('teamNameModal').getAttribute('data-team');
            const newTeamName = document.getElementById('modal-team-name').value.trim();
            
            if (newTeamName) {
                await updateTeamName(team, newTeamName);
                bootstrap.Modal.getInstance(document.getElementById('teamNameModal')).hide();
            } else {
                alert('팀명을 입력해주세요.');
            }
        }

        // 팀 위치 변경 함수
        async function swapTeams() {
            if (!confirm('홈팀과 어웨이팀의 정보를 서로 바꾸시겠습니까?')) {
                return;
            }
            
            try {
                // 현재 팀 정보 가져오기
                const homeTeamName = document.getElementById('home-team-display').textContent;
                const awayTeamName = document.getElementById('away-team-display').textContent;
                const homeScore = document.getElementById('home-score').value;
                const awayScore = document.getElementById('away-score').value;
                
                // 서버에 위치 변경 요청
                const response = await fetch(`/api/matches/${matchId}/swap-teams`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    throw new Error('팀 위치 변경 실패');
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀 위치 변경 실패');
                }
                
                // 성공 메시지
                alert('팀 위치가 성공적으로 변경되었습니다.');
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('swapTeams', { matchId: matchId });
                
            } catch (error) {
                console.error('팀 위치 변경 중 오류 발생:', error);
                alert('팀 위치 변경 중 오류가 발생했습니다.');
            }
        }

        // 팀명 업데이트 함수
        async function updateTeamName(team, newTeamName) {
            try {
                const response = await fetch(`/api/matches/${matchId}/team-name`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamName: newTeamName
                    })
                });

                if (!response.ok) {
                    throw new Error('팀명 업데이트 실패');
                }

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀명 업데이트 실패');
                }

                // 성공 메시지 표시
                alert(`${team === 'home' ? '홈팀' : '원정팀'}명이 '${newTeamName}'으로 변경되었습니다.`);
                
                // 팀명 표시 업데이트
                const teamNameDisplay = document.getElementById(`${team}-team-display`);
                if (teamNameDisplay) {
                    teamNameDisplay.textContent = newTeamName;
                }
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('updateTeamName', {
                    matchId: matchId,
                    team: team,
                    teamName: newTeamName
                });

            } catch (error) {
                console.error('팀명 업데이트 중 오류 발생:', error);
                alert('팀명 업데이트 중 오류가 발생했습니다.');
            }
        }

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // 팀명 업데이트 (팀명이 있는 경우에만)
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay && data.home_team) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay && data.away_team) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    console.log('종목 변경됨:', currentSportType);
                }
                
                // 경기 정보 업데이트 (점수는 이미 match_updated 이벤트에서 처리됨)
                console.log('경기 정보 업데이트 완료:', data);
            }
        });

        // 팀 위치 변경 이벤트
        socket.on('teamsSwapped', (data) => {
            if (data.matchId === matchId) {
                console.log('팀 위치 변경 이벤트 수신:', data);
                
                // 팀명 업데이트 (팀명이 있는 경우에만)
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay && data.home_team) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay && data.away_team) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 점수 업데이트
                const homeScoreDisplay = document.getElementById('home-score');
                const awayScoreDisplay = document.getElementById('away-score');
                
                if (homeScoreDisplay) {
                    homeScoreDisplay.textContent = data.home_score;
                }
                if (awayScoreDisplay) {
                    awayScoreDisplay.textContent = data.away_score;
                }
                
                console.log('팀 위치 변경 완료');
            }
        });
        
        <% if (typeof listId !== 'undefined' && listId) { %>
        // EJS 템플릿 변수 할당
        currentMatchIndex = <%- currentMatchIndex || 0 %>;
        totalMatches = <%- totalMatches || 0 %>;
        listId = '<%- listId %>';
        listName = '<%- listName %>';
        
        console.log('리스트 모드 초기화:', { listId, listName, currentMatchIndex, totalMatches });
        
        // 페이지 로드 시 푸시된 경기 상태 확인
        document.addEventListener('DOMContentLoaded', function() {
            checkPushedMatchStatus();
        });
        
        // 다음 경기로 이동
        async function nextMatch() {
            if (currentMatchIndex < totalMatches - 1) {
                currentMatchIndex++;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 이전 경기로 이동
        async function prevMatch() {
            if (currentMatchIndex > 0) {
                currentMatchIndex--;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 경기 리스트 페이지로 이동
        function goToList() {
            window.location.href = '/match-list-manager';
        }

        // 팀로고 사용 유무 상태 저장
        async function saveTeamLogoVisibility(useLogos) {
            try {
                const response = await fetch('/api/soccer-team-logo-visibility/<%= match.id %>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        useLogos: useLogos
                    })
                });
                if (!response.ok) throw new Error('팀로고 사용 상태 저장 실패');
                console.log('팀로고 사용 상태 저장 완료:', useLogos);
            } catch (error) {
                console.error('팀로고 사용 상태 저장 오류:', error);
            }
        }

        // 팀로고 사용 유무 상태 불러오기
        async function loadTeamLogoVisibility() {
            try {
                const response = await fetch('/api/soccer-team-logo-visibility/<%= match.id %>');
                if (response.ok) {
                    const data = await response.json();
                    const useLogos = data.useLogos;
                    console.log('팀로고 사용 상태 불러오기:', useLogos);
                    const checkbox = document.getElementById('use-team-logos');
                    if (checkbox) {
                        checkbox.checked = useLogos;
                        console.log('체크박스 상태 설정:', useLogos);
                    }
                } else {
                    console.log('팀로고 사용 상태 불러오기 실패, 기본값 사용');
                }
            } catch (error) {
                console.error('팀로고 사용 상태 불러오기 오류:', error);
            }
        }
        <% } %>
    </script>
    
    <!-- 팀명 수정 모달 -->
    <div class="modal fade" id="teamNameModal" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">팀명 수정</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">팀명</label>
                        <input type="text" id="modal-team-name" class="form-control" placeholder="팀명 입력">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" onclick="confirmTeamNameChange()">확인</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // 모바일 추가 박스 컨트롤 초기화
        function initializeMobileExtraBoxControls() {
            console.log('=== 모바일 추가 박스 컨트롤 초기화 ===');
            
            const mobileHomeScorePlus = document.getElementById('mobileHomeScorePlus');
            const mobileHomeScoreMinus = document.getElementById('mobileHomeScoreMinus');
            const mobileAwayScorePlus = document.getElementById('mobileAwayScorePlus');
            const mobileAwayScoreMinus = document.getElementById('mobileAwayScoreMinus');
            const mobileToggleButton = document.getElementById('mobileToggleExtraBox');
            console.log('모바일 버튼 요소들:', {
                mobileHomeScorePlus,
                mobileHomeScoreMinus,
                mobileAwayScorePlus,
                mobileAwayScoreMinus,
                mobileToggleButton
            });
            
            // 홈팀 점수 증가 버튼
            if (mobileHomeScorePlus) {
                mobileHomeScorePlus.addEventListener('click', function() {
                    updateMobilePenaltyScore('home', 1);
                });
            }
            
            // 홈팀 점수 감소 버튼
            if (mobileHomeScoreMinus) {
                mobileHomeScoreMinus.addEventListener('click', function() {
                    updateMobilePenaltyScore('home', -1);
                });
            }
            
            // 어웨이팀 점수 증가 버튼
            if (mobileAwayScorePlus) {
                mobileAwayScorePlus.addEventListener('click', function() {
                    updateMobilePenaltyScore('away', 1);
                });
            }
            
            // 어웨이팀 점수 감소 버튼
            if (mobileAwayScoreMinus) {
                mobileAwayScoreMinus.addEventListener('click', function() {
                    updateMobilePenaltyScore('away', -1);
                });
            }
            
            // 토글 버튼
            if (mobileToggleButton) {
                mobileToggleButton.addEventListener('click', function() {
                    console.log('=== 모바일: 추가 박스 토글 버튼 클릭 ===');
                    socket.emit('toggleExtraBox', {
                        matchId: '<%= match.id %>'
                    });
                });
            }
            
            
        }
        
        // 모바일 승부차기 점수 업데이트 함수
        function updateMobilePenaltyScore(team, change) {
            console.log('=== 모바일 승부차기 점수 업데이트 ===');
            console.log('team:', team, 'change:', change);
            
            const currentText = getCurrentPenaltyText();
            console.log('현재 텍스트:', currentText);
            
            // 정규식으로 홈팀과 어웨이팀 점수 추출
            const match = currentText.match(/(\d+)\s*\(승부차기\)\s*(\d+)/);
            if (!match) {
                console.log('승부차기 형식을 찾을 수 없습니다');
                return;
            }
            
            let homeScore = parseInt(match[1]);
            let awayScore = parseInt(match[2]);
            
            console.log('현재 점수 - 홈:', homeScore, '어웨이:', awayScore);
            
            // 점수 업데이트
            if (team === 'home') {
                homeScore = Math.max(0, homeScore + change);
            } else if (team === 'away') {
                awayScore = Math.max(0, awayScore + change);
            }
            
            console.log('업데이트된 점수 - 홈:', homeScore, '어웨이:', awayScore);
            
            // 새로운 텍스트 생성
            const newText = `${homeScore} (승부차기) ${awayScore}`;
            console.log('새로운 텍스트:', newText);
            
            // 현재 텍스트 업데이트
            setCurrentPenaltyText(newText);
            
            
            // 실시간 동기화
            socket.emit('updateExtraBoxText', {
                matchId: '<%= match.id %>',
                text: newText
            });
            
            console.log('모바일 승부차기 점수 업데이트 및 저장 완료');
        }
        
        // 현재 승부차기 텍스트 가져오기 (실제 저장된 값 사용)
        let currentPenaltyText = '0 (승부차기) 0';
        
        function getCurrentPenaltyText() {
            return currentPenaltyText;
        }
        
        function setCurrentPenaltyText(text) {
            currentPenaltyText = text;
            // 모바일 UI에 텍스트 업데이트
            const mobilePenaltyTextElement = document.getElementById('mobilePenaltyText');
            if (mobilePenaltyTextElement) {
                mobilePenaltyTextElement.textContent = text;
            }
        }
        
        
        // 모바일 추가 박스 텍스트 불러오기
        async function loadMobileExtraBoxText() {
            try {
                const response = await fetch(`/api/extra-box-text/soccer/<%= match.id %>`);
                const data = await response.json();
                
                if (data.success) {
                    setCurrentPenaltyText(data.text);
                    console.log('모바일: 저장된 추가 박스 텍스트 불러오기 완료:', data.text);
                }
            } catch (error) {
                console.error('모바일: 추가 박스 텍스트 불러오기 오류:', error);
            }
        }
        
        
        // 모바일 Socket.IO 이벤트 리스너 설정
        function setupMobileSocketListeners() {
            console.log('=== 모바일 Socket.IO 이벤트 리스너 설정 ===');
            
            // 추가 박스 텍스트 업데이트 이벤트 처리 (메인 컨트롤에서 온 변경사항)
            socket.on('updateExtraBoxText', function(data) {
                console.log('=== 모바일: 추가 박스 텍스트 업데이트 이벤트 수신 ===');
                console.log('수신된 데이터:', data);
                
                if (data.matchId === '<%= match.id %>') {
                    setCurrentPenaltyText(data.text);
                    console.log('모바일: 메인 컨트롤에서 온 텍스트 업데이트 완료:', data.text);
                }
            });
            
            // 추가 박스 토글 이벤트 처리 (메인 컨트롤에서 온 변경사항)
            socket.on('toggleExtraBox', function(data) {
                console.log('=== 모바일: 추가 박스 토글 이벤트 수신 ===');
                console.log('수신된 데이터:', data);
                
                if (data.matchId === '<%= match.id %>') {
                    console.log('모바일: 메인 컨트롤에서 온 토글 이벤트 수신 완료');
                }
            });
        }

        // 팀로고 사용 상태 불러오기
        async function loadTeamLogoVisibility() {
            try {
                const response = await fetch('/api/soccer-team-logo-visibility/<%= match.id %>');
                
                if (response.ok) {
                    const data = await response.json();
                    const useLogos = data.useLogos;
                    
                    console.log('팀로고 사용 상태 불러오기:', useLogos);
                    
                    // 체크박스 상태 설정
                    const checkbox = document.getElementById('use-team-logos');
                    if (checkbox) {
                        checkbox.checked = useLogos;
                        console.log('체크박스 상태 설정:', useLogos);
                    }
                } else {
                    console.log('팀로고 사용 상태 불러오기 실패, 기본값 사용');
                }
            } catch (error) {
                console.error('팀로고 사용 상태 불러오기 오류:', error);
            }
        }

        // 팀로고 사용 상태 저장
        async function saveTeamLogoVisibility(useLogos) {
            try {
                const response = await fetch('/api/soccer-team-logo-visibility/<%= match.id %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        useLogos: useLogos
                    })
                });
                
                if (!response.ok) {
                    throw new Error('팀로고 사용 상태 저장 실패');
                }
                
                console.log('팀로고 사용 상태 저장 완료:', useLogos);
            } catch (error) {
                console.error('팀로고 사용 상태 저장 오류:', error);
            }
        }
    </script>
</body>
</html> 