<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>템플릿 관리 - SportsCoder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        .template-card {
            transition: transform 0.2s;
        }
        .template-card:hover {
            transform: translateY(-5px);
        }
        .template-preview {
            height: 200px;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-size: 1.2rem;
        }
    </style>
</head>
<body>
    <%- include('partials/header', { title: '템플릿 관리' }) %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>템플릿 관리</h2>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newTemplateModal">
                <i class="bi bi-plus-lg"></i> 새 템플릿
            </button>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>템플릿 이름</th>
                                <th>템플릿 파일</th>
                                <th>컨트롤 파일</th>
                                <th>모바일 컨트롤 파일</th>
                                <th>상태</th>
                                <th>파일 관리</th>
                                <th>작업</th>
                            </tr>
                        </thead>
                        <tbody id="templatesList">
                            <!-- 템플릿 목록이 여기에 동적으로 추가됩니다 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- 새 템플릿 모달 -->
    <div class="modal fade" id="newTemplateModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">새 템플릿 생성</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="newTemplateForm">
                        <div class="mb-3">
                            <label for="templateName" class="form-label">템플릿 이름</label>
                            <input type="text" class="form-control" id="templateName" 
                                   required
                                   pattern="^[a-z0-9_]+$"
                                   title="영문 소문자, 숫자, 언더스코어(_)만 사용 가능합니다">
                            <div class="form-text">영문자, 숫자, 언더스코어(_)만 사용 가능합니다</div>
                        </div>
                        <div class="mb-3">
                            <label for="baseTemplate" class="form-label">기본 템플릿 선택</label>
                            <select class="form-select" id="baseTemplate" required>
                                <option value="">기본 템플릿을 선택하세요</option>
                            </select>
                            <div class="form-text">새 템플릿을 만들 때 복사할 기본 템플릿을 선택하세요</div>
                        </div>
                        <div class="mb-3" id="templatePreview" style="display: none;">
                            <label class="form-label">선택된 템플릿 미리보기</label>
                            <div class="border rounded p-3 bg-light">
                                <div id="previewContent">
                                    <!-- 미리보기 내용이 여기에 표시됩니다 -->
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="createTemplateBtn">생성</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 템플릿 수정 모달 -->
    <div class="modal fade" id="editTemplateModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">템플릿 수정</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editTemplateForm">
                        <input type="hidden" id="editTemplateId">
                        <div class="mb-3">
                            <label for="editTemplateName" class="form-label">템플릿 이름</label>
                            <input type="text" class="form-control" id="editTemplateName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editSportType" class="form-label">스포츠 타입</label>
                            <input type="text" class="form-control" id="editSportType" required>
                        </div>
                        <div class="mb-3">
                            <label for="editTemplateType" class="form-label">템플릿 타입</label>
                            <input type="text" class="form-control" id="editTemplateType" required>
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">설명</label>
                            <textarea class="form-control" id="editDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="updateTemplateBtn">수정</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 삭제 확인 모달 -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">템플릿 삭제</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>정말로 이 템플릿을 삭제하시겠습니까?</p>
                    <p class="text-danger">이 작업은 되돌릴 수 없습니다.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">삭제</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 파일 관리 모달 -->
    <div class="modal fade" id="fileManagementModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">템플릿 파일 관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="fileManagementContent">
                        <!-- 파일 관리 내용이 여기에 동적으로 추가됩니다 -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 파일 업로드 모달 -->
    <div class="modal fade" id="fileUploadModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">파일 업로드</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="fileUploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="fileInput" class="form-label">EJS 파일 선택</label>
                            <input type="file" class="form-control" id="fileInput" accept=".ejs" required>
                            <div class="form-text">EJS 파일만 업로드 가능합니다. (최대 5MB)</div>
                        </div>
                        <div class="mb-3">
                            <div class="alert alert-info">
                                <strong>주의:</strong> 기존 파일이 있다면 덮어쓰기됩니다.
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="uploadFileBtn">업로드</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 템플릿 목록 로드
        async function loadTemplates() {
            try {
                const response = await fetch('/api/templates');
                const templates = await response.json();
                
                const tbody = document.getElementById('templatesList');
                tbody.innerHTML = templates.map(template => `
                    <tr>
                        <td>${template.name}</td>
                        <td>${template.name}-template.ejs</td>
                        <td>${template.name}-control.ejs</td>
                        <td>${template.name}-control-mobile.ejs</td>
                        <td>
                            <span class="badge ${template.is_default ? 'bg-primary' : 'bg-success'}">
                                ${template.is_default ? '기본' : '사용자 정의'}
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="openFileManagement(${template.id}, '${template.name}')" title="파일 관리">
                                <i class="bi bi-folder"></i>
                            </button>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" onclick="editTemplate(${template.id}, '${template.name}', '${template.sport_type}', '${template.template_type}', '${template.description || ''}')" title="수정">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                ${!template.is_default ? `
                                    <button class="btn btn-sm btn-outline-danger" onclick="confirmDelete(${template.id})" title="삭제">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                ` : ''}
                            </div>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('템플릿 목록 로드 중 오류:', error);
                alert('템플릿 목록을 불러오는데 실패했습니다.');
            }
        }

        // 기본 템플릿 목록 로드
        async function loadBaseTemplates() {
            try {
                const response = await fetch('/api/templates/base-templates');
                const result = await response.json();
                
                if (result.success) {
                    const select = document.getElementById('baseTemplate');
                    select.innerHTML = '<option value="">기본 템플릿을 선택하세요</option>';
                    
                    // 기본 템플릿과 등록된 템플릿을 구분하여 표시
                    const baseTemplates = result.templates.filter(t => t.type === 'base');
                    const registeredTemplates = result.templates.filter(t => t.type === 'registered');
                    
                    // 기본 템플릿 그룹
                    if (baseTemplates.length > 0) {
                        const baseGroup = document.createElement('optgroup');
                        baseGroup.label = '기본 템플릿';
                        baseTemplates.forEach(template => {
                            const option = document.createElement('option');
                            option.value = template.name;
                            option.textContent = template.displayName;
                            baseGroup.appendChild(option);
                        });
                        select.appendChild(baseGroup);
                    }
                    
                    // 등록된 템플릿 그룹
                    if (registeredTemplates.length > 0) {
                        const registeredGroup = document.createElement('optgroup');
                        registeredGroup.label = '등록된 템플릿';
                        registeredTemplates.forEach(template => {
                            const option = document.createElement('option');
                            option.value = template.name;
                            option.textContent = template.displayName;
                            registeredGroup.appendChild(option);
                        });
                        select.appendChild(registeredGroup);
                    }
                }
            } catch (error) {
                console.error('기본 템플릿 목록 로드 중 오류:', error);
            }
        }

        // 기본 템플릿 미리보기 로드
        async function loadTemplatePreview(templateName) {
            if (!templateName) {
                document.getElementById('templatePreview').style.display = 'none';
                return;
            }
            
            try {
                // 먼저 .html 확장자로 시도
                let response = await fetch(`/api/base-template/${templateName}-template.html`);
                let result = await response.json();
                
                // .html이 없으면 .ejs 확장자로 시도
                if (!result.success) {
                    response = await fetch(`/api/base-template/${templateName}-template.ejs`);
                    result = await response.json();
                }
                
                if (result.success) {
                    const previewDiv = document.getElementById('previewContent');
                    // HTML 내용을 안전하게 표시 (첫 200자만)
                    const previewText = result.content.substring(0, 200) + (result.content.length > 200 ? '...' : '');
                    previewDiv.innerHTML = `<pre class="mb-0"><code>${previewText}</code></pre>`;
                    document.getElementById('templatePreview').style.display = 'block';
                }
            } catch (error) {
                console.error('템플릿 미리보기 로드 중 오류:', error);
            }
        }

        // 기본 템플릿 선택 이벤트
        document.getElementById('baseTemplate').addEventListener('change', function() {
            loadTemplatePreview(this.value);
        });

        // 새 템플릿 생성
        document.getElementById('createTemplateBtn').addEventListener('click', async () => {
            const name = document.getElementById('templateName').value.trim();
            const baseTemplate = document.getElementById('baseTemplate').value;
            
            if (!name) {
                alert('템플릿 이름을 입력해주세요.');
                return;
            }
            
            if (!baseTemplate) {
                alert('기본 템플릿을 선택해주세요.');
                return;
            }
            
            // 템플릿 이름 유효성 검사
            const namePattern = /^[a-z0-9_]+$/;
            if (!namePattern.test(name)) {
                alert('템플릿 이름은 영문자, 숫자, 언더스코어(_)만 사용 가능합니다.');
                return;
            }
            
            try {
                const response = await fetch('/api/templates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, baseTemplate })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('newTemplateModal'));
                modal.hide();
                
                // 폼 초기화
                document.getElementById('newTemplateForm').reset();
                document.getElementById('templatePreview').style.display = 'none';
                
                // 목록 새로고침
                loadTemplates();
                
                alert('템플릿이 생성되었습니다.');
            } catch (error) {
                console.error('템플릿 생성 중 오류:', error);
                alert(error.message || '템플릿 생성에 실패했습니다.');
            }
        });

        // 삭제 확인
        let templateToDelete = null;
        
        function confirmDelete(id) {
            templateToDelete = id;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }
        
        // 템플릿 삭제
        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
            if (!templateToDelete) return;
            
            try {
                const response = await fetch(`/api/templates/${templateToDelete}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    // 참조 관계가 있는 경우 상세한 경고 메시지 표시
                    if (result.referencedSports && result.referencedSports.length > 0) {
                        const sportList = result.referencedSports.map(sport => `• ${sport.name} (${sport.code})`).join('\n');
                        const message = `${result.error}\n\n${result.details}\n\n참조하는 종목 목록:\n${sportList}\n\n이 종목들의 템플릿을 먼저 변경한 후 템플릿을 삭제해주세요.`;
                        alert(message);
                    } else {
                        throw new Error(result.error);
                    }
                    return;
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                modal.hide();
                
                // 목록 새로고침
                loadTemplates();
                
                alert('템플릿이 삭제되었습니다.');
            } catch (error) {
                console.error('템플릿 삭제 중 오류:', error);
                alert(error.message || '템플릿 삭제에 실패했습니다.');
            } finally {
                templateToDelete = null;
            }
        });

        // 파일 관리 관련 변수
        let currentTemplateId = null;
        let currentTemplateName = null;
        let currentFileType = null;

        // 파일 관리 모달 열기
        async function openFileManagement(templateId, templateName) {
            currentTemplateId = templateId;
            currentTemplateName = templateName;
            
            try {
                const response = await fetch(`/api/templates/${templateId}/files?t=${Date.now()}`, {
                    method: 'GET',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error);
                }
                
                const content = document.getElementById('fileManagementContent');
                const isDefaultTemplate = data.template && data.template.is_default;
                
                content.innerHTML = `
                    <h6>템플릿: ${templateName} ${isDefaultTemplate ? '<span class="badge bg-primary">기본 템플릿</span>' : ''}</h6>
                    ${isDefaultTemplate ? '<div class="alert alert-info"><i class="bi bi-info-circle"></i> 기본 템플릿의 파일은 삭제할 수 없습니다.</div>' : ''}
                    <div class="row">
                        ${data.files.map(file => `
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <h6 class="card-title">${file.type}</h6>
                                        <p class="card-text">
                                            <small class="text-muted">파일명: ${file.name}</small><br>
                                            <small class="text-muted">크기: ${formatFileSize(file.size)}</small><br>
                                            <span class="badge ${file.exists ? 'bg-success' : 'bg-danger'}">
                                                ${file.exists ? '존재' : '없음'}
                                            </span>
                                        </p>
                                        <div class="btn-group" role="group">
                                            ${file.exists ? `
                                                <button class="btn btn-sm btn-outline-primary" onclick="downloadFile('${file.name}')" title="다운로드">
                                                    <i class="bi bi-download"></i>
                                                </button>
                                                ${!isDefaultTemplate ? `
                                                    <button class="btn btn-sm btn-outline-warning" onclick="uploadFile('${file.name}')" title="업로드">
                                                        <i class="bi bi-upload"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteFile('${file.name}')" title="삭제">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                ` : `
                                                    <button class="btn btn-sm btn-outline-secondary" disabled title="기본 템플릿은 수정할 수 없습니다">
                                                        <i class="bi bi-lock"></i>
                                                    </button>
                                                `}
                                            ` : `
                                                ${!isDefaultTemplate ? `
                                                    <button class="btn btn-sm btn-outline-success" onclick="uploadFile('${file.name}')" title="업로드">
                                                        <i class="bi bi-upload"></i> 업로드
                                                    </button>
                                                ` : `
                                                    <button class="btn btn-sm btn-outline-secondary" disabled title="기본 템플릿은 수정할 수 없습니다">
                                                        <i class="bi bi-lock"></i> 수정 불가
                                                    </button>
                                                `}
                                            `}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
                
                const modal = new bootstrap.Modal(document.getElementById('fileManagementModal'));
                modal.show();
            } catch (error) {
                console.error('파일 정보 로드 중 오류:', error);
                alert('파일 정보를 불러오는데 실패했습니다.');
            }
        }

        // 파일 다운로드
        function downloadFile(fileType) {
            const url = `/api/templates/${currentTemplateId}/files/${fileType}/download`;
            window.open(url, '_blank');
        }

        // 파일 업로드 모달 열기
        function uploadFile(fileType) {
            currentFileType = fileType;
            document.getElementById('fileInput').value = '';
            const modal = new bootstrap.Modal(document.getElementById('fileUploadModal'));
            modal.show();
        }

        // 파일 업로드 실행
        document.getElementById('uploadFileBtn').addEventListener('click', async () => {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('파일을 선택해주세요.');
                return;
            }
            
            if (!file.name.endsWith('.ejs')) {
                alert('EJS 파일만 업로드 가능합니다.');
                return;
            }
            
            try {
                const formData = new FormData();
                formData.append('file', file);
                
                const response = await fetch(`/api/templates/${currentTemplateId}/files/${currentFileType}/upload`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error);
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('fileUploadModal'));
                modal.hide();
                
                // 파일 관리 모달 새로고침
                await openFileManagement(currentTemplateId, currentTemplateName);
                
                alert('파일이 성공적으로 업로드되었습니다.');
            } catch (error) {
                console.error('파일 업로드 중 오류:', error);
                alert(error.message || '파일 업로드에 실패했습니다.');
            }
        });

        // 파일 삭제
        async function deleteFile(fileType) {
            if (!confirm('정말로 이 파일을 삭제하시겠습니까?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/templates/${currentTemplateId}/files/${fileType}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error);
                }
                
                // 파일 관리 모달 새로고침
                await openFileManagement(currentTemplateId, currentTemplateName);
                
                alert('파일이 성공적으로 삭제되었습니다.');
            } catch (error) {
                console.error('파일 삭제 중 오류:', error);
                alert(error.message || '파일 삭제에 실패했습니다.');
            }
        }

        // 파일 크기 포맷팅
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 템플릿 수정 함수
        function editTemplate(id, name, sportType, templateType, description) {
            document.getElementById('editTemplateId').value = id;
            document.getElementById('editTemplateName').value = name;
            document.getElementById('editSportType').value = sportType;
            document.getElementById('editTemplateType').value = templateType;
            document.getElementById('editDescription').value = description || '';
            
            const modal = new bootstrap.Modal(document.getElementById('editTemplateModal'));
            modal.show();
        }

        // 템플릿 수정 버튼 이벤트
        document.getElementById('updateTemplateBtn').addEventListener('click', async () => {
            const id = document.getElementById('editTemplateId').value;
            const name = document.getElementById('editTemplateName').value.trim();
            const sportType = document.getElementById('editSportType').value.trim();
            const templateType = document.getElementById('editTemplateType').value.trim();
            const description = document.getElementById('editDescription').value.trim();
            
            if (!name || !sportType || !templateType) {
                alert('필수 항목을 모두 입력해주세요.');
                return;
            }
            
            try {
                const response = await fetch(`/api/templates/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        sport_type: sportType,
                        template_type: templateType,
                        description
                    })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('editTemplateModal'));
                modal.hide();
                
                // 페이지 새로고침
                location.reload();
            } catch (error) {
                console.error('템플릿 수정 중 오류:', error);
                alert(error.message || '템플릿 수정에 실패했습니다.');
            }
        });

        // 페이지 로드 시 템플릿 목록과 기본 템플릿 목록 로드
        document.addEventListener('DOMContentLoaded', () => {
             loadTemplates();
            loadBaseTemplates();

            // 템플릿 이름 입력 시 자동으로 소문자로 변환
         document.getElementById("templateName").addEventListener("input", function () {
              this.value = this.value.toLowerCase();
    });
});
    </script>
</body>
</html> 