<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>새 경기 생성</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .form-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .list-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 350px;
        }
        .match-row { display: flex; align-items: center; gap: 8px; margin-bottom: 6px; }
        .match-row .badge { font-size: 0.9em; }
        .match-info { flex: 1; }
        .match-note { font-size: 0.8rem; color: #6c757d; margin-top: 2px; font-style: italic; }
    </style>
</head>
<body>
<div class="container">
    <%- include('partials/header', { title: '새 경기 생성' }) %>
    
    <div class="row g-4">
        <div class="col-md-6">
            <div class="form-container">
                <h2 class="mb-4" id="formTitle">새 경기 생성</h2>
                <div class="mb-3">
                </div>
                <form id="matchForm" onsubmit="return false;">
                    <div class="mb-3">
                        <label for="sport_type" class="form-label">종목</label>
                        <select class="form-select" id="sport_type" name="sport_type" required>
                            <% if (sports && sports.length > 0) { %>
                                <% sports.forEach(function(sport) { %>
                                    <option value="<%= sport.code %>" <%= sport.code === 'SOCCER' ? 'selected' : '' %>><%= sport.name %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="SOCCER" selected>축구</option>
                                <option value="BASEBALL">야구</option>
                            <% } %>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="home_team" class="form-label">홈팀</label>
                        <input type="text" class="form-control" id="home_team" name="home_team" required>
                    </div>
                    <div class="mb-3">
                        <label for="away_team" class="form-label">원정팀</label>
                        <input type="text" class="form-control" id="away_team" name="away_team" required>
                    </div>

                    <!-- 팀로고 사용 유무 설정 (모든 종목에서 사용 가능) -->
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="use_team_logos" name="use_team_logos">
                            <label class="form-check-label" for="use_team_logos">
                                팀로고 사용
                            </label>
                            <small class="form-text text-muted d-block">체크 해제 시 팀로고가 표시되지 않고 팀명만 표시됩니다.</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="addToList" class="form-label">리스트에 추가</label>
                        <select class="form-select" id="addToList"></select>
                        <button type="button" class="btn btn-outline-primary mt-2" onclick="addMatchToList()">리스트에 추가</button>
                    </div>
                    
                    <!-- CSV 일괄 등록 섹션 -->
                    <div class="mb-3">
                        <label class="form-label">CSV 일괄 등록</label>
                        <div class="border rounded p-3 bg-light">
                            <div class="mb-2">
                                <input type="file" class="form-control" id="csvFile" accept=".csv" onchange="previewCsvFile()">
                                <small class="text-muted">CSV 형식: 리스트명,홈팀명,어웨이팀명</small>
                            </div>
                            <div id="csvPreview" class="mb-2" style="display: none;">
                                <h6>미리보기:</h6>
                                <div id="csvPreviewContent" class="border rounded p-2 bg-white" style="max-height: 200px; overflow-y: auto;"></div>
                            </div>
                            <button type="button" class="btn btn-success" id="csvUploadBtn" onclick="uploadCsvMatches()" style="display: none;">
                                <i class="bi bi-upload"></i> 일괄 등록
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <button type="button" class="btn btn-primary" id="saveButton" onclick="saveMatch()" style="display: none;">저장</button>
                        <button type="button" class="btn btn-secondary" id="cancelButton" onclick="cancelEdit()" style="display: none;">취소</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-6">
            <div class="list-container">
                <h4 class="mb-3">선택한 리스트</h4>
                <div class="mb-2">
                    <select class="form-select" id="sideListSelect"></select>
                    <button class="btn btn-outline-primary mt-2" onclick="createNewList()">새 리스트 생성</button>
                </div>
                <div id="sideListContent" class="mt-3 text-muted">리스트를 선택하세요.</div>
                
                <div class="mt-4">
                    <h5>기존 경기 목록</h5>
                    <div class="mb-2">
                        <input type="text" class="form-control" id="matchSearch" placeholder="경기 검색...">
                    </div>
                    <ul class="nav nav-tabs mb-3" id="matchTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">전체</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="soccer-tab" data-bs-toggle="tab" data-bs-target="#soccer" type="button" role="tab">축구</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="baseball-tab" data-bs-toggle="tab" data-bs-target="#baseball" type="button" role="tab">야구</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="matchTabContent">
                        <div class="tab-pane fade show active" id="all" role="tabpanel">
                            <div id="allMatches" style="max-height: 300px; overflow-y: auto;"></div>
                        </div>
                        <div class="tab-pane fade" id="soccer" role="tabpanel">
                            <div id="soccerMatches" style="max-height: 300px; overflow-y: auto;"></div>
                        </div>
                        <div class="tab-pane fade" id="baseball" role="tabpanel">
                            <div id="baseballMatches" style="max-height: 300px; overflow-y: auto;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
// 리스트 불러오기 및 드롭박스 채우기
async function loadListOptions() {
    try {
        const response = await fetch('/api/match-lists');
        if (!response.ok) throw new Error('리스트 로드 실패');
        
        const lists = await response.json();
        const addToList = document.getElementById('addToList');
        const sideListSelect = document.getElementById('sideListSelect');
        
        // 리스트를 이름 순으로 정렬
        const sortedLists = lists.sort((a, b) => a.name.localeCompare(b.name, 'ko'));
        
        // "리스트 추가 안함" 옵션 추가
        addToList.innerHTML = '<option value="none">리스트 추가 안함</option>' + 
            sortedLists.map(l => `<option value="${l.id}">${l.name}</option>`).join('');
        sideListSelect.innerHTML = sortedLists.map(l => `<option value="${l.id}">${l.name}</option>`).join('');
    } catch (error) {
        console.error('리스트 로드 오류:', error);
        alert('리스트를 불러오는데 실패했습니다.');
    }
}

// 리스트 내용 표시
async function renderSideListContent() {
    try {
        const response = await fetch('/api/match-lists');
        if (!response.ok) throw new Error('리스트 로드 실패');
        
        const lists = await response.json();
        const sideListSelect = document.getElementById('sideListSelect');
        const sideListContent = document.getElementById('sideListContent');
        const selectedId = sideListSelect.value;
        const list = lists.find(l => l.id === selectedId);
        
        if (!list) {
            sideListContent.innerHTML = '<span class="text-muted">리스트를 선택하세요.</span>';
            return;
        }
        if (!list.matches || !list.matches.length) {
            sideListContent.innerHTML = '<span class="text-muted">경기가 없습니다.</span>';
            return;
        }
        sideListContent.innerHTML = list.matches.map((m, idx) =>
            `<div class='match-row'>
                <div class='match-info'>
                    <span>${m.home_team} vs ${m.away_team} <span class='badge bg-secondary'>${m.sport_type}</span></span>

                </div>
                <div class='btn-group'>
                    <button class='btn btn-outline-danger btn-sm' onclick='removeMatchFromList(${idx})'>삭제</button>
                    <button class='btn btn-outline-secondary btn-sm' onclick='moveMatchInList(${idx},-1)'>↑</button>
                    <button class='btn btn-outline-secondary btn-sm' onclick='moveMatchInList(${idx},1)'>↓</button>
                </div>
            </div>`
        ).join('');
    } catch (error) {
        console.error('리스트 내용 로드 오류:', error);
        document.getElementById('sideListContent').innerHTML = '<span class="text-danger">리스트 로드에 실패했습니다.</span>';
    }
}

// 기존 경기 목록 로드
async function loadExistingMatches() {
    try {
        const response = await fetch('/api/matches');
        const matches = await response.json();
        
        // 종목별로 경기 분류
        const soccerMatches = matches.filter(match => match.sport_type.toLowerCase() === 'soccer');
        const baseballMatches = matches.filter(match => match.sport_type.toLowerCase() === 'baseball');
        
        // 각 종목별 경기 목록 렌더링
        renderMatchesByCategory('allMatches', matches);
        renderMatchesByCategory('soccerMatches', soccerMatches);
        renderMatchesByCategory('baseballMatches', baseballMatches);

        // 탭 이벤트 리스너 추가
        const tabEls = document.querySelectorAll('button[data-bs-toggle="tab"]');
        tabEls.forEach(tabEl => {
            tabEl.addEventListener('shown.bs.tab', function (event) {
                const targetId = event.target.getAttribute('data-bs-target').substring(1);
                const searchText = document.getElementById('matchSearch').value.toLowerCase();
                filterMatches(targetId, searchText);
            });
        });
    } catch (error) {
        console.error('경기 목록 로드 실패:', error);
    }
}

function renderMatchesByCategory(containerId, matches) {
    const container = document.getElementById(containerId);
    container.innerHTML = matches.map(match => `
        <div class="match-row mb-2">
            <div class="match-info">
                <span>${match.home_team} vs ${match.away_team} <span class="badge bg-secondary">${match.sport_type}</span></span>

            </div>
            <button class="btn btn-outline-primary btn-sm" onclick="addExistingMatchToList('${match.id}')">추가</button>
            <button class="btn btn-outline-warning btn-sm" onclick="editMatch('${match.id}')">수정</button>
        </div>
    `).join('');
}

// 경기 필터링 함수
function filterMatches(tabId, searchText) {
    const matchRows = document.querySelectorAll(`#${tabId} .match-row`);
    matchRows.forEach(row => {
        const matchText = row.textContent.toLowerCase();
        row.style.display = matchText.includes(searchText) ? '' : 'none';
    });
}

// 기존 경기 검색
document.getElementById('matchSearch').addEventListener('input', function(e) {
    const searchText = e.target.value.toLowerCase();
    const activeTab = document.querySelector('.tab-pane.active');
    const activeTabId = activeTab.id;
    filterMatches(activeTabId, searchText);
});

// 기존 경기를 리스트에 추가
async function addExistingMatchToList(matchId) {
    try {
        const response = await fetch(`/api/matches/${matchId}`);
        const match = await response.json();
        
        const listId = document.getElementById('sideListSelect').value;
        if (!listId) {
            alert('리스트를 선택해주세요.');
            return;
        }

        // 서버에서 리스트 정보 가져오기
        const listsResponse = await fetch('/api/match-lists');
        if (!listsResponse.ok) throw new Error('리스트 로드 실패');
        
        const lists = await listsResponse.json();
        const list = lists.find(l => l.id == listId);
        
        if (!list) {
            alert('선택한 리스트를 찾을 수 없습니다.');
            return;
        }

        if (!list.matches.some(m => m.id === match.id)) {
            list.matches.push({
                id: match.id,
                sport_type: match.sport_type,
                home_team: match.home_team,
                away_team: match.away_team,

            });
            
            // 서버에 업데이트
            const updateResponse = await fetch(`/api/match-lists/${listId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ matches: list.matches })
            });
            
            if (!updateResponse.ok) throw new Error('리스트 업데이트 실패');
            
            renderSideListContent();
        } else {
            alert('이미 리스트에 추가된 경기입니다.');
        }
    } catch (error) {
        console.error('경기 추가 실패:', error);
        alert('경기 추가 중 오류가 발생했습니다.');
    }
}

// 종목 목록 동적 로드
async function loadSports() {
    try {
        const response = await fetch('/api/sport');
        if (!response.ok) throw new Error('종목 목록 로드 실패');
        
        const sports = await response.json();
        console.log('동적으로 로드된 종목들:', sports);
        
        const sportSelect = document.getElementById('sport_type');
        sportSelect.innerHTML = ''; // 기존 옵션 제거
        
        sports.forEach(sport => {
            const option = document.createElement('option');
            option.value = sport.code;
            option.textContent = sport.name;
            if (sport.code === 'SOCCER') {
                option.selected = true;
            }
            sportSelect.appendChild(option);
        });
        
        console.log('종목 드롭박스 업데이트 완료');
    } catch (error) {
        console.error('종목 목록 로드 오류:', error);
        // 오류 시 기본 종목만 표시
        const sportSelect = document.getElementById('sport_type');
        sportSelect.innerHTML = `
            <option value="SOCCER" selected>축구</option>
            <option value="BASEBALL">야구</option>
        `;
    }
}

document.addEventListener('DOMContentLoaded', function() {
    loadSports(); // 종목 목록 동적 로드
    loadListOptions();
    loadExistingMatches(); // 기존 경기 목록 로드
    document.getElementById('sideListSelect').addEventListener('change', renderSideListContent);
    // 리스트 선택 시 좌측 드롭박스도 동기화
    document.getElementById('sideListSelect').addEventListener('change', function() {
        document.getElementById('addToList').value = this.value;
    });
    document.getElementById('addToList').addEventListener('change', function() {
        document.getElementById('sideListSelect').value = this.value;
        renderSideListContent();
    });
});

// 리스트 생성 함수 추가
async function createNewList() {
    const name = prompt('새 리스트 이름을 입력하세요');
    if (!name || !name.trim()) return;
    
    try {
        const response = await fetch('/api/match-lists', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: name.trim() })
        });
        
        if (!response.ok) throw new Error('리스트 생성 실패');
        
        const newList = await response.json();
        await loadListOptions();
        document.getElementById('addToList').value = newList.id;
        document.getElementById('sideListSelect').value = newList.id;
        await renderSideListContent();
    } catch (error) {
        console.error('리스트 생성 오류:', error);
        alert('리스트 생성에 실패했습니다.');
    }
}

// 리스트에서 경기 삭제 함수
async function removeMatchFromList(idx) {
    try {
        const sideListSelect = document.getElementById('sideListSelect');
        const listId = sideListSelect.value;
        
        // 서버에서 리스트 정보 가져오기
        const listsResponse = await fetch('/api/match-lists');
        if (!listsResponse.ok) throw new Error('리스트 로드 실패');
        
        const lists = await listsResponse.json();
        const list = lists.find(l => l.id == listId);
        
        if (list) {
            list.matches.splice(idx, 1);
            
            // 서버에 업데이트
            const updateResponse = await fetch(`/api/match-lists/${listId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ matches: list.matches })
            });
            
            if (!updateResponse.ok) throw new Error('리스트 업데이트 실패');
            
            await renderSideListContent();
        }
    } catch (error) {
        console.error('경기 삭제 오류:', error);
        alert('경기 삭제에 실패했습니다.');
    }
}

// 리스트에서 경기 순서 변경 함수
async function moveMatchInList(idx, dir) {
    try {
        const sideListSelect = document.getElementById('sideListSelect');
        const listId = sideListSelect.value;
        
        // 서버에서 리스트 정보 가져오기
        const listsResponse = await fetch('/api/match-lists');
        if (!listsResponse.ok) throw new Error('리스트 로드 실패');
        
        const lists = await listsResponse.json();
        const list = lists.find(l => l.id == listId);
        
        if (list) {
            const newIdx = idx + dir;
            if (newIdx < 0 || newIdx >= list.matches.length) return;
            
            const temp = list.matches[idx];
            list.matches[idx] = list.matches[newIdx];
            list.matches[newIdx] = temp;
            
            // 서버에 업데이트
            const updateResponse = await fetch(`/api/match-lists/${listId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ matches: list.matches })
            });
            
            if (!updateResponse.ok) throw new Error('리스트 업데이트 실패');
            
            await renderSideListContent();
        }
    } catch (error) {
        console.error('경기 순서 변경 오류:', error);
        alert('경기 순서 변경에 실패했습니다.');
    }
}

// 엔터키 이벤트 처리
document.getElementById('away_team').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        e.preventDefault(); // 기본 엔터키 동작 방지
        addMatchToList();
    }
});

// 리스트에 경기 추가 함수
async function addMatchToList() {
    // 수정 모드인 경우 저장 함수 호출
    if (isEditMode) {
        await saveMatch();
        return;
    }
    
    const sport_type = document.getElementById('sport_type').value;
    const home_team = document.getElementById('home_team').value;
    const away_team = document.getElementById('away_team').value;
    const use_team_logos = document.getElementById('use_team_logos').checked;

    if (!home_team || !away_team) {
        alert('홈팀과 원정팀을 입력하세요.');
        return;
    }

    try {
        const requestData = {
            sport_type,
            home_team,
            away_team,
            use_team_logos
        };
        
        console.log('경기 생성 요청:', requestData);
        
        // 서버에 경기 생성 요청
        const response = await fetch('/api/matches', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });

        console.log('서버 응답 상태:', response.status);
        
        let result;
        try {
            result = await response.json();
            console.log('서버 응답 데이터:', result);
        } catch (e) {
            console.error('응답 파싱 오류:', e);
            throw new Error('서버 응답을 처리할 수 없습니다.');
        }

        if (!response.ok) {
            console.error('서버 오류:', result);
            throw new Error(result.error || `서버 오류 (${response.status})`);
        }

        if (!result || !result.success || !result.match || !result.match.id) {
            console.error('잘못된 응답 형식:', result);
            throw new Error('서버에서 잘못된 응답을 받았습니다.');
        }

        // 리스트에 추가 (리스트 추가 안함이 선택되지 않은 경우에만)
        const listId = document.getElementById('addToList').value;
        if (listId && listId !== 'none') {
            try {
                // 서버에서 리스트 정보 가져오기
                const listsResponse = await fetch('/api/match-lists');
                if (!listsResponse.ok) throw new Error('리스트 로드 실패');
                
                const lists = await listsResponse.json();
                const list = lists.find(l => l.id == listId);
                
                if (!list) {
                    throw new Error('선택한 리스트를 찾을 수 없습니다.');
                }

                if (!list.matches.some(m => m.id === result.match.id)) {
                    list.matches.push({
                        id: result.match.id,
                        sport_type: result.match.sport_type,
                        home_team: result.match.home_team,
                        away_team: result.match.away_team,

                    });
                    
                    // 서버에 업데이트
                    const updateResponse = await fetch(`/api/match-lists/${listId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ matches: list.matches })
                    });
                    
                    if (!updateResponse.ok) throw new Error('리스트 업데이트 실패');
                    
                    // 리스트 내용 업데이트
                    await renderSideListContent();
                }
            } catch (error) {
                console.error('리스트 추가 오류:', error);
                // 경기 생성은 성공했지만 리스트 추가는 실패한 경우
                alert('경기는 생성되었지만 리스트 추가에 실패했습니다: ' + error.message);
            }
        }
        
        // 입력 필드 클리어 및 홈팀에 포커스
        document.getElementById('home_team').value = '';
        document.getElementById('away_team').value = '';

        document.getElementById('home_team').focus();
        
        console.log('경기 추가 완료:', result);
        alert('경기가 성공적으로 생성되었습니다!');
        await loadExistingMatches();
    } catch (error) {
        console.error('경기 추가 중 오류:', error);
        alert(error.message || '서버 오류가 발생했습니다.');
    }
}

// 수정 모드 변수
let isEditMode = false;
let editingMatchId = null;

// 경기 수정 함수
async function editMatch(matchId) {
    try {
        const response = await fetch(`/api/matches/${matchId}`);
        if (!response.ok) throw new Error('경기 정보 로드 실패');
        
        const match = await response.json();
        
        // 폼 필드에 경기 정보 설정
        document.getElementById('sport_type').value = match.sport_type;
        document.getElementById('home_team').value = match.home_team;
        document.getElementById('away_team').value = match.away_team;
        
        // 수정 모드로 변경
        isEditMode = true;
        editingMatchId = matchId;
        
        // UI 변경
        document.getElementById('formTitle').textContent = '경기 수정';
        document.getElementById('saveButton').style.display = 'inline-block';
        document.getElementById('cancelButton').style.display = 'inline-block';
        
        // 리스트 추가 필드 숨기기
        document.getElementById('addToList').parentElement.style.display = 'none';
        
        console.log('수정 모드 활성화:', match);
    } catch (error) {
        console.error('경기 수정 모드 활성화 실패:', error);
        alert('경기 정보를 불러오는데 실패했습니다.');
    }
}

// 경기 저장 함수
async function saveMatch() {
    if (!isEditMode || !editingMatchId) return;
    
    const sport_type = document.getElementById('sport_type').value;
    const home_team = document.getElementById('home_team').value;
    const away_team = document.getElementById('away_team').value;
    const use_team_logos = document.getElementById('use_team_logos').checked;
    
    if (!home_team || !away_team) {
        alert('홈팀과 원정팀을 입력하세요.');
        return;
    }

    try {
        const requestData = {
            sport_type,
            home_team,
            away_team,
            use_team_logos
        };
        
        const response = await fetch(`/api/matches/${editingMatchId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            const result = await response.json();
            throw new Error(result.error || `서버 오류 (${response.status})`);
        }

        const result = await response.json();
        console.log('경기 수정 완료:', result);
        
        // 수정 모드 종료
        cancelEdit();
        
        // 경기 목록 새로고침
        await loadExistingMatches();
        
        alert('경기가 성공적으로 수정되었습니다.');
    } catch (error) {
        console.error('경기 수정 실패:', error);
        alert(error.message || '경기 수정에 실패했습니다.');
    }
}

// 수정 취소 함수
function cancelEdit() {
    // 폼 필드 초기화
    document.getElementById('sport_type').value = 'soccer';
    document.getElementById('home_team').value = '';
    document.getElementById('away_team').value = '';
    
    // 수정 모드 종료
    isEditMode = false;
    editingMatchId = null;
    
    // UI 복원
    document.getElementById('formTitle').textContent = '새 경기 생성';
    document.getElementById('saveButton').style.display = 'none';
    document.getElementById('cancelButton').style.display = 'none';
    
    // 리스트 추가 필드 표시
    document.getElementById('addToList').parentElement.style.display = 'block';
    
    console.log('수정 모드 종료');
}

// CSV 파일 미리보기 함수
function previewCsvFile() {
    const fileInput = document.getElementById('csvFile');
    const file = fileInput.files[0];
    const previewDiv = document.getElementById('csvPreview');
    const previewContent = document.getElementById('csvPreviewContent');
    const uploadBtn = document.getElementById('csvUploadBtn');
    
    if (!file) {
        previewDiv.style.display = 'none';
        uploadBtn.style.display = 'none';
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        const csvContent = e.target.result;
        const lines = csvContent.split('\n').filter(line => line.trim());
        
        if (lines.length === 0) {
            alert('CSV 파일이 비어있습니다.');
            return;
        }
        
        // 헤더 확인
        const header = lines[0].split(',').map(col => col.trim());
        if (header.length < 3 || !header[0].includes('리스트') || !header[1].includes('홈') || !header[2].includes('어웨이')) {
            alert('CSV 형식이 올바르지 않습니다. 형식: 리스트명,홈팀명,어웨이팀명');
            return;
        }
        
        // 미리보기 생성
        let previewHtml = '<table class="table table-sm">';
        previewHtml += '<thead><tr><th>리스트명</th><th>홈팀</th><th>어웨이팀</th></tr></thead><tbody>';
        
        for (let i = 1; i < Math.min(lines.length, 6); i++) { // 최대 5개 행만 표시
            const columns = lines[i].split(',').map(col => col.trim());
            if (columns.length >= 3) {
                previewHtml += `<tr><td>${columns[0]}</td><td>${columns[1]}</td><td>${columns[2]}</td></tr>`;
            }
        }
        
        if (lines.length > 6) {
            previewHtml += `<tr><td colspan="3" class="text-muted">... 외 ${lines.length - 6}개 행</td></tr>`;
        }
        
        previewHtml += '</tbody></table>';
        
        previewContent.innerHTML = previewHtml;
        previewDiv.style.display = 'block';
        uploadBtn.style.display = 'inline-block';
    };
    
    reader.readAsText(file, 'UTF-8');
}

// CSV 일괄 등록 함수
async function uploadCsvMatches() {
    const fileInput = document.getElementById('csvFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('CSV 파일을 선택해주세요.');
        return;
    }
    
    const uploadBtn = document.getElementById('csvUploadBtn');
    const originalText = uploadBtn.innerHTML;
    uploadBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> 처리 중...';
    uploadBtn.disabled = true;
    
    // 처리 시간을 늘리기 위해 타임아웃 설정
    const timeout = 300000; // 5분
    
    try {
        const formData = new FormData();
        formData.append('csvFile', file);
        
        const response = await fetch('/api/bulk-create-matches', {
            method: 'POST',
            body: formData,
            signal: AbortSignal.timeout(timeout)
        });
        
        if (!response.ok) {
            const result = await response.json();
            throw new Error(result.error || '서버 오류가 발생했습니다.');
        }
        
        const result = await response.json();
        
        // 성공 메시지 표시
        const message = `일괄 등록 완료!\n\n생성된 경기: ${result.createdMatches}개\n생성된 리스트: ${result.createdLists}개\n업데이트된 리스트: ${result.updatedLists}개`;
        
        // 모달로 결과 표시
        let modalHtml = `
            <div class="modal fade" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">일괄 등록 완료</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-success">
                                <h6>처리 결과:</h6>
                                <ul>
                                    <li>생성된 경기: <strong>${result.createdMatches}</strong>개</li>
                                    <li>생성된 리스트: <strong>${result.createdLists}</strong>개</li>
                                    <li>업데이트된 리스트: <strong>${result.updatedLists}</strong>개</li>
                                </ul>
                            </div>`;
        
        // 성공한 행들 표시
        if (result.successRows && result.successRows.length > 0) {
            modalHtml += `
                <div class="alert alert-info">
                    <h6>성공한 경기들:</h6>
                    <div style="max-height: 200px; overflow-y: auto;">
                        <ul class="list-unstyled">
                            ${result.successRows.map(row => `<li><small>${row}</small></li>`).join('')}
                        </ul>
                    </div>
                </div>`;
        }
        
        // 실패한 행들 표시
        if (result.errors && result.errors.length > 0) {
            modalHtml += `
                <div class="alert alert-warning">
                    <h6>실패한 경기들:</h6>
                    <div style="max-height: 200px; overflow-y: auto;">
                        <ul class="list-unstyled">
                            ${result.errors.map(error => `<li><small class="text-danger">${error}</small></li>`).join('')}
                        </ul>
                    </div>
                </div>`;
        }
        
        modalHtml += `
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">확인</button>
                        </div>
                    </div>
                </div>
            </div>`;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        const modalElement = document.querySelector('.modal:last-child');
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        // 모달이 닫힌 후 요소 제거
        modalElement.addEventListener('hidden.bs.modal', () => {
            modalElement.remove();
        });
        
        // 파일 입력 초기화
        fileInput.value = '';
        document.getElementById('csvPreview').style.display = 'none';
        uploadBtn.style.display = 'none';
        
        // 경기 목록 새로고침
        await loadExistingMatches();
        
    } catch (error) {
        console.error('CSV 일괄 등록 실패:', error);
        alert('일괄 등록에 실패했습니다: ' + error.message);
    } finally {
        uploadBtn.innerHTML = originalText;
        uploadBtn.disabled = false;
    }
}

// 페이지 로드 시 초기화
document.addEventListener('DOMContentLoaded', function() {
    // 팀로고 사용 유무 체크박스는 항상 표시됨
    console.log('경기 생성 페이지 로드 완료');
});
</script>
</body>
</html> 