<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>종목 관리 - SportsCoder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .sports-container {
            max-width: 1000px;
            margin: 0 auto;
        }
        .sport-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-bottom: 15px;
            padding: 15px;
        }
        .sport-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .sport-name {
            font-size: 18px;
            font-weight: bold;
        }
        .sport-code {
            background-color: #e9ecef;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 14px;
        }
        .sport-info {
            color: #6c757d;
            font-size: 14px;
        }
        .sport-actions {
            margin-top: 10px;
            display: flex;
            gap: 8px;
        }
        .empty-message {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>종목 관리</h2>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newSportModal">
                <i class="bi bi-plus-lg"></i> 새 종목
            </button>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>종목명</th>
                                <th>코드</th>
                                <th>템플릿</th>
                                <th>설명</th>
                                <th>생성자</th>
                                <th>상태</th>
                                <th>사용자 권한</th>
                                <th>관리</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% sports.forEach(sport => { %>
                                <tr>
                                    <td><%= sport.id %></td>
                                    <td><%= sport.name %></td>
                                    <td><%= sport.code %></td>
                                    <td>
                                        <span class="badge bg-primary"><%= sport.template %></span>
                                    </td>
                                    <td><%= sport.description || '' %></td>
                                    <td>
                                        <% if (sport.creator) { %>
                                            <%= sport.creator.full_name || sport.creator.username %> (ID: <%= sport.creator.id %>)
                                        <% } else { %>
                                            <span class="text-muted">시스템</span>
                                        <% } %>
                                    </td>
                                    <td><%= sport.is_active ? '활성' : '비활성' %></td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-info" onclick="manageSportPermissions('<%= sport.id %>', '<%= sport.name %>')" title="사용자 권한 관리">
                                            <i class="bi bi-people"></i> 권한 관리
                                        </button>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" onclick="editSport('<%= sport.code %>', '<%= sport.name %>', '<%= sport.code %>', '<%= sport.template %>', '<%= sport.description || '' %>')" title="수정">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <% if (!sport.is_default) { %>
                                                <button class="btn btn-sm btn-outline-danger" onclick="deleteSport('<%= sport.code %>')" title="삭제">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            <% } else { %>
                                                <button class="btn btn-sm btn-outline-secondary" disabled title="기본 종목은 삭제할 수 없습니다">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            <% } %>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- 새 종목 모달 -->
    <div class="modal fade" id="newSportModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">새 종목 추가</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="newSportForm">
                        <div class="mb-3">
                            <label for="sportName" class="form-label">종목명</label>
                            <input type="text" class="form-control" id="sportName" required>
                        </div>
                        <div class="mb-3">
                            <label for="sportCode" class="form-label">종목 코드</label>
                            <input type="text" class="form-control" id="sportCode" required
                                   pattern="[A-Z]+" title="대문자 영문자만 사용 가능합니다">
                            <div class="form-text">대문자 영문자만 사용 가능합니다</div>
                        </div>
                        <div class="mb-3">
                            <label for="sportTemplate" class="form-label">템플릿</label>
                            <select class="form-select" id="sportTemplate" required>
                                <option value="">템플릿 선택</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sportDescription" class="form-label">설명</label>
                            <textarea class="form-control" id="sportDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="createSportBtn">추가</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 종목 수정 모달 -->
    <div class="modal fade" id="editSportModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">종목 수정</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editSportForm">
                        <input type="hidden" id="editSportId">
                        <div class="mb-3">
                            <label for="editSportName" class="form-label">종목명</label>
                            <input type="text" class="form-control" id="editSportName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editSportCode" class="form-label">코드</label>
                            <input type="text" class="form-control" id="editSportCode" required
                                   pattern="[A-Z]+" title="대문자 영문자만 사용 가능합니다">
                            <div class="form-text">대문자 영문자만 사용 가능합니다</div>
                        </div>
                        <div class="mb-3">
                            <label for="editSportTemplate" class="form-label">템플릿</label>
                            <select class="form-select" id="editSportTemplate" required>
                                <option value="">템플릿 선택</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editSportDescription" class="form-label">설명</label>
                            <textarea class="form-control" id="editSportDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="updateSportBtn">수정</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 종목 삭제 확인 모달 -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> 종목 삭제 확인
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>경고:</strong> 이 작업은 되돌릴 수 없습니다. 종목과 관련된 모든 데이터가 영구적으로 삭제됩니다.
                    </div>
                    
                    <div id="deleteInfoContent">
                        <!-- 삭제 정보가 여기에 동적으로 추가됩니다 -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                        <i class="bi bi-trash"></i> 삭제 확인
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 사용자 권한 관리 모달 -->
    <div class="modal fade" id="permissionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">사용자 권한 관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6 id="permissionSportName">종목: </h6>
                        <p class="text-muted">이 종목에 접근할 수 있는 사용자를 선택하세요. 선택하지 않으면 모든 사용자가 접근할 수 있습니다.</p>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">사용자 선택</label>
                        <div class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllUsers">
                                <label class="form-check-label fw-bold" for="selectAllUsers">
                                    모든 사용자 (기본값)
                                </label>
                            </div>
                            <hr>
                            <div id="userList">
                                <!-- 사용자 목록이 여기에 동적으로 추가됩니다 -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="savePermissionsBtn">권한 저장</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 템플릿 목록 로드
        async function loadTemplates() {
            try {
                // 기본 템플릿과 DB 템플릿 모두 조회
                const baseResponse = await fetch('/api/templates/base-templates');
                const baseData = await baseResponse.json();
                
                const dbResponse = await fetch('/api/templates');
                const dbTemplates = await dbResponse.json();
                
                // 기본 템플릿과 DB 템플릿을 합쳐서 옵션 생성
                const allTemplates = [];
                
                // 기본 템플릿 추가
                if (baseData.success && baseData.templates) {
                    baseData.templates.forEach(template => {
                        allTemplates.push({
                            name: template.name,
                            displayName: template.displayName
                        });
                    });
                }
                
                // DB 템플릿 추가 (새로 생성한 템플릿들)
                if (Array.isArray(dbTemplates)) {
                    dbTemplates.forEach(template => {
                        // 중복 방지: 이미 기본 템플릿에 있는 것은 제외
                        const exists = allTemplates.some(t => t.name === template.name);
                        if (!exists) {
                            allTemplates.push({
                                name: template.name,
                                displayName: template.name // DB 템플릿은 name을 displayName으로 사용
                            });
                        }
                    });
                }
                
                console.log('로드된 템플릿 목록:', allTemplates);
                
                // 새 종목 모달의 템플릿 선택 옵션 업데이트
                const templateSelect = document.getElementById('sportTemplate');
                templateSelect.innerHTML = '<option value="">템플릿 선택</option>' +
                    allTemplates.map(template => `
                        <option value="${template.name}">${template.displayName}</option>
                    `).join('');
                
                // 수정 모달의 템플릿 선택 옵션 업데이트
                const editTemplateSelect = document.getElementById('editSportTemplate');
                editTemplateSelect.innerHTML = '<option value="">템플릿 선택</option>' +
                    allTemplates.map(template => `
                        <option value="${template.name}">${template.displayName}</option>
                    `).join('');
            } catch (error) {
                console.error('템플릿 목록 로드 중 오류:', error);
                alert('템플릿 목록을 불러오는데 실패했습니다.');
            }
        }

        // 종목 수정 모달 열기
        function editSport(code, name, codeValue, template, description) {
            document.getElementById('editSportId').value = code; // 코드를 ID로 사용
            document.getElementById('editSportName').value = name;
            document.getElementById('editSportCode').value = codeValue;
            document.getElementById('editSportTemplate').value = template;
            document.getElementById('editSportDescription').value = description;
            
            const modal = new bootstrap.Modal(document.getElementById('editSportModal'));
            modal.show();
        }


        // 종목 수정
        document.getElementById('updateSportBtn').addEventListener('click', async () => {
            const id = document.getElementById('editSportId').value;
            const name = document.getElementById('editSportName').value.trim();
            const code = document.getElementById('editSportCode').value.trim().toUpperCase();
            const template = document.getElementById('editSportTemplate').value;
            const description = document.getElementById('editSportDescription').value.trim();
            
            if (!name || !code || !template) {
                alert('필수 항목을 모두 입력해주세요.');
                return;
            }
            
            try {
                const response = await fetch(`/api/sport/${code}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        code,
                        template,
                        description
                    })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('editSportModal'));
                modal.hide();
                
                alert('종목이 성공적으로 수정되었습니다.');
                location.reload();
            } catch (error) {
                console.error('종목 수정 중 오류:', error);
                alert(error.message || '종목 수정에 실패했습니다.');
            }
        });

        // 새 종목 생성
        document.getElementById('createSportBtn').addEventListener('click', async () => {
            const name = document.getElementById('sportName').value.trim();
            const code = document.getElementById('sportCode').value.trim().toUpperCase();
            const template = document.getElementById('sportTemplate').value;
            const description = document.getElementById('sportDescription').value.trim();
            
            if (!name || !code || !template) {
                alert('종목명, 종목 코드, 템플릿을 모두 입력해주세요.');
                return;
            }
            
            try {
                const response = await fetch('/api/sport', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        code,
                        template,
                        description
                    })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('newSportModal'));
                modal.hide();
                
                // 폼 초기화
                document.getElementById('newSportForm').reset();
                
                // 페이지 새로고침
                location.reload();
            } catch (error) {
                console.error('종목 생성 중 오류:', error);
                alert(error.message || '종목 생성에 실패했습니다.');
            }
        });

        // 종목 삭제 정보 조회 및 모달 표시
        async function deleteSport(code) {
            if (!code) {
                alert('종목 코드가 유효하지 않습니다.');
                return;
            }

            try {
                // 삭제 정보 조회
                const response = await fetch(`/api/sport/${code}/delete-info`);
                const data = await response.json();

                if (!response.ok) {
                    if (data.error && data.error.includes('기본 종목')) {
                        alert(data.error);
                        return;
                    }
                    throw new Error(data.error || '삭제 정보를 불러올 수 없습니다.');
                }

                // 경기가 있는 경우 삭제 불가
                if (data.relatedData.matchCount > 0) {
                    const message = `이 종목으로 생성된 경기가 ${data.relatedData.matchCount}개 있어 삭제할 수 없습니다.\n\n먼저 관련 경기를 삭제한 후 종목을 삭제해주세요.`;
                    alert(message);
                    return;
                }

                // 삭제 정보 모달에 표시
                showDeleteConfirmModal(data);
            } catch (error) {
                console.error('삭제 정보 조회 중 오류:', error);
                alert(error.message || '삭제 정보를 불러오는데 실패했습니다.');
            }
        }

        // 삭제 확인 모달 표시
        function showDeleteConfirmModal(data) {
            const content = document.getElementById('deleteInfoContent');
            const sport = data.sport;
            const relatedData = data.relatedData;

            let overlayImagesHtml = '';
            if (relatedData.overlayImages.length > 0) {
                overlayImagesHtml = `
                    <div class="mb-3">
                        <h6 class="text-danger">오버레이 이미지 파일들:</h6>
                        <ul class="list-group">
                            ${relatedData.overlayImages.map(img => `
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>${img.filename}</span>
                                    <span class="badge bg-secondary">파일</span>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                `;
            }

            content.innerHTML = `
                <div class="mb-3">
                    <h5>삭제할 종목 정보</h5>
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>종목명:</strong> ${sport.name}
                                </div>
                                <div class="col-md-6">
                                    <strong>종목 코드:</strong> ${sport.code}
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-md-12">
                                    <strong>템플릿:</strong> ${sport.template}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <h5 class="text-danger">삭제될 데이터</h5>
                    <div class="card border-danger">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <i class="bi bi-trophy text-danger" style="font-size: 2rem;"></i>
                                        <div class="mt-2">
                                            <strong>경기</strong><br>
                                            <span class="badge bg-danger">${relatedData.matchCount}개</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <i class="bi bi-image text-danger" style="font-size: 2rem;"></i>
                                        <div class="mt-2">
                                            <strong>오버레이 이미지</strong><br>
                                            <span class="badge bg-danger">${relatedData.overlayImageCount}개</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <i class="bi bi-image text-danger" style="font-size: 2rem;"></i>
                                        <div class="mt-2">
                                            <strong>오버레이 폴더</strong><br>
                                            <span class="badge bg-danger">${relatedData.overlayFolderInfo.exists ? '1개' : '0개'}</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <i class="bi bi-folder text-danger" style="font-size: 2rem;"></i>
                                        <div class="mt-2">
                                            <strong>팀로고 폴더</strong><br>
                                            <span class="badge bg-danger">${relatedData.teamLogoFolderInfo.exists ? '1개' : '0개'}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                ${overlayImagesHtml}

                <div class="alert alert-warning">
                    <i class="bi bi-info-circle"></i>
                    <strong>주의사항:</strong>
                    <ul class="mb-0 mt-2">
                        <li>종목 정보가 데이터베이스에서 완전히 삭제됩니다.</li>
                        <li>오버레이 이미지 파일들이 서버에서 삭제됩니다.</li>
                        <li>이 작업은 되돌릴 수 없습니다.</li>
                        <li>삭제 후에는 백업에서만 복원할 수 있습니다.</li>
                    </ul>
                </div>
            `;

            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();

            // 삭제 확인 버튼 이벤트 설정
            document.getElementById('confirmDeleteBtn').onclick = async () => {
                await performDelete(sport.code);
                modal.hide();
            };
        }

        // 실제 삭제 수행
        async function performDelete(code) {
            try {
                const response = await fetch(`/api/sport/${code}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || '종목 삭제에 실패했습니다.');
                }

                alert('종목과 관련된 모든 데이터가 성공적으로 삭제되었습니다.');
                location.reload();
            } catch (error) {
                console.error('종목 삭제 중 오류:', error);
                alert(error.message || '종목 삭제에 실패했습니다.');
            }
        }

        // 파일 크기 포맷팅 함수
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 사용자 권한 관리 함수
        let currentSportId = null;
        
        async function manageSportPermissions(sportId, sportName) {
            currentSportId = sportId;
            document.getElementById('permissionSportName').textContent = `종목: ${sportName}`;
            
            // 사용자 목록 로드
            await loadUsers();
            
            // 현재 권한 로드
            await loadCurrentPermissions(sportId);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('permissionModal'));
            modal.show();
        }
        
        // 사용자 목록 로드
        async function loadUsers() {
            try {
                const response = await fetch('/api/users');
                const users = await response.json();
                
                const userList = document.getElementById('userList');
                userList.innerHTML = '';
                
                users.forEach(user => {
                    const userItem = document.createElement('div');
                    userItem.className = 'form-check';
                    userItem.innerHTML = `
                        <input class="form-check-input user-checkbox" type="checkbox" value="${user.id}" id="user_${user.id}">
                        <label class="form-check-label" for="user_${user.id}">
                            ${user.full_name || user.username} (${user.username})
                        </label>
                    `;
                    userList.appendChild(userItem);
                });
            } catch (error) {
                console.error('사용자 목록 로드 오류:', error);
                alert('사용자 목록을 불러오는데 실패했습니다.');
            }
        }
        
        // 현재 권한 로드
        async function loadCurrentPermissions(sportId) {
            try {
                const response = await fetch(`/api/sport/${sportId}/permissions`);
                const permissions = await response.json();
                
                // 모든 체크박스 해제
                document.getElementById('selectAllUsers').checked = false;
                document.querySelectorAll('.user-checkbox').forEach(checkbox => {
                    checkbox.checked = false;
                });
                
                // 권한이 있는 사용자들 체크
                if (permissions.length === 0) {
                    // 권한이 없으면 모든 사용자 접근 가능
                    document.getElementById('selectAllUsers').checked = true;
                } else {
                    permissions.forEach(permission => {
                        const checkbox = document.getElementById(`user_${permission.user_id}`);
                        if (checkbox) {
                            checkbox.checked = true;
                        }
                    });
                }
            } catch (error) {
                console.error('권한 로드 오류:', error);
                // 오류 시 모든 사용자 접근 가능으로 설정
                document.getElementById('selectAllUsers').checked = true;
            }
        }
        
        // "모든 사용자" 체크박스 이벤트
        document.getElementById('selectAllUsers').addEventListener('change', function() {
            const userCheckboxes = document.querySelectorAll('.user-checkbox');
            userCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });
        
        // 개별 사용자 체크박스 이벤트
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('user-checkbox')) {
                const userCheckboxes = document.querySelectorAll('.user-checkbox');
                const checkedCount = document.querySelectorAll('.user-checkbox:checked').length;
                const selectAllCheckbox = document.getElementById('selectAllUsers');
                
                if (checkedCount === 0) {
                    selectAllCheckbox.checked = true;
                } else if (checkedCount === userCheckboxes.length) {
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.checked = false;
                }
            }
        });
        
        // 권한 저장
        document.getElementById('savePermissionsBtn').addEventListener('click', async function() {
            try {
                const selectAllUsers = document.getElementById('selectAllUsers').checked;
                const selectedUsers = Array.from(document.querySelectorAll('.user-checkbox:checked')).map(cb => parseInt(cb.value));
                
                const response = await fetch(`/api/sport/${currentSportId}/permissions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        selectAllUsers: selectAllUsers,
                        userIds: selectedUsers
                    })
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || '권한 저장에 실패했습니다.');
                }
                
                alert('사용자 권한이 성공적으로 저장되었습니다.');
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('permissionModal'));
                modal.hide();
                
            } catch (error) {
                console.error('권한 저장 오류:', error);
                alert(error.message || '권한 저장에 실패했습니다.');
            }
        });

        // 페이지 로드 시 템플릿 목록 로드
        document.addEventListener('DOMContentLoaded', loadTemplates);
    </script>
</body>
</html> 