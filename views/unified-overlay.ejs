<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>통합 오버레이</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        .overlay-iframe {
            width: 100vw;
            height: 100vh;
            border: none;
        }
    </style>
</head>
<body>
    <iframe class="overlay-iframe" id="overlay-iframe" src=""></iframe>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        let matchId = '<%= matchId %>';
        let isListMode = <%= isListMode %>;
        let listId = '<%= listId %>';
        let sportType = '<%= sport_type %>';
        
        const socket = io();
        
        // 소켓 연결 및 재연결 처리
        function setupSocketConnection() {
            // 소켓 연결 이벤트
            socket.on('connect', () => {
                console.log('=== 소켓 연결됨 ===');
                console.log('소켓 ID:', socket.id);
                
                // 리스트 모드일 때 방에 참가
                if (isListMode && listId) {
                    console.log('리스트 오버레이 방 참가:', listId);
                    socket.emit('join_unified_overlay', { listId: listId });
                }
            });
            
            // 소켓 재연결 이벤트
            socket.on('reconnect', (attemptNumber) => {
                console.log('=== 소켓 재연결됨 ===');
                console.log('재연결 시도 횟수:', attemptNumber);
                console.log('새 소켓 ID:', socket.id);
                
                // 재연결 시에도 방에 다시 참가
                if (isListMode && listId) {
                    console.log('재연결 후 리스트 오버레이 방 재참가:', listId);
                    socket.emit('join_unified_overlay', { listId: listId });
                }
            });
            
            // 소켓 연결 해제 이벤트
            socket.on('disconnect', (reason) => {
                console.log('=== 소켓 연결 해제됨 ===');
                console.log('연결 해제 이유:', reason);
            });
            
            // 소켓 연결 오류 이벤트
            socket.on('connect_error', (error) => {
                console.error('소켓 연결 오류:', error);
            });
            
            // 소켓 재연결 시도 이벤트
            socket.on('reconnect_attempt', (attemptNumber) => {
                console.log('소켓 재연결 시도:', attemptNumber);
            });
            
            // 소켓 재연결 실패 이벤트
            socket.on('reconnect_failed', () => {
                console.error('소켓 재연결 실패');
            });
        }
        
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('=== 통합 오버레이 페이지 로드 ===');
            console.log('matchId:', matchId);
            console.log('listId:', listId);
            console.log('isListMode:', isListMode);
            
            // 페이지 로드 시 마지막 푸시된 경기 정보 확인
            if (isListMode && listId) {
                try {
                    const response = await fetch(`/api/pushed-match/${listId}`);
                    const result = await response.json();
                    
                    if (result.success && result.data && result.data.matchId) {
                        // 푸시된 경기가 있으면 해당 경기로 업데이트
                        matchId = result.data.matchId;
                        console.log('마지막 푸시된 경기로 업데이트:', matchId);
                        
                        // 필요한 경우 sportType도 업데이트 (서버에서 전달받은 정보 사용)
                        // sportType은 서버에서 이미 올바르게 설정되어 있으므로 그대로 사용
                    }
                } catch (error) {
                    console.error('마지막 푸시된 경기 정보 로드 실패:', error);
                }
            }
            
            // 소켓 연결 설정
            setupSocketConnection();
            
            // 초기 iframe 로드
            if (matchId && sportType) {
                loadOriginalOverlay();
            }
        });
        
        function loadOriginalOverlay() {
            const iframe = document.getElementById('overlay-iframe');
            if (iframe && matchId && sportType) {
                const originalUrl = `/${sportType}/${matchId}/overlay`;
                iframe.src = originalUrl;
                console.log('원본 오버레이 로드:', originalUrl);
            }
        }
        
        // 리스트 오버레이 경기 변경 이벤트
        socket.on('list_overlay_match_changed', (data) => {
            console.log('=== 리스트 오버레이 경기 변경 이벤트 수신 ===');
            console.log('전체 데이터:', data);
            
            if (isListMode && listId && data.listId === listId) {
                if (data.match && data.match.id) {
                    matchId = data.match.id;
                    sportType = data.match.sport_type || sportType;
                    
                    // 새로운 경기의 원본 오버레이 로드
                    loadOriginalOverlay();
                    
                    console.log('새 경기 오버레이 로드 완료:', matchId);
                }
            }
        });

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // iframe 내부의 경기 정보 업데이트를 위해 iframe 새로고침
                loadOriginalOverlay();
                
                console.log('경기 수정으로 인한 오버레이 새로고침 완료');
            }
        });

        // 팀명 업데이트 이벤트
        socket.on('teamNameUpdated', (data) => {
            if (data.matchId === matchId) {
                console.log('팀명 업데이트 이벤트 수신:', data);
                
                // iframe 내부의 팀명 업데이트를 위해 iframe 새로고침
                loadOriginalOverlay();
                
                console.log('팀명 업데이트로 인한 오버레이 새로고침 완료');
            }
        });

        // 경기 상태 표시 설정 변경 이벤트
        socket.on('soccer_match_state_visibility_changed', (data) => {
            console.log('경기 상태 표시 설정 변경 이벤트 수신:', data);
            
            // iframe 내부의 경기 상태 표시 설정 업데이트를 위해 iframe 새로고침
            loadOriginalOverlay();
            
            console.log('경기 상태 표시 설정 변경으로 인한 오버레이 새로고침 완료');
        });

        // 오버레이 이미지 변경 이벤트
        socket.on('overlay_image_updated', (data) => {
            console.log('오버레이 이미지 변경 이벤트 수신:', data);
            
            // iframe 내부의 오버레이 이미지 업데이트를 위해 iframe 새로고침
            loadOriginalOverlay();
            
            console.log('오버레이 이미지 변경으로 인한 오버레이 새로고침 완료');
        });

        // 오버레이 강제 새로고침 이벤트
        socket.on('overlay_force_refresh', (data) => {
            console.log('=== 오버레이 강제 새로고침 이벤트 수신 ===');
            console.log('데이터:', data);
            
            if (isListMode && listId && data.listId === listId) {
                console.log('리스트 ID 일치, 강제 새로고침 실행');
                
                // iframe 강제 새로고침
                const iframe = document.getElementById('overlay-iframe');
                if (iframe) {
                    // 완전히 새로운 URL로 iframe 새로고침
                    if (matchId && sportType) {
                        const newUrl = `/${sportType}/${matchId}/overlay?refresh=${Date.now()}`;
                        iframe.src = newUrl;
                        console.log('iframe 완전 새로고침 완료:', newUrl);
                    } else {
                        // matchId가 없는 경우 현재 URL에 타임스탬프만 추가
                        const currentSrc = iframe.src;
                        const separator = currentSrc.includes('?') ? '&' : '?';
                        iframe.src = currentSrc + separator + 'refresh=' + Date.now();
                        console.log('iframe 캐시 무효화 새로고침 완료:', iframe.src);
                    }
                } else {
                    console.error('iframe을 찾을 수 없습니다.');
                }
            } else {
                console.log('리스트 ID 불일치 또는 리스트 모드가 아님:', {
                    isListMode: isListMode,
                    listId: listId,
                    dataListId: data.listId
                });
            }
        });

        // 팀 위치 변경 이벤트
        socket.on('teamsSwapped', (data) => {
            if (data.matchId === matchId) {
                console.log('팀 위치 변경 이벤트 수신:', data);
                
                // iframe 내부의 팀 위치 변경을 위해 iframe 새로고침
                loadOriginalOverlay();
                
                console.log('팀 위치 변경으로 인한 오버레이 새로고침 완료');
            }
        });
        
        // 전역 함수로 수동 강제 새로고침 기능 추가 (개발자 도구에서 사용)
        window.forceRefreshOverlay = function() {
            console.log('=== 수동 강제 새로고침 실행 ===');
            
            const iframe = document.getElementById('overlay-iframe');
            if (iframe) {
                if (matchId && sportType) {
                    const newUrl = `/${sportType}/${matchId}/overlay?refresh=${Date.now()}`;
                    iframe.src = newUrl;
                    console.log('수동 iframe 완전 새로고침 완료:', newUrl);
                } else {
                    const currentSrc = iframe.src;
                    const separator = currentSrc.includes('?') ? '&' : '?';
                    iframe.src = currentSrc + separator + 'refresh=' + Date.now();
                    console.log('수동 iframe 캐시 무효화 새로고침 완료:', iframe.src);
                }
            } else {
                console.error('iframe을 찾을 수 없습니다.');
            }
        };
        
        // 전역 함수로 소켓 재연결 테스트 기능 추가
        window.testSocketReconnect = function() {
            console.log('=== 소켓 재연결 테스트 ===');
            if (socket) {
                socket.disconnect();
                setTimeout(() => {
                    socket.connect();
                }, 1000);
            }
        };
        
        // 전역 함수로 현재 상태 확인
        window.getOverlayStatus = function() {
            return {
                matchId: matchId,
                listId: listId,
                isListMode: isListMode,
                sportType: sportType,
                socketConnected: socket.connected,
                socketId: socket.id,
                iframeSrc: document.getElementById('overlay-iframe')?.src
            };
        };
    </script>
</body>
</html> 