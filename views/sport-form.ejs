<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>새 종목 추가</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .form-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        
    </style>
</head>
<body>
    <div class="form-container">
        <h1 class="mb-4">새 종목 추가</h1>
        
        <div class="alert alert-danger" id="errorAlert" role="alert" style="display: none;"></div>
        
        <form id="sportForm">
            <div class="mb-3">
                <label for="name" class="form-label">종목명</label>
                <input type="text" class="form-control" id="name" name="name" required placeholder="예: 축구, 야구, K4 리그">
                <small class="form-text text-muted">사용자에게 표시될 종목 이름을 입력하세요</small>
            </div>
            
            <div class="mb-3">
                <label for="code" class="form-label">종목 코드</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="code" name="code" required placeholder="자동 생성됩니다">
                    <button type="button" class="btn btn-outline-secondary" id="generateCode">자동 생성</button>
                </div>
                <small class="form-text text-muted">시스템 내부에서 사용할 고유 코드 (예: SOCCER, BASEBALL, K4)</small>
            </div>
            
            <div class="mb-3">
                <label for="template" class="form-label">템플릿 선택</label>
                <select class="form-control" id="template" name="template" required>
                    <option value="">템플릿을 선택하세요</option>
                </select>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">종목 추가</button>
                <a href="/sports" class="btn btn-secondary">취소</a>
            </div>
        </form>
    </div>


    <script>
        // 템플릿 목록 로드
        async function loadTemplates() {
            try {
                // 기본 템플릿과 DB 템플릿 모두 조회
                const baseResponse = await fetch('/api/templates/base-templates');
                const baseData = await baseResponse.json();
                
                const dbResponse = await fetch('/api/templates');
                const dbTemplates = await dbResponse.json();
                
                // 기본 템플릿과 DB 템플릿을 합쳐서 옵션 생성
                const allTemplates = [];
                
                // 기본 템플릿 추가
                if (baseData.success && baseData.templates) {
                    baseData.templates.forEach(template => {
                        allTemplates.push({
                            name: template.name,
                            displayName: template.displayName
                        });
                    });
                }
                
                // DB 템플릿 추가 (새로 생성한 템플릿들)
                if (Array.isArray(dbTemplates)) {
                    dbTemplates.forEach(template => {
                        // 중복 방지: 이미 기본 템플릿에 있는 것은 제외
                        const exists = allTemplates.some(t => t.name === template.name);
                        if (!exists) {
                            allTemplates.push({
                                name: template.name,
                                displayName: template.name // DB 템플릿은 name을 displayName으로 사용
                            });
                        }
                    });
                }
                
                console.log('로드된 템플릿 목록:', allTemplates);
                
                // 템플릿 선택 옵션 업데이트
                const templateSelect = document.getElementById('template');
                templateSelect.innerHTML = '<option value="">템플릿을 선택하세요</option>' +
                    allTemplates.map(template => `
                        <option value="${template.name}">${template.displayName}</option>
                    `).join('');
            } catch (error) {
                console.error('템플릿 목록 로드 중 오류:', error);
                alert('템플릿 목록을 불러오는데 실패했습니다.');
            }
        }

        // 페이지 로드 시 템플릿 목록 로드
        document.addEventListener('DOMContentLoaded', function() {
            loadTemplates();
        });

        document.getElementById('sportForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const name = document.getElementById('name').value;
            const code = document.getElementById('code').value;
            const template = document.getElementById('template').value;
            const errorAlert = document.getElementById('errorAlert');
            
            if (!template) {
                errorAlert.textContent = '템플릿을 선택해주세요.';
                errorAlert.style.display = 'block';
                return;
            }
            
            if (!code) {
                errorAlert.textContent = '종목 코드를 입력해주세요.';
                errorAlert.style.display = 'block';
                return;
            }
            
            try {
                const response = await fetch('/api/sport', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: name,
                        code: code.toUpperCase(), // 사용자가 입력한 코드 사용
                        template: template // 사용자가 선택한 템플릿 사용
                    })
                });

                if (response.ok) {
                    window.location.href = '/sports';
                } else {
                    const data = await response.json();
                    errorAlert.textContent = data.error || '종목 추가에 실패했습니다.';
                    errorAlert.style.display = 'block';
                }
            } catch (error) {
                errorAlert.textContent = '서버 오류가 발생했습니다.';
                errorAlert.style.display = 'block';
            }
        });

        // 자동 코드 생성 기능
        document.getElementById('generateCode').addEventListener('click', () => {
            const name = document.getElementById('name').value;
            if (name) {
                // 이름의 첫 글자들을 대문자로 변환하여 코드 생성
                const words = name.split(' ');
                let code = '';
                words.forEach(word => {
                    if (word.length > 0) {
                        code += word.charAt(0).toUpperCase();
                    }
                });
                
                // 최대 4글자로 제한
                code = code.substring(0, 4);
                document.getElementById('code').value = code;
            }
        });

        // 이름 입력 시 자동으로 코드 생성
        document.getElementById('name').addEventListener('input', () => {
            const name = document.getElementById('name').value;
            const codeField = document.getElementById('code');
            
            if (name && !codeField.value) {
                const words = name.split(' ');
                let code = '';
                words.forEach(word => {
                    if (word.length > 0) {
                        code += word.charAt(0).toUpperCase();
                    }
                });
                code = code.substring(0, 4);
                codeField.value = code;
            }
        });

    </script>
</body>
</html> 