<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Baseball Overlay</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        /* 기본 스타일 */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Noto Sans KR', sans-serif;
            background-color: transparent;
            color: white;
            overflow: hidden;
        }

        .team-logo {
            max-width: 100%;
            max-height: 100%;
            background-color: rgba(255, 255, 255, 0.0);
            padding: 0px;
        }

                /* 실제 로고 영역: 원형 테두리 적용 */
        .team-logo-container {
            width: 40px;
            height: 40px;
            margin-right: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
        }

              /* 로고가 없을 때 표시될 플레이스홀더 스타일 */
        .team-logo-placeholder {
            width: 100%;                                 /* 부모 크기에 맞춤 */
            height: 100%;                                /* 부모 크기에 맞춤 */
            border-radius: 5px;                          /* 살짝 둥근 모서리 */
            background-color: rgba(0, 0, 0, 1.0);      /* 반투명 흰 배경 */
            display: flex;                               /* 텍스트 정렬용 flex */
            align-items: center;                         /* 세로 가운데 정렬 */
            justify-content: center;                     /* 가로 가운데 정렬 */
            font-weight: bold;                           /* 글씨 굵게 */
            color: white;                                /* 글씨 색 흰색 */
            font-size: 24px;                             /* 글씨 크기 24px */
        }


        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Noto Sans KR', Arial, sans-serif;
        }
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }
        body {
            min-height: 100vh;
            min-width: 100vw;
            height: 100vh;
            width: 100vw;
            position: relative;
        }
        .overlay-container {
            width: 100vw;
            height: 100vh;
            min-width: 100vw;
            min-height: 100vh;
            position: relative;
        }

        /* 리스트 정보 표시 영역 */
        .list-info {
            position: absolute;
            top: 20px;
            right: 50px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000;
            display: none;
        }
        
        .list-info.show {
            display: block;
        }
        
        .list-info .list-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .list-info .match-counter {
            font-size: 12px;
            opacity: 0.8;
        }
        
        /* 우측 하단 스코어보드 */
        .scoreboard {        
            position: fixed;
            bottom: 20px;
            right: 250px;
            width: 300px;
            height: 120px;
            background-color: rgb(208, 208, 208);
            display: flex;
            color: rgb(255, 255, 255);
            overflow: hidden;            
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }
        .team-section {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        .team-info {
            flex: 1;
            display: flex;
            align-items: center;
            padding: 5px 10px;
        }
        .team-info.home-team {
            background-color: rgb(57, 57, 57);
        }
        .team-info.away-team {
            background-color: rgb(57, 57, 57);
        }
        .team-header {
            width: 180px;
            font-size: 24px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: flex-start;            
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding-left: 10px;
        }
        .team-logo img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            display: flex;
            align-items: center;       /* 수직 가운데 정렬 */
            justify-content: center;   /* 수평 가운데 정렬 */
        }
        .team-logo.no-logo {
            font-size: 16px;
            color: rgba(255, 255, 255, 0.7);
        }
        .team-header.long {
            font-size: 18px;
        }
        .team-header.very-long {
            font-size: 16px;
        }
        .team-content {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 20px;
            min-width: 60px;
        }
        .team-score {
            font-size: 32px;
            font-weight: bold;
            min-width: 40px;
            text-align: right;
            padding-left: 15px; /* 오른쪽 여백을 줄이기 위해 패딩 추가 */
        }
        
        
        /* 베이스 상태 */
        .base-status {
            position: fixed;
            bottom: 20px;
            right: 130px;
            width: 120px;
            height: 120px;
            background-color: rgba(0, 0, 0, 0.98);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .inning-header {
            font-size: 18px;
            top: 50px;
            left: 70px;
            background-color: transparent;
        }
        .current-inning {
            margin-top: 60px;
            font-size: 28px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .inning-indicator {
            margin-left: 5px;
            font-size: 20px;
        }
        .inning-indicator.top:after {
            content: "▲";
            color: #3b82f6;
        }
        .inning-indicator.bottom:after {
            content: "▼";
            color: #3b82f6;
        }
        
        /* 게임 상태 (볼/스트라이크/아웃 카운트) */
        .game-status {
            position: fixed;
            bottom: 20px;
            right: 10px;
            width: 120px;
            height: 120px;
            background-color: rgba(0, 0, 0, 0.98);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 10px 0;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }
        .base-container {
            width: 120px;
            height: 120px;
            position: relative;
            margin: 0 auto;
            background-color: transparent;
            transform: rotate(-45deg); /* 전체 45도 회전 */
        }
        .diamond {
            width: 80px;
            height: 80px;
            position: absolute; /* 요소를 절대 위치로 설정하여 부모 요소를 기준으로 위치를 조정합니다. */
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
        }
        .base {
            width: 35px; /* 크기를 줄여서 간격을 좁힙니다. */
            height: 35px; /* 크기를 줄여서 간격을 좁힙니다. */
            position: absolute;
            background-color: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.4);
            transition: all 0.3s ease;
        }
        .base.active {
            background-color: #f59e0b;
            border-color: #d97706;
            box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
        }
        .base.first {
            right: 15%;
            bottom: 50%;
            transform: translate(50%, 50%) rotate(45deg); /* 45도 회전 추가 */
        }
        .base.second {
            top: 15%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
        }
        .base.third {
            left: 15%;
            bottom: 50%;
            transform: translate(-50%, 50%) rotate(45deg); /* 45도 회전 추가 */
        }
        
        .count-section {
            display: flex;
            flex-direction: column;
            gap: 5px;
            width: 100%;
            padding: 0 10px;
        }
        .count-row {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .count-label {
            font-size: 20px;
            width: 15px;
            text-align: left;
        }
        .count-indicators {
            display: flex;
            gap: 4px;
            flex: 1;
            justify-content: flex-start;
            margin-left: 0;
            padding-left: 0;
        }
        .count-dot {
            width: 23px;
            height: 23px;
            border-radius: 50%;
            background-color: #666;
            transition: background-color 0.3s ease;
        }
        .count-dot.ball.active {
            background-color: #22c55e;
        }
        .count-dot.strike.active {
            background-color: #eab308;
        }
        .count-dot.out.active {
            background-color: #ef4444;
        }
        
        /* 스트라이크와 아웃카운트 원들을 왼쪽으로 더 움직임 */
        .count-row:nth-child(1) .count-indicators,
        .count-row:nth-child(2) .count-indicators,
        .count-row:nth-child(3) .count-indicators {
            padding-left: -15px; /* 왼쪽으로 더 이동시키기 위해 패딩을 추가 */
        }
        
        /* 타자 정보 */
        .batter-info {
            position: absolute;
            left: 50px;
            top: 210px;
            width: 320px;
            height: 320px;
            background-color: rgba(0, 0, 0, 1.0);
            border-radius: 8px;
            color: white;
            overflow: hidden;
        }
        .panel-title {
            background-color: #ffffff;
            padding: 8px 12px;
            font-size: 16px;
            font-weight: bold;
        }
        .player-content {
            padding: 12px 15px;
            display: flex;
            align-items: center;
        }
        .player-number {
            width: 50px;
            height: 50px;
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 50%;
            font-size: 20px;
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 15px;
            align-self: flex-start; /* ← 부모 안에서 위로 붙이기 */
        }
        .player-info {
            flex: 1;
        }
        .player-name {
            font-size: 32px;
            font-weight: bold;
        }
        .player-position {
            font-size: 20px;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 3px;
        }
        .player-stats {
            margin-top: 10px;
            display: flex;
            gap: 15px;
            align-items: flex-start; /* ← 왼쪽 정렬 */
            flex-direction: column; /* ← 세로로 나열 */
            gap: 5px; /* 항목 간 간격 */
        }
        .stat-item {
            display: flex;
            flex-direction: row; /* ← 가로 정렬 */
            align-items: center;
            gap: 6px; /* 항목 간 간격 */
        }
        .stat-label {
            font-size: 20px;
            color: rgba(255, 255, 255, 0.6);
        }
        .stat-value {
            font-size: 20px;
            font-weight: bold;
            margin-top: 3px;
        }
        
        /* 투수 정보 */
        .pitcher-info {
            position: absolute;
            left: 420px;
            top: 210px;
            width: 320px;
            height: 320px;
            background-color: rgba(0, 0, 0, 1.0);
            border-radius: 8px;
            color: white;
            overflow: hidden;
        }
        .pitcher-info .panel-title {
            background-color: #ffffff;
        }
        .pitcher-info .player-number {
            background-color: rgba(0, 0, 0, 0.2);
        }
        
        /* 이닝 스코어 */
        .innings-scoreboard {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 800px;
            background-color: rgba(0, 0, 0, 1.0);
            border-radius: 8px;
            color: white;
            overflow: hidden;
        }
        .innings-title {
            background-color: rgb(0, 126, 52);
            padding: 8px 12px;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
        }
        .innings-table {
            width: 100%;
            border-collapse: collapse;
        }
        .innings-table th, .innings-table td {
            padding: 8px;
            text-align: center;
            font-size: 14px;
        }
        .innings-table th {
            color: rgba(255, 255, 255, 0.7);
            background-color: rgba(255, 255, 255, 0.1);
        }
        .innings-table td {
            font-weight: bold;
        }
        .innings-table td.team-name {
            text-align: left;
            width: 120px;
        }
        .innings-table td.total {
            background-color: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <div class="overlay-container">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="list-info" id="listInfo">
            <div class="list-name" id="listName"></div>
            <div class="match-counter" id="matchCounter"></div>
        </div>
        <% } %>
        
        <div class="scoreboard">
            <div class="team-section">
                <div class="team-info home-team" id="home-team-section">
                    <div class="team-logo-container">
                        <% if (match.match_data?.home_team_logo) { %>
                            <img src="<%= match.match_data.home_team_logo %>" alt="홈팀 로고" class="team-logo">
                        <% } else { %>
                            <div class="team-logo-placeholder"></div>
                        <% } %>
                    </div>
                    <div class="team-header"><%= match.home_team || 'HOME' %></div>
                    <div class="team-content">
                        <div class="team-score"><%= match.home_score || '0' %></div>
                    </div>
                </div>
                <div class="team-info away-team" id="away-team-section">
                    <div class="team-logo-container">
                        <% if (match.match_data?.away_team_logo) { %>
                            <img src="<%= match.match_data.away_team_logo %>" alt="원정팀 로고" class="team-logo">
                        <% } else { %>
                            <div class="team-logo-placeholder"></div>
                        <% } %>
                    </div>
                    <div class="team-header"><%= match.away_team || 'AWAY' %></div>
                    <div class="team-content">
                        <div class="team-score"><%= match.away_score || '0' %></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="inning-section">
            
        </div>

        <!-- 베이스 상태 섹션 -->
        <div class="base-status">
            <div class="base-container">
                <div class="diamond">
                    <div class="base first <%= match.match_data?.first_base ? 'active' : '' %>"></div>
                    <div class="base second <%= match.match_data?.second_base ? 'active' : '' %>"></div>
                    <div class="base third <%= match.match_data?.third_base ? 'active' : '' %>"></div>
                    <div class="inning-header"></div>
                    <div class="current-inning">
                    <%= match.match_data?.current_inning || '1' %>
                    <div class="inning-indicator <%= match.match_data?.inning_type === 'bottom' ? 'bottom' : 'top' %>"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 게임 상태 섹션 (볼/스트라이크/아웃 카운트) -->
        <div class="game-status">
            <div class="count-section">
                <div class="count-row">
                    <span class="count-label">B</span>
                    <div class="count-indicators">
                        <div class="count-dot ball <%= (match.match_data?.balls >= 1) ? 'active' : '' %>"></div>
                        <div class="count-dot ball <%= (match.match_data?.balls >= 2) ? 'active' : '' %>"></div>
                        <div class="count-dot ball <%= (match.match_data?.balls >= 3) ? 'active' : '' %>"></div>
                        <!-- <div class="count-dot ball <%= (match.match_data?.balls >= 4) ? 'active' : '' %>"></div> -->
                    </div>
                </div>
                <div class="count-row">
                    <span class="count-label">S</span>
                    <div class="count-indicators">
                        <div class="count-dot strike <%= (match.match_data?.strikes >= 1) ? 'active' : '' %>"></div>
                        <div class="count-dot strike <%= (match.match_data?.strikes >= 2) ? 'active' : '' %>"></div>
                        <!-- <div class="count-dot strike <%= (match.match_data?.strikes >= 3) ? 'active' : '' %>"></div> -->
                    </div>
                </div>
                <div class="count-row">
                    <span class="count-label">O</span>
                    <div class="count-indicators">
                        <div class="count-dot out <%= (match.match_data?.outs >= 1) ? 'active' : '' %>"></div>
                        <div class="count-dot out <%= (match.match_data?.outs >= 2) ? 'active' : '' %>"></div>
                        <div class="count-dot out <%= (match.match_data?.outs >= 3) ? 'active' : '' %>"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 타자 정보 -->
        <div class="batter-info">
            <div class="panel-title">현재 타자</div>
            <div class="player-content">
                <div class="player-number"><%= match.match_data?.batter_number || '25' %></div>
                <div class="player-info">
                    <div class="player-name batter-name"><%= match.match_data?.batter_name || '타자' %></div>
                    <div class="player-position"><%= match.match_data?.batter_position || '외야수' %></div>
                    <div class="player-stats">
                        <div class="stat-item">
                            <div class="stat-label">타율</div>
                            <div class="stat-value"><%= match.match_data?.batter_avg || '.342' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">홈런</div>
                            <div class="stat-value"><%= match.match_data?.batter_hr || '15' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">타점</div>
                            <div class="stat-value"><%= match.match_data?.batter_rbi || '52' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">출루율</div>
                            <div class="stat-value"><%= match.match_data?.batter_obp || '.412' %></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 투수 정보 -->
        <div class="pitcher-info">
            <div class="panel-title">현재 투수</div>
            <div class="player-content">
                <div class="player-number"><%= match.match_data?.pitcher_number || '18' %></div>
                <div class="player-info">
                    <div class="player-name pitcher-name"><%= match.match_data?.pitcher_name || '투수' %></div>
                    <div class="player-position"><%= match.match_data?.pitcher_position || '우완 투수' %></div>
                    <div class="player-stats">
                        <div class="stat-item">
                            <div class="stat-label">평균자책점</div>
                            <div class="stat-value"><%= match.match_data?.pitcher_era || '2.48' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">승패</div>
                            <div class="stat-value"><%= match.match_data?.pitcher_wl || '7-3' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">투구 수</div>
                            <div class="stat-value"><%= match.match_data?.pitcher_pitches || '53' %></div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">탈삼진</div>
                            <div class="stat-value"><%= match.match_data?.pitcher_so || '5' %></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 이닝 스코어 -->
        <div class="innings-scoreboard">
            <div class="innings-title">이닝 스코어</div>
            <table class="innings-table">
                <thead>
                    <tr>
                        <th>팀</th>
                        <th>1</th>
                        <th>2</th>
                        <th>3</th>
                        <th>4</th>
                        <th>5</th>
                        <th>6</th>
                        <th>7</th>
                        <th>8</th>
                        <th>9</th>
                        <th>R</th>
                        <th>H</th>
                        <th>E</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="team-name"><%= match.home_team %></td>
                        <% for(let i = 1; i <= 9; i++) { %>
                            <td id="teamA-inning-<%= i %>"><%= match.match_data?.innings?.[`home_${i}`] || 0 %></td>
                        <% } %>
                        <td class="total"><%= match.home_score || 0 %></td>
                        <td class="total"><%= match.match_data?.home_hits || 0 %></td>
                        <td class="total"><%= match.match_data?.home_errors || 0 %></td>
                    </tr>
                    <tr>
                        <td class="team-name"><%= match.away_team %></td>
                        <% for(let i = 1; i <= 9; i++) { %>
                            <td id="teamB-inning-<%= i %>"><%= match.match_data?.innings?.[`away_${i}`] || 0 %></td>
                        <% } %>
                        <td class="total"><%= match.away_score || 0 %></td>
                        <td class="total"><%= match.match_data?.away_hits || 0 %></td>
                        <td class="total"><%= match.match_data?.away_errors || 0 %></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // 소켓 연결
        socket.on('connect', () => {
            console.log('=== Socket.IO 연결됨 (오버레이) ===');
            console.log('Socket ID:', socket.id);
            console.log('Match ID:', matchId);
            socket.emit('join', matchId);
            
            if (typeof isListMode !== 'undefined' && isListMode && typeof listId !== 'undefined' && listId) { 
            // 리스트 오버레이 모드일 때 리스트 오버레이 방에도 참가
            socket.emit('join_list_overlay', '<%= listId %>');
            } 
        });
        
        socket.on('disconnect', () => {
            console.log('=== Socket.IO 연결 끊어짐 (오버레이) ===');
        });
        
        socket.on('connect_error', (error) => {
            console.error('=== Socket.IO 연결 오류 (오버레이) ===', error);
        });

        // match_update 이벤트 구독
        socket.on('match_update', function(data) {
            if (data.matchId === matchId) {
                console.log('경기 정보 업데이트 수신:', data);
                
                // 점수 업데이트 (이닝별 점수 합계로 계산)
                let homeTotalScore = 0;
                let awayTotalScore = 0;
                
                if (data.match_data?.innings) {
                    // 이닝별 점수 합계 계산
                    for (let i = 1; i <= 9; i++) {
                        homeTotalScore += parseInt(data.match_data.innings[`home_${i}`] || '0');
                        awayTotalScore += parseInt(data.match_data.innings[`away_${i}`] || '0');
                    }
                } else {
                    // 이닝 데이터가 없으면 서버 점수 사용
                    homeTotalScore = data.home_score || 0;
                    awayTotalScore = data.away_score || 0;
                }
                
                const homeScoreEl = document.querySelector('.home-team .team-score');
                if (homeScoreEl) homeScoreEl.textContent = homeTotalScore;
                const awayScoreEl = document.querySelector('.away-team .team-score');
                if (awayScoreEl) awayScoreEl.textContent = awayTotalScore;
                
                // 이닝 정보 업데이트
                if (data.match_data) {
                    // 현재 이닝
                    const inningEl = document.querySelector('.current-inning');
                    if (inningEl && data.match_data.current_inning) {
                        inningEl.textContent = data.match_data.current_inning;
                        // 이닝 인디케이터도 같이 갱신
                        let indicator = inningEl.querySelector('.inning-indicator');
                        if (!indicator) {
                            indicator = document.createElement('div');
                            indicator.className = 'inning-indicator';
                            inningEl.appendChild(indicator);
                        }
                        indicator.className = `inning-indicator ${data.match_data.inning_type === 'bottom' ? 'bottom' : 'top'}`;
                    }
                    
                    // 베이스 상태
                    const firstBase = document.querySelector('.base.first');
                    if (firstBase && data.match_data.first_base !== undefined) firstBase.classList.toggle('active', data.match_data.first_base);
                    const secondBase = document.querySelector('.base.second');
                    if (secondBase && data.match_data.second_base !== undefined) secondBase.classList.toggle('active', data.match_data.second_base);
                    const thirdBase = document.querySelector('.base.third');
                    if (thirdBase && data.match_data.third_base !== undefined) thirdBase.classList.toggle('active', data.match_data.third_base);
                    
                    // 볼/스트라이크/아웃 카운트
                    if (data.match_data.balls !== undefined) {
                        document.querySelectorAll('.count-dot.ball').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.balls);
                        });
                    }
                    if (data.match_data.strikes !== undefined) {
                        document.querySelectorAll('.count-dot.strike').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.strikes);
                        });
                    }
                    if (data.match_data.outs !== undefined) {
                        document.querySelectorAll('.count-dot.out').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.outs);
                        });
                    }
                    
                    // 타자/투수 패널 제목 배경색 업데이트 (이닝 타입에 따라)
                    const isTopInning = data.match_data.inning_type !== 'bottom';
                    const batterTitlePanel = document.querySelector('.batter-info .panel-title');
                    const pitcherTitlePanel = document.querySelector('.pitcher-info .panel-title');
                    
                    if (batterTitlePanel && pitcherTitlePanel) {
                        // 팀 색상 가져오기
                        const homeTeamSection = document.getElementById('home-team-section');
                        const awayTeamSection = document.getElementById('away-team-section');
                        const homeTeamColor = homeTeamSection ? homeTeamSection.style.backgroundColor : '#333333';
                        const awayTeamColor = awayTeamSection ? awayTeamSection.style.backgroundColor : '#333333';
                        
                        // 팀 이름 가져오기
                        const homeTeamName = '<%= match.home_team %>';
                        const awayTeamName = '<%= match.away_team %>';
                        
                        // 이닝 타입에 따라 패널 제목 색상 설정
                        if (isTopInning) {
                            // 초(top) 이닝: 홈팀 타자, 어웨이팀 투수
                            batterTitlePanel.style.backgroundColor = homeTeamColor;
                            pitcherTitlePanel.style.backgroundColor = awayTeamColor;
                            batterTitlePanel.textContent = homeTeamName;  // 홈팀 타자
                            pitcherTitlePanel.textContent = awayTeamName; // 어웨이팀 투수
                            console.log('초 이닝: 홈팀 타자, 어웨이팀 투수');
                        } else {
                            // 말(bottom) 이닝: 어웨이팀 타자, 홈팀 투수
                            batterTitlePanel.style.backgroundColor = awayTeamColor;
                            pitcherTitlePanel.style.backgroundColor = homeTeamColor;
                            batterTitlePanel.textContent = awayTeamName;  // 어웨이팀 타자
                            pitcherTitlePanel.textContent = homeTeamName; // 홈팀 투수
                            console.log('말 이닝: 어웨이팀 타자, 홈팀 투수');
                        }
                    }
                    
                    // 타자/투수 정보
                    const batterName = document.querySelector('.batter-info .player-name');
                    if (batterName && data.match_data.batter_name) batterName.textContent = data.match_data.batter_name;
                    const batterNumber = document.querySelector('.batter-info .player-number');
                    if (batterNumber && data.match_data.batter_number) batterNumber.textContent = data.match_data.batter_number;
                    const batterPosition = document.querySelector('.batter-info .player-position');
                    if (batterPosition && data.match_data.batter_position) batterPosition.textContent = data.match_data.batter_position;
                    const batterAvg = document.querySelector('.batter-info .stat-value');
                    if (batterAvg && data.match_data.batter_avg) batterAvg.textContent = data.match_data.batter_avg;
                    
                    const pitcherName = document.querySelector('.pitcher-info .player-name');
                    if (pitcherName && data.match_data.pitcher_name) pitcherName.textContent = data.match_data.pitcher_name;
                    const pitcherNumber = document.querySelector('.pitcher-info .player-number');
                    if (pitcherNumber && data.match_data.pitcher_number) pitcherNumber.textContent = data.match_data.pitcher_number;
                    const pitcherPosition = document.querySelector('.pitcher-info .player-position');
                    if (pitcherPosition && data.match_data.pitcher_position) pitcherPosition.textContent = data.match_data.pitcher_position;
                    const pitcherEra = document.querySelector('.pitcher-info .stat-value');
                    if (pitcherEra && data.match_data.pitcher_era) pitcherEra.textContent = data.match_data.pitcher_era;
                }
            }
        });

        // 리스트 오버레이 경기 변경 이벤트 처리
        socket.on('list_overlay_match_changed', (data) => {
            console.log('리스트 오버레이 경기 변경 수신:', data);
            console.log('받은 경기 데이터:', JSON.stringify(data.match, null, 2));
            
            if (typeof isListMode !== 'undefined' && isListMode && typeof listId !== 'undefined' && listId) { 
            if (data.listId === '<%= listId %>') {
                // 현재 경기 인덱스 업데이트
                currentMatchIndex = data.matchIndex;
                
                // matchId 업데이트 (푸시된 경기의 ID로 변경)
                if (data.match && data.match.id) {
                    matchId = data.match.id;
                    console.log('matchId 업데이트됨:', matchId);
                }
                
                // 경기 정보 업데이트
                const match = data.match;
                if (match) {
                    // 팀명 업데이트
                    const homeTeamElement = document.querySelector('.home-team .team-name');
                    const awayTeamElement = document.querySelector('.away-team .team-name');
                    if (homeTeamElement) homeTeamElement.textContent = match.home_team || 'HOME';
                    if (awayTeamElement) awayTeamElement.textContent = match.away_team || 'AWAY';
                    
                    // 실제 점수 업데이트 (초기화하지 않음)
                    const homeScoreElement = document.querySelector('.home-team .team-score');
                    const awayScoreElement = document.querySelector('.away-team .team-score');
                    if (homeScoreElement) homeScoreElement.textContent = match.home_score || '0';
                    if (awayScoreElement) awayScoreElement.textContent = match.away_score || '0';
                    
                    // 실제 이닝 정보 업데이트
                    if (match.match_data) {
                        const inningElement = document.querySelector('.current-inning');
                        if (inningElement && match.match_data.current_inning) {
                            inningElement.textContent = match.match_data.current_inning;
                            const indicator = inningElement.querySelector('.inning-indicator');
                            if (indicator) {
                                indicator.className = `inning-indicator ${match.match_data.inning_type === 'bottom' ? 'bottom' : 'top'}`;
                            }
                        }
                        
                        // 베이스 상태 업데이트
                        const firstBase = document.querySelector('.base.first');
                        if (firstBase && match.match_data.first_base !== undefined) firstBase.classList.toggle('active', match.match_data.first_base);
                        const secondBase = document.querySelector('.base.second');
                        if (secondBase && match.match_data.second_base !== undefined) secondBase.classList.toggle('active', match.match_data.second_base);
                        const thirdBase = document.querySelector('.base.third');
                        if (thirdBase && match.match_data.third_base !== undefined) thirdBase.classList.toggle('active', match.match_data.third_base);
                        
                        // 볼/스트라이크/아웃 카운트 업데이트
                        if (match.match_data.balls !== undefined) {
                            document.querySelectorAll('.count-dot.ball').forEach((el, index) => {
                                el.classList.toggle('active', index < match.match_data.balls);
                            });
                        }
                        if (match.match_data.strikes !== undefined) {
                            document.querySelectorAll('.count-dot.strike').forEach((el, index) => {
                                el.classList.toggle('active', index < match.match_data.strikes);
                            });
                        }
                        if (match.match_data.outs !== undefined) {
                            document.querySelectorAll('.count-dot.out').forEach((el, index) => {
                                el.classList.toggle('active', index < match.match_data.outs);
                            });
                        }
                    }
                    
                    // 리스트 정보 업데이트
                    showListInfo();
                    
                    console.log('리스트 오버레이 경기 변경 완료:', match);
                }
            }
            }
        });

        // 실시간 경기 데이터 업데이트 이벤트 처리
        socket.on('match_data_updated', (data) => {
            console.log('=== 야구 실시간 경기 데이터 업데이트 수신 ===');
            console.log('업데이트 데이터:', data);
            
            if (data.matchId === matchId) {
                // 점수 업데이트
                const homeScoreElement = document.querySelector('.home-team .team-score');
                const awayScoreElement = document.querySelector('.away-team .team-score');
                
                if (homeScoreElement && data.home_score !== undefined) {
                    homeScoreElement.textContent = data.home_score;
                    console.log('홈팀 점수 실시간 업데이트:', data.home_score);
                }
                if (awayScoreElement && data.away_score !== undefined) {
                    awayScoreElement.textContent = data.away_score;
                    console.log('원정팀 점수 실시간 업데이트:', data.away_score);
                }
                
                // 야구 특화 데이터 업데이트
                if (data.match_data) {
                    // 이닝 정보 업데이트
                    const inningElement = document.querySelector('.current-inning');
                    if (inningElement && data.match_data.current_inning) {
                        inningElement.textContent = data.match_data.current_inning;
                        const indicator = inningElement.querySelector('.inning-indicator');
                        if (indicator) {
                            indicator.className = `inning-indicator ${data.match_data.inning_type === 'bottom' ? 'bottom' : 'top'}`;
                        }
                    }
                    
                    // 베이스 상태 업데이트
                    if (data.match_data.first_base !== undefined) {
                        const firstBase = document.querySelector('.base.first');
                        if (firstBase) firstBase.classList.toggle('active', data.match_data.first_base);
                    }
                    if (data.match_data.second_base !== undefined) {
                        const secondBase = document.querySelector('.base.second');
                        if (secondBase) secondBase.classList.toggle('active', data.match_data.second_base);
                    }
                    if (data.match_data.third_base !== undefined) {
                        const thirdBase = document.querySelector('.base.third');
                        if (thirdBase) thirdBase.classList.toggle('active', data.match_data.third_base);
                    }
                    
                    // 볼/스트라이크/아웃 카운트 업데이트
                    if (data.match_data.balls !== undefined) {
                        document.querySelectorAll('.count-dot.ball').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.balls);
                        });
                    }
                    if (data.match_data.strikes !== undefined) {
                        document.querySelectorAll('.count-dot.strike').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.strikes);
                        });
                    }
                    if (data.match_data.outs !== undefined) {
                        document.querySelectorAll('.count-dot.out').forEach((el, index) => {
                            el.classList.toggle('active', index < data.match_data.outs);
                        });
                    }
                }
            }
        });

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamElement = document.getElementById('home-team-name');
                const awayTeamElement = document.getElementById('away-team-name');
                
                if (homeTeamElement && data.home_team) {
                    homeTeamElement.textContent = data.home_team;
                    console.log('홈팀명 업데이트:', data.home_team);
                }
                if (awayTeamElement && data.away_team) {
                    awayTeamElement.textContent = data.away_team;
                    console.log('원정팀명 업데이트:', data.away_team);
                }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    console.log('종목 변경됨:', currentSportType);
                }
                
                // 점수 업데이트
                const homeScoreElement = document.querySelector('.home-team .team-score');
                const awayScoreElement = document.querySelector('.away-team .team-score');
                
                if (homeScoreElement && data.home_score !== undefined) {
                    homeScoreElement.textContent = data.home_score;
                }
                if (awayScoreElement && data.away_score !== undefined) {
                    awayScoreElement.textContent = data.away_score;
                }
            }
        });

        // 실시간 타이머 업데이트 이벤트 처리 (야구는 이닝 정보)
        socket.on('timer_updated', (data) => {
            console.log('=== 야구 실시간 타이머 업데이트 수신 ===');
            console.log('타이머 업데이트 데이터:', data);
            
            if (data.matchId === matchId) {
                // 야구에서는 이닝 정보를 업데이트할 수 있음
                // 필요에 따라 이닝 관련 업데이트 로직 추가
                console.log('야구 타이머 업데이트:', data);
            }
        });

        // CSV 파일 처리 및 타율, 출루율 계산 함수
        function processPlayerCSV(csvData) {
            // CSV 파일 파싱 (탭으로 구분된 CSV)
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split('\t').map(h => h.trim());
            const players = [];
            
            // 각 라인을 처리하여 선수 정보 추출
            for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue; // 빈 줄 건너뛰기
                
                const values = lines[i].split('\t').map(v => v.trim());
                const player = {};
                
                // 헤더에 따라 각 값 매핑
                headers.forEach((header, index) => {
                    player[header] = values[index] || '';
                });
                
                // 데이터 숫자 형식으로 변환
                const atBats = parseInt(player['타수'] || 0);
                const hits = parseInt(player['안타'] || 0);
                const homeRuns = parseInt(player['홈런'] || 0);
                const rbi = parseInt(player['타점'] || 0);
                const steals = parseInt(player['도루'] || 0);
                
                // 추가 통계 (CSV에는 없지만 계산에 필요)
                const walks = parseInt(player['볼넷'] || 0);  // 없으면 0으로 가정
                const hbp = parseInt(player['사구'] || 0);     // 없으면 0으로 가정
                const sf = parseInt(player['희생플라이'] || 0); // 없으면 0으로 가정
                
                // 타율 계산 (안타 / 타수)
                if (atBats > 0) {
                    player['타율'] = (hits / atBats).toFixed(3).substring(1);  // 앞의 0 제거, 소수점 3자리까지
                    if (!player['타율'].startsWith('.')) player['타율'] = '.' + player['타율'];  // 앞에 점 추가
                } else {
                    player['타율'] = '.000';
                }
                
                // 출루율 계산 (안타 + 볼넷 + 사구) / (타수 + 볼넷 + 사구 + 희생플라이)
                const onBaseNumerator = hits + walks + hbp;
                const onBaseDenominator = atBats + walks + hbp + sf;
                
                if (onBaseDenominator > 0) {
                    player['출루율'] = (onBaseNumerator / onBaseDenominator).toFixed(3).substring(1);
                    if (!player['출루율'].startsWith('.')) player['출루율'] = '.' + player['출루율'];
                } else {
                    player['출루율'] = '.000';
                }
                
                // 추가 값 확인
                if (!player['번호']) player['번호'] = i.toString();
                if (!player['이름']) player['이름'] = `선수${i}`;
                if (!player['포지션']) player['포지션'] = '미정';
                
                players.push(player);
            }
            
            return players;
        }
        
        // 선수 정보 업데이트 이벤트 처리
        socket.on('playerDataUpdated', function(data) {
            if (data.matchId === matchId) {
                console.log('선수 데이터 업데이트:', data);
                
                if (data.playerDataUrl) {
                    // JSON 파일에서 선수 데이터 가져오기
                    fetch(data.playerDataUrl)
                        .then(response => response.json())
                        .then(playerData => {
                            // 전역 변수에 선수 데이터 저장
                            window.playerData = playerData.players;
                            
                            console.log('선수 데이터 로드 완료:', playerData.players.length, '명');
                            
                            // 현재 타자/투수 정보 업데이트
                            if (data.batterIndex && playerData.players[data.batterIndex - 1]) {
                                const batter = playerData.players[data.batterIndex - 1];
                                updatePlayerInfo('.batter-info', batter);
                            }
                            
                            if (data.pitcherIndex && playerData.players[data.pitcherIndex - 1]) {
                                const pitcher = playerData.players[data.pitcherIndex - 1];
                                updatePlayerInfo('.pitcher-info', pitcher);
                            }
                        })
                        .catch(error => {
                            console.error('선수 데이터 불러오기 오류:', error);
                        });
                } else if (data.csvData) {
                    try {
                        // CSV 데이터 처리 (기존 방식 유지)
                        const players = processPlayerCSV(data.csvData);
                        
                        // 전역 변수에 선수 데이터 저장 (나중에 참조할 수 있도록)
                        window.playerData = players;
                        
                        console.log('선수 데이터 파싱 완료:', players.length, '명');
                        
                        // 현재 타자/투수 정보 업데이트
                        if (data.batterIndex && players[data.batterIndex - 1]) {
                            const batter = players[data.batterIndex - 1];
                            updatePlayerInfo('.batter-info', batter);
                        }
                        
                        if (data.pitcherIndex && players[data.pitcherIndex - 1]) {
                            const pitcher = players[data.pitcherIndex - 1];
                            updatePlayerInfo('.pitcher-info', pitcher);
                        }
                    } catch (error) {
                        console.error('선수 데이터 처리 중 오류 발생:', error);
                    }
                }
            }
        });
        
        // 선수 정보 패널 업데이트 함수
        function updatePlayerInfo(panelSelector, player) {
            const panel = document.querySelector(panelSelector);
            if (!panel) return;
            
            // 선수 번호 업데이트
            const numberElement = panel.querySelector('.player-number');
            if (numberElement) numberElement.textContent = player['번호'] || '';
            
            // 선수 이름 업데이트
            const nameElement = panel.querySelector('.player-name');
            if (nameElement) nameElement.textContent = player['이름'] || '';
            
            // 포지션 업데이트
            const positionElement = panel.querySelector('.player-position');
            if (positionElement) positionElement.textContent = player['포지션'] || '';
            
            // 타자 정보인 경우 통계 업데이트
            if (panelSelector === '.batter-info') {
                const stats = panel.querySelectorAll('.stat-item');
                if (stats.length >= 4) {
                    // 타율, 홈런, 타점, 출루율 업데이트
                    stats[0].querySelector('.stat-value').textContent = player['타율'] || '.000';
                    stats[1].querySelector('.stat-value').textContent = player['홈런'] || '0';
                    stats[2].querySelector('.stat-value').textContent = player['타점'] || '0';
                    stats[3].querySelector('.stat-value').textContent = player['출루율'] || '.000';
                }
            } 
            // 투수 정보인 경우 통계 업데이트
            else if (panelSelector === '.pitcher-info') {
                const stats = panel.querySelectorAll('.stat-item');
                if (stats.length >= 4) {
                    // 평균자책점, 승패, 투구 수, 탈삼진 업데이트
                    // 투수 관련 통계는 CSV에 없을 가능성이 높으므로 기본값 유지
                    if (player['평균자책점']) stats[0].querySelector('.stat-value').textContent = player['평균자책점'];
                    if (player['승패']) stats[1].querySelector('.stat-value').textContent = player['승패'];
                    if (player['투구수']) stats[2].querySelector('.stat-value').textContent = player['투구수'];
                    if (player['탈삼진']) stats[3].querySelector('.stat-value').textContent = player['탈삼진'];
                }
            }
        }

        // 현재 타자/투수 변경 이벤트 처리
        socket.on('currentPlayerChanged', function(data) {
            if (data.matchId === matchId) {
                console.log('현재 타자/투수 변경:', data);
                
                // 선수 데이터가 이미 로드되어 있는 경우 처리
                if (window.playerData) {
                    const players = window.playerData;
                    
                    // 타자 정보 업데이트
                    if (data.batterIndex && players[data.batterIndex - 1]) {
                        const batter = players[data.batterIndex - 1];
                        updatePlayerInfo('.batter-info', batter);
                    }
                    
                    // 투수 정보 업데이트
                    if (data.pitcherIndex && players[data.pitcherIndex - 1]) {
                        const pitcher = players[data.pitcherIndex - 1];
                        updatePlayerInfo('.pitcher-info', pitcher);
                    }
                }
            }
        });

        // 디자인 설정 로드 및 적용 함수
        async function loadDesignSettings() {
            try {
                const response = await fetch('/api/sport-overlay-design/BASEBALL');
                const result = await response.json();
                
                if (result.success) {
                    const design = result.design;
                    
                    // 스코어보드 위치 적용 (우측 하단 고정 위치로 설정)
                    const scoreboard = document.querySelector('.scoreboard');
                    if (scoreboard) {
                        scoreboard.style.position = 'fixed';
                        scoreboard.style.bottom = '20px';
                        scoreboard.style.right = '250px';
                        scoreboard.style.top = 'auto';
                        scoreboard.style.left = 'auto';
                    }
                    
                    // 홈팀 로고 위치 적용 (야구는 team-info.home-team 사용)
                    const homeLogo = document.querySelector('.team-info.home-team');
                    if (homeLogo && design.homeLogo) {
                        homeLogo.style.top = `${design.homeLogo.top}px`;
                        if (design.homeLogo.left !== undefined) {
                            homeLogo.style.left = `${design.homeLogo.left}px`;
                        }
                        if (design.homeLogo.right !== undefined) {
                            homeLogo.style.right = `${design.homeLogo.right}px`;
                        }
                    }
                    
                    // 어웨이팀 로고 위치 적용 (야구는 team-info.away-team 사용)
                    const awayLogo = document.querySelector('.team-info.away-team');
                    if (awayLogo && design.awayLogo) {
                        awayLogo.style.top = `${design.awayLogo.top}px`;
                        if (design.awayLogo.left !== undefined) {
                            awayLogo.style.left = `${design.awayLogo.left}px`;
                        }
                        if (design.awayLogo.right !== undefined) {
                            awayLogo.style.right = `${design.awayLogo.right}px`;
                        }
                    }
                    
                    // 경기 상태 위치 적용
                    const matchState = document.querySelector('.current-inning');
                    if (matchState && design.matchState) {
                        matchState.style.top = `${design.matchState.top}px`;
                        if (design.matchState.left !== undefined) {
                            matchState.style.left = `${design.matchState.left}px`;
                        }
                        if (design.matchState.right !== undefined) {
                            matchState.style.right = `${design.matchState.right}px`;
                        }
                    }
                    
                    // 홈팀 라인업 위치 적용
                    const homeLineup = document.querySelector('.batter-info');
                    if (homeLineup && design.homeLineup) {
                        homeLineup.style.top = `${design.homeLineup.top}px`;
                        if (design.homeLineup.left !== undefined) {
                            homeLineup.style.left = `${design.homeLineup.left}px`;
                        }
                        if (design.homeLineup.right !== undefined) {
                            homeLineup.style.right = `${design.homeLineup.right}px`;
                        }
                    }
                    
                    // 어웨이팀 라인업 위치 적용
                    const awayLineup = document.querySelector('.pitcher-info');
                    if (awayLineup && design.awayLineup) {
                        awayLineup.style.top = `${design.awayLineup.top}px`;
                        if (design.awayLineup.left !== undefined) {
                            awayLineup.style.left = `${design.awayLineup.left}px`;
                        }
                        if (design.awayLineup.right !== undefined) {
                            awayLineup.style.right = `${design.awayLineup.right}px`;
                        }
                    }
                    
                    // 오버레이 이미지 위치 적용
                    const overlayImage = document.getElementById('overlayImage');
                    if (overlayImage && design.overlayImage) {
                        overlayImage.style.top = `${design.overlayImage.top}px`;
                        if (design.overlayImage.left !== undefined) {
                            overlayImage.style.left = `${design.overlayImage.left}px`;
                        }
                        if (design.overlayImage.width !== undefined) {
                            overlayImage.style.width = `${design.overlayImage.width}px`;
                        }
                        if (design.overlayImage.height !== undefined) {
                            overlayImage.style.height = `${design.overlayImage.height}px`;
                        }
                    }
                    
                    // 타이머 위치 적용
                    const timer = document.querySelector('.match-time');
                    if (timer && design.timer) {
                        if (design.timer.marginLeft !== undefined) {
                            timer.style.marginLeft = `${design.timer.marginLeft}px`;
                        }
                    }
                    
                    console.log('야구 디자인 설정 적용 완료');
                }
            } catch (error) {
                console.error('야구 디자인 설정 로드 오류:', error);
            }
        }

        // 초기 팀 색상 설정
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // 디자인 설정 로드 및 적용
                await loadDesignSettings();
                
                // 팀 로고 정보 가져오기
                const response = await fetch('/api/team-logo-map/BASEBALL');
                if (!response.ok) {
                    throw new Error(`팀 로고 맵 로드 실패: ${response.status}`);
                }
                const data = await response.json();
                console.log('팀 로고맵 로드 성공:', data);
                
                // 홈팀 로고 설정
                const homeTeamName = '<%= match.home_team %>';
                const homeLogoInfo = data.teamLogoMap?.[homeTeamName];
                
                if (homeLogoInfo) {
                    const homeLogoContainer = document.querySelector('.team-info.home-team .team-logo-container');
                    if (homeLogoContainer) {
                        homeLogoContainer.style.backgroundColor = homeLogoInfo.bgColor || '#ffffff';
                        homeLogoContainer.innerHTML = `
                            <img src="${homeLogoInfo.path}" alt="${homeTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain;">
                        `;
                    }
                }
                
                // 원정팀 로고 설정
                const awayTeamName = '<%= match.away_team %>';
                const awayLogoInfo = data.teamLogoMap?.[awayTeamName];
                
                if (awayLogoInfo) {
                    const awayLogoContainer = document.querySelector('.team-info.away-team .team-logo-container');
                    if (awayLogoContainer) {
                        awayLogoContainer.style.backgroundColor = awayLogoInfo.bgColor || '#ffffff';
                        awayLogoContainer.innerHTML = `
                            <img src="${awayLogoInfo.path}" alt="${awayTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain;">
                        `;
                    }
                }

                // 팀 컬러 정보 로드 및 적용
                const homeTeamSection = document.getElementById('home-team-section');
                const awayTeamSection = document.getElementById('away-team-section');
                
                if (homeLogoInfo && homeTeamSection) {
                    // 홈팀 컬러가 team_logo_map.json에 저장되어 있으면 적용
                    if (homeLogoInfo.teamColor) {
                        homeTeamSection.style.backgroundColor = homeLogoInfo.teamColor;
                        console.log(`홈팀 컬러 적용: ${homeTeamName} -> ${homeLogoInfo.teamColor}`);
                    }
                }
                
                if (awayLogoInfo && awayTeamSection) {
                    // 원정팀 컬러가 team_logo_map.json에 저장되어 있으면 적용
                    if (awayLogoInfo.teamColor) {
                        awayTeamSection.style.backgroundColor = awayLogoInfo.teamColor;
                        console.log(`원정팀 컬러 적용: ${awayTeamName} -> ${awayLogoInfo.teamColor}`);
                    }
                }

                // 패널 타이틀 초기화 (팀 컬러 적용)
                const inningType = document.querySelector('.inning-indicator')?.classList.contains('bottom') ? 'bottom' : 'top';
                updatePanelTitles(inningType);
                
            } catch (error) {
                console.error('팀 로고 정보 로드 중 오류 발생:', error);
            }
        });


        // 색상을 투명도가 있는 색상으로 변환하는 헬퍼 함수
        function convertToTransparentColor(color, alpha) {
            // RGB 또는 RGBA 형식인 경우
            if (color.startsWith('rgb')) {
                const rgbValues = color.match(/\d+/g);
                if (rgbValues && rgbValues.length >= 3) {
                    return `rgba(${rgbValues[0]}, ${rgbValues[1]}, ${rgbValues[2]}, ${alpha})`;
                }
            }
            
            // HEX 형식인 경우
            if (color.startsWith('#')) {
                const r = parseInt(color.substr(1, 2), 16);
                const g = parseInt(color.substr(3, 2), 16);
                const b = parseInt(color.substr(5, 2), 16);
                return `rgba(${r}, ${g}, ${b}, ${alpha})`;
            }
            
            // 기본값으로 검은색 반투명 배경 반환
            return `rgba(0, 0, 0, ${alpha})`;
        }

        // 팀명 길이에 따른 폰트 크기 조절
        function adjustTeamNameSize() {
            try {
                const homeTeamHeader = document.querySelector('.team-section .team-info:first-child .team-header');
                const awayTeamHeader = document.querySelector('.team-section .team-info:last-child .team-header');
                
                if (!homeTeamHeader || !awayTeamHeader) {
                    console.error('팀 헤더 요소를 찾을 수 없음');
                    return;
                }
                
                function adjustSize(element) {
                    const text = element.textContent;
                    console.log('팀 이름 크기 조절:', {
                        team: element.closest('.team-info').classList.contains('home-team') ? '홈팀' : '원정팀',
                        text,
                        length: text.length
                    });
                    
                    // 기존 클래스 제거
                    element.classList.remove('long', 'very-long');
                    
                    // 텍스트 길이에 따라 클래스 추가
                    if (text.length > 10) {
                        element.classList.add('very-long');
                        console.log('매우 긴 텍스트 적용');
                    } else if (text.length > 8) {
                        element.classList.add('long');
                        console.log('긴 텍스트 적용');
                    }
                }
                
                adjustSize(homeTeamHeader);
                adjustSize(awayTeamHeader);
                
                console.log('팀 이름 크기 조절 완료');
            } catch (error) {
                console.error('팀 이름 크기 조절 중 오류 발생:', error);
            }
        }
        
        // 팀명 업데이트 시 크기 조절
        socket.on('teamHeaderChanged', function(data) {
            if (data.matchId === matchId) {
                const homeTeamHeader = document.querySelector('.team-section .team-info:first-child .team-header');
                const awayTeamHeader = document.querySelector('.team-section .team-info:last-child .team-header');
                
                if (homeTeamHeader) homeTeamHeader.textContent = data.homeHeader;
                if (awayTeamHeader) awayTeamHeader.textContent = data.awayHeader;
                
                adjustTeamNameSize();
            }
        });
        
        // 팀 로고 변경 이벤트 처리
        socket.on('teamLogoUpdated', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType || data.team;
                const logoPath = data.logoPath;
                const logoBgColor = data.logoBgColor || '#ffffff';
                
                console.log('로고 업데이트 이벤트 수신:', {
                    teamType,
                    logoPath,
                    logoBgColor,
                    matchId: data.matchId
                });
                
                const logoContainer = document.querySelector(`.team-info.${teamType}-team .team-logo-container`);
                if (logoContainer) {
                    // 배경색 적용
                    logoContainer.style.backgroundColor = logoBgColor;
                    console.log(`${teamType}팀 로고 컨테이너 배경색 적용:`, {
                        container: logoContainer,
                        bgColor: logoBgColor,
                        appliedColor: logoContainer.style.backgroundColor
                    });
                    
                    // 로고 이미지 업데이트
                    if (logoPath) {
                        const img = document.createElement('img');
                        img.src = logoPath;
                        img.alt = `${teamType}팀 로고`;
                        img.className = 'team-logo';
                        img.onload = () => {
                            console.log(`${teamType}팀 로고 이미지 로드 완료:`, logoPath);
                        };
                        img.onerror = (error) => {
                            console.error(`${teamType}팀 로고 이미지 로드 실패:`, error);
                            logoContainer.innerHTML = `<div class="team-logo-placeholder"></div>`;
                        };
                        logoContainer.innerHTML = '';
                        logoContainer.appendChild(img);
                    } else {
                        logoContainer.innerHTML = `<div class="team-logo-placeholder"></div>`;
                        console.log(`${teamType}팀 로고 제거됨`);
                    }
                } else {
                    console.error(`${teamType}팀 로고 컨테이너를 찾을 수 없음`);
                }
            }
        });

        // 팀 로고 삭제 이벤트 처리
        socket.on('teamLogoRemoved', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType || data.team;
                
                console.log('팀 로고 삭제 이벤트 수신:', {
                    teamType,
                    matchId: data.matchId
                });
                
                const logoContainer = document.querySelector(`.team-info.${teamType}-team .team-logo-container`);
                if (logoContainer) {
                    logoContainer.innerHTML = `<div class="team-logo-placeholder"></div>`;
                    console.log(`${teamType}팀 로고 삭제 완료`);
                } else {
                    console.error(`${teamType}팀 로고 컨테이너를 찾을 수 없음`);
                }
            }
        });
        
        // 팀 색상 업데이트 이벤트 처리
        socket.on('teamColorUpdate', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                const teamColor = data.teamColor;
                
                console.log('팀 색상 업데이트 이벤트 수신:', {
                    teamType,
                    teamColor,
                    matchId: data.matchId
                });
                
                const teamSection = document.getElementById(`${teamType}-team-section`);
                if (teamSection) {
                    teamSection.style.backgroundColor = teamColor;
                    console.log(`${teamType}팀 섹션 색상 업데이트:`, {
                        section: teamSection,
                        color: teamColor,
                        appliedColor: teamSection.style.backgroundColor
                    });
                    
                    // 타자/투수 패널의 색상도 업데이트
                    const inningType = document.querySelector('.inning-indicator').classList.contains('bottom') ? 'bottom' : 'top';
                    updatePanelTitles(inningType);
                } else {
                    console.error(`${teamType}팀 섹션을 찾을 수 없음`);
                }
            }
        });

        // 이닝 타입에 따라 패널 타이틀 변경 함수
        function updatePanelTitles(inningType) {
            try {
                const homeTeamName = document.querySelector('.team-info.home-team .team-header')?.textContent || 'HOME';
                const awayTeamName = document.querySelector('.team-info.away-team .team-header')?.textContent || 'AWAY';
                const batterPanel = document.querySelector('.batter-info .panel-title');
                const pitcherPanel = document.querySelector('.pitcher-info .panel-title');
                
                if (!batterPanel || !pitcherPanel) {
                    console.error('패널 타이틀 요소를 찾을 수 없음');
                    return;
                }
                
                // 팀 색상 가져오기
                const homeTeamSection = document.getElementById('home-team-section');
                const awayTeamSection = document.getElementById('away-team-section');
                
                if (!homeTeamSection || !awayTeamSection) {
                    console.error('팀 섹션 요소를 찾을 수 없음');
                    return;
                }
                
                const homeTeamColor = homeTeamSection.style.backgroundColor || '#333333';
                const awayTeamColor = awayTeamSection.style.backgroundColor || '#333333';
                
                console.log('패널 타이틀 업데이트:', {
                    inningType,
                    homeTeamName,
                    awayTeamName,
                    homeTeamColor,
                    awayTeamColor
                });
                
                if (inningType === 'top') {
                    // 초(top) 이닝: 홈팀 타자, 어웨이팀 투수
                    batterPanel.style.backgroundColor = homeTeamColor;
                    pitcherPanel.style.backgroundColor = awayTeamColor;
                    
                    // 패널 제목을 팀명으로 변경
                    batterPanel.textContent = homeTeamName;  // 홈팀 타자
                    pitcherPanel.textContent = awayTeamName; // 어웨이팀 투수
                    
                    console.log('초 이닝: 홈팀 타자, 어웨이팀 투수');
                } else {
                    // 말(bottom) 이닝: 어웨이팀 타자, 홈팀 투수
                    batterPanel.style.backgroundColor = awayTeamColor;
                    pitcherPanel.style.backgroundColor = homeTeamColor;
                    
                    // 패널 제목을 팀명으로 변경
                    batterPanel.textContent = awayTeamName;  // 어웨이팀 타자
                    pitcherPanel.textContent = homeTeamName; // 홈팀 투수
                    
                    console.log('말 이닝: 어웨이팀 타자, 홈팀 투수');
                }
            } catch (error) {
                console.error('패널 타이틀 업데이트 중 오류 발생:', error);
            }
        }

        // 팀 이름 업데이트 이벤트
        socket.on('teamNameUpdated', function(data) {
            console.log('팀명 업데이트 이벤트 수신 (첫 번째 리스너):', data);
            
            if (data.matchId === matchId) {
                const team = data.team;
                const teamName = data.teamName;
                
                // 팀 헤더 업데이트
                const teamHeader = document.querySelector(`.team-info.${team}-team .team-header`);
                if (teamHeader) {
                    teamHeader.textContent = teamName;
                }
                
                // 이닝 테이블의 팀명 업데이트
                const teamTableRows = document.querySelectorAll('.innings-table tbody tr');
                if (teamTableRows.length >= 2) {
                    if (team === 'home') {
                        // 홈팀은 첫 번째 행
                        const homeTeamName = teamTableRows[0].querySelector('.team-name');
                        if (homeTeamName) {
                            homeTeamName.textContent = teamName;
                        }
                    } else if (team === 'away') {
                        // 원정팀은 두 번째 행
                        const awayTeamName = teamTableRows[1].querySelector('.team-name');
                        if (awayTeamName) {
                            awayTeamName.textContent = teamName;
                        }
                    }
                }
                
                // 팀명 요소들 업데이트
                const teamNameElements = document.querySelectorAll(`.team-info.${team}-team .team-name`);
                teamNameElements.forEach(element => {
                    element.textContent = teamName;
                });
                
                // 팀 이름 크기 조절
                adjustTeamNameSize();
                
                // 타자/투수 패널의 제목도 업데이트
                updatePanelTitles(document.querySelector('.inning-indicator').classList.contains('bottom') ? 'bottom' : 'top');
                
                console.log(`${team}팀명 업데이트 완료: ${teamName}`);
            }
        });

        // 스코어 업데이트 이벤트
        socket.on('scoreUpdated', (data) => {
            console.log('스코어 업데이트:', data);
            
            // 스코어와 기타 정보 업데이트
            document.querySelector('.home-team .team-score').textContent = data.home_score || '0';
            document.querySelector('.away-team .team-score').textContent = data.away_score || '0';
            
            // 베이스 상태 업데이트
            document.querySelector('.base.first').classList.toggle('active', data.match_data?.first_base);
            document.querySelector('.base.second').classList.toggle('active', data.match_data?.second_base);
            document.querySelector('.base.third').classList.toggle('active', data.match_data?.third_base);
            
            // 볼/스트라이크/아웃 카운트 업데이트
            document.querySelectorAll('.count-dot.ball').forEach((dot, index) => {
                dot.classList.toggle('active', (data.match_data?.balls || 0) >= index + 1);
            });
            document.querySelectorAll('.count-dot.strike').forEach((dot, index) => {
                dot.classList.toggle('active', (data.match_data?.strikes || 0) >= index + 1);
            });
            document.querySelectorAll('.count-dot.out').forEach((dot, index) => {
                dot.classList.toggle('active', (data.match_data?.outs || 0) >= index + 1);
            });
            
            // 이닝 표시 업데이트
            document.querySelector('.current-inning').innerHTML = `
                ${data.match_data?.current_inning || '1'}
                <div class="inning-indicator ${data.match_data?.inning_type === 'bottom' ? 'bottom' : 'top'}"></div>
            `;
            
            // 이닝 스코어 업데이트
            if (data.match_data?.innings) {
                for (let i = 1; i <= 9; i++) {
                    document.getElementById(`teamA-inning-${i}`).textContent = data.match_data.innings[`home_${i}`] || '0';
                    document.getElementById(`teamB-inning-${i}`).textContent = data.match_data.innings[`away_${i}`] || '0';
                }
            }
            
            // 이닝별 점수 합계 계산
            let homeTotalScore = 0;
            let awayTotalScore = 0;
            
            if (data.match_data?.innings) {
                for (let i = 1; i <= 9; i++) {
                    homeTotalScore += parseInt(data.match_data.innings[`home_${i}`] || '0');
                    awayTotalScore += parseInt(data.match_data.innings[`away_${i}`] || '0');
                }
            } else {
                homeTotalScore = data.home_score || 0;
                awayTotalScore = data.away_score || 0;
            }
            
            // 히트와 에러 업데이트 (합계 점수 사용)
            document.querySelector('.innings-table tbody tr:first-child td.total:nth-child(11)').textContent = homeTotalScore;
            document.querySelector('.innings-table tbody tr:first-child td.total:nth-child(12)').textContent = data.match_data?.home_hits || '0';
            document.querySelector('.innings-table tbody tr:first-child td.total:nth-child(13)').textContent = data.match_data?.home_errors || '0';
            document.querySelector('.innings-table tbody tr:last-child td.total:nth-child(11)').textContent = awayTotalScore;
            document.querySelector('.innings-table tbody tr:last-child td.total:nth-child(12)').textContent = data.match_data?.away_hits || '0';
            document.querySelector('.innings-table tbody tr:last-child td.total:nth-child(13)').textContent = data.match_data?.away_errors || '0';
            
            // 이닝 타입에 따라 패널 타이틀 업데이트
            updatePanelTitles(data.match_data?.inning_type);
        });

        // 야구 이닝 스코어 업데이트 이벤트 처리
        socket.on('baseball_inning_score_updated', (data) => {
            console.log('=== 야구 이닝 스코어 업데이트 수신 (오버레이) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);
            
            if (data.matchId === matchId) {
                const { team, inning, score, innings, home_score, away_score } = data;
                
                // 이닝 스코어 테이블 업데이트
                const teamElementId = team === 'home' ? `teamA-inning-${inning}` : `teamB-inning-${inning}`;
                const inningElement = document.getElementById(teamElementId);
                
                if (inningElement) {
                    inningElement.textContent = score;
                    console.log(`이닝 스코어 업데이트: ${team}팀 ${inning}회 = ${score}`);
                }
                
                // 전체 이닝 스코어 업데이트 (모든 이닝)
                if (innings) {
                    for (let i = 1; i <= 9; i++) {
                        const homeInningElement = document.getElementById(`teamA-inning-${i}`);
                        const awayInningElement = document.getElementById(`teamB-inning-${i}`);
                        
                        if (homeInningElement && innings[`home_${i}`] !== undefined) {
                            homeInningElement.textContent = innings[`home_${i}`] || '0';
                        }
                        if (awayInningElement && innings[`away_${i}`] !== undefined) {
                            awayInningElement.textContent = innings[`away_${i}`] || '0';
                        }
                    }
                }
                
                // 서버에서 계산된 총 점수 사용
                const homeTotal = home_score || 0;
                const awayTotal = away_score || 0;
                
                // 총 점수 표시 업데이트
                const homeScoreElement = document.querySelector('.home-team .team-score');
                const awayScoreElement = document.querySelector('.away-team .team-score');
                
                if (homeScoreElement) homeScoreElement.textContent = homeTotal;
                if (awayScoreElement) awayScoreElement.textContent = awayTotal;
                
                // 이닝 스코어보드의 총 점수도 업데이트
                const homeTotalElement = document.querySelector('.innings-table tbody tr:first-child td.total:nth-child(11)');
                const awayTotalElement = document.querySelector('.innings-table tbody tr:last-child td.total:nth-child(11)');
                
                if (homeTotalElement) homeTotalElement.textContent = homeTotal;
                if (awayTotalElement) awayTotalElement.textContent = awayTotal;
                
                console.log(`총 점수 업데이트: 홈팀 ${homeTotal}, 원정팀 ${awayTotal}`);
                console.log('=== 야구 이닝 스코어 업데이트 처리 완료 (오버레이) ===');
            } else {
                console.log('매치 ID가 일치하지 않음 - 이벤트 무시');
            }
        });

        // 야구 오버레이 표시/숨김 업데이트 이벤트 처리
        socket.on('baseball_overlay_visibility_updated', (data) => {
            console.log('야구 오버레이 표시 상태 업데이트 수신:', data);
            
            if (data.matchId === matchId) {
                const { overlayType, isVisible, overlay_visibility } = data;
                
                // 각 오버레이 요소의 표시/숨김 처리
                if (overlayType === 'batter') {
                    const batterInfo = document.querySelector('.batter-info');
                    if (batterInfo) {
                        batterInfo.style.display = isVisible ? 'block' : 'none';
                        console.log(`타자 정보 오버레이 ${isVisible ? '표시' : '숨김'}`);
                    }
                } else if (overlayType === 'pitcher') {
                    const pitcherInfo = document.querySelector('.pitcher-info');
                    if (pitcherInfo) {
                        pitcherInfo.style.display = isVisible ? 'block' : 'none';
                        console.log(`투수 정보 오버레이 ${isVisible ? '표시' : '숨김'}`);
                    }
                } else if (overlayType === 'innings') {
                    const inningsScoreboard = document.querySelector('.innings-scoreboard');
                    if (inningsScoreboard) {
                        inningsScoreboard.style.display = isVisible ? 'block' : 'none';
                        console.log(`이닝 스코어보드 오버레이 ${isVisible ? '표시' : '숨김'}`);
                    }
                }
                
                // 전체 오버레이 표시 상태 저장
                if (overlay_visibility) {
                    window.overlayVisibility = overlay_visibility;
                }
            }
        });

        // 야구 전용 팀 로고/컬러/배경색 실시간 반영

        // 팀 위치 변경 이벤트 처리
        socket.on('teamsSwapped', async function(data) {
            console.log('팀 위치 변경 이벤트 수신:', data);
            
            if (data.matchId === matchId) {
                // 팀명 업데이트
                const homeTeamElements = document.querySelectorAll('.team-info.home-team .team-header');
                const awayTeamElements = document.querySelectorAll('.team-info.away-team .team-header');
                
                homeTeamElements.forEach(element => {
                    element.textContent = data.home_team;
                });
                awayTeamElements.forEach(element => {
                    element.textContent = data.away_team;
                });
                
                // 점수 업데이트
                const homeScoreElements = document.querySelectorAll('.team-info.home-team .team-score');
                const awayScoreElements = document.querySelectorAll('.team-info.away-team .team-score');
                
                homeScoreElements.forEach(element => {
                    element.textContent = data.home_score;
                });
                awayScoreElements.forEach(element => {
                    element.textContent = data.away_score;
                });
                
                // 이닝 테이블의 팀명도 업데이트
                const homeTableNameElements = document.querySelectorAll('.innings-table tbody tr:first-child .team-name');
                const awayTableNameElements = document.querySelectorAll('.innings-table tbody tr:last-child .team-name');
                
                homeTableNameElements.forEach(element => {
                    element.textContent = data.home_team;
                });
                awayTableNameElements.forEach(element => {
                    element.textContent = data.away_team;
                });
                
                // 팀 로고 업데이트
                try {
                    const response = await fetch('/api/team-logo-map/BASEBALL');
                    if (response.ok) {
                        const logoData = await response.json();
                        
                        // 홈팀 로고 업데이트
                        const homeLogoInfo = logoData.teamLogoMap?.[data.home_team];
                        const homeLogoContainers = document.querySelectorAll('.team-info.home-team .team-logo-container');
                        homeLogoContainers.forEach(container => {
                            if (homeLogoInfo) {
                                container.style.backgroundColor = homeLogoInfo.bgColor || '#ffffff';
                                container.innerHTML = `
                                    <img src="${homeLogoInfo.path}" alt="${data.home_team} 로고" class="team-logo">
                                `;
                            } else {
                                container.style.backgroundColor = '#f8f9fa';
                                container.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                            }
                        });
                        
                        // 원정팀 로고 업데이트
                        const awayLogoInfo = logoData.teamLogoMap?.[data.away_team];
                        const awayLogoContainers = document.querySelectorAll('.team-info.away-team .team-logo-container');
                        awayLogoContainers.forEach(container => {
                            if (awayLogoInfo) {
                                container.style.backgroundColor = awayLogoInfo.bgColor || '#ffffff';
                                container.innerHTML = `
                                    <img src="${awayLogoInfo.path}" alt="${data.away_team} 로고" class="team-logo">
                                `;
                            } else {
                                container.style.backgroundColor = '#f8f9fa';
                                container.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                            }
                        });
                    }
                } catch (error) {
                    console.error('팀 로고 업데이트 중 오류 발생:', error);
                }
                
                console.log('팀 위치 변경 완료');
            }
        });

        socket.on('baseballTeamLogoUpdated', function(data) {
            if (data.matchId !== matchId) return;
            
            console.log('야구 팀로고 업데이트 수신:', data);
            const { teamType, path, bgColor, teamColor } = data;
            
            // 팀로고와 배경색 업데이트
            const teamSelector = teamType === 'home' ? '.home-team' : '.away-team';
            const logoContainer = document.querySelector(`${teamSelector} .team-logo-container`);
            
            if (logoContainer) {
                if (path && path !== '') {
                    // 로고가 있는 경우
                    logoContainer.innerHTML = `<img src="${path}" alt="${teamType}팀 로고" class="team-logo">`;
                } else {
                    // 로고가 없는 경우 플레이스홀더 표시
                    const teamName = teamType === 'home' ? '<%= match.home_team %>' : '<%= match.away_team %>';
                    logoContainer.innerHTML = `<div class="team-logo-placeholder">${teamName.charAt(0)}</div>`;
                }
                
                // 배경색 적용
                logoContainer.style.backgroundColor = bgColor || '#ffffff';
            }
            
            // 팀 섹션 컬러 반영 (teamColor가 null이 아니고 유효한 값일 때만)
            if (teamColor && teamColor !== null && teamColor !== 'null') {
                const teamSection = document.getElementById(`${teamType}-team-section`);
                if (teamSection) {
                    teamSection.style.backgroundColor = teamColor;
                    console.log(`${teamType}팀 섹션 색상 업데이트:`, teamColor);
                    
                    // 타자/투수 패널의 색상도 업데이트
                    const inningType = document.querySelector('.inning-indicator')?.classList.contains('bottom') ? 'bottom' : 'top';
                    updatePanelTitles(inningType);
                }
            }
        });

        // 리스트 기능 관련 변수
        let currentMatchIndex = 0;
        let totalMatches = 0;
        let listId = null;
        
        <% if (typeof listId !== 'undefined' && listId) { %>
        currentMatchIndex = <%- currentMatchIndex || 0 %>;
        totalMatches = <%- totalMatches || 0 %>;
        listId = '<%- listId %>';
        
        // 리스트 정보 표시
        function showListInfo() {
            const listInfo = document.getElementById('listInfo');
            const listName = document.getElementById('listName');
            const matchCounter = document.getElementById('matchCounter');
            
            if (listInfo && listName && matchCounter) {
                listName.textContent = '리스트: <%= typeof listName !== "undefined" ? listName : "경기 리스트" %>';
                matchCounter.textContent = `경기 ${currentMatchIndex + 1} / ${totalMatches}`;
                listInfo.classList.add('show');
                
                // 3초 후 자동 숨김
                setTimeout(() => {
                    listInfo.classList.remove('show');
                }, 3000);
            }
        }
        
        // 다음 경기로 이동
        async function nextMatch() {
            if (currentMatchIndex < totalMatches - 1) {
                currentMatchIndex++;
                await loadCurrentMatch();
            }
        }
        
        // 이전 경기로 이동
        async function prevMatch() {
            if (currentMatchIndex > 0) {
                currentMatchIndex--;
                await loadCurrentMatch();
            }
        }
        
        // 현재 경기 로드
        async function loadCurrentMatch() {
            try {
                const response = await fetch(`/api/list/${listId}/current-match?index=${currentMatchIndex}`);
                if (!response.ok) throw new Error('경기 정보 로드 실패');
                
                const data = await response.json();
                
                // 페이지 새로고침으로 경기 변경
                window.location.href = `/list/${listId}/overlay?index=${currentMatchIndex}`;
            } catch (error) {
                console.error('경기 로드 오류:', error);
            }
        }
        
        // 키보드 이벤트 리스너 추가
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'ArrowLeft':
                    prevMatch();
                    break;
                case 'ArrowRight':
                    nextMatch();
                    break;
                case 'i':
                case 'I':
                    showListInfo();
                    break;
            }
        });
        
        // 페이지 로드 시 리스트 정보 표시
        window.addEventListener('load', function() {
            setTimeout(showListInfo, 1000);
        });
        <% } %>
    </script>
</body>
</html> 