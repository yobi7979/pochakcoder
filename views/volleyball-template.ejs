<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>배구 경기 오버레이</title>
    <script>
        // 전역 변수 설정
        window.matchId = '<%= match.id %>';
        window.sportType = 'VOLLEYBALL';
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700;900&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/animations.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/unified-overlay-logo-loader.js"></script>
    <style>
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Noto Sans KR', Arial, sans-serif;
        }
        body {
            width: 1920px;
            height: 1080px;
            overflow: hidden;
            background-color: transparent;
            position: relative;
        }
        .overlay-container {
            width: 100%;
            height: 100%;
            position: relative;
        }

        /* 리스트 정보 표시 영역 */
        .list-info {
            position: absolute;
            top: 20px;
            right: 50px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000;
            display: none;
        }
        
        .list-info.show {
            display: block;
        }
        
        .list-info .list-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .list-info .match-counter {
            font-size: 12px;
            opacity: 0.8;
        }

        /* 배구 스코어보드 컨테이너 */
        .volleyball-scoreboard-container {
            position: absolute;
            top: 80px;
            left: 80px;
            width: 600px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(30, 30, 30, 0.95) 100%);
            border-radius: 8px;
            padding: 8px;
            color: white;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        /* 메인 스코어보드 (상단) */
        .main-scoreboard {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 4px;
            font-size: 18px;
            font-weight: bold;
            gap: 5px;
        }
        
        .total-score-section, .current-score-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0 10px;
        }
        
        .total-score {
            font-size: 2.5em;
            font-weight: bold;
            color: #fff;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border-radius: 10px;
            padding: 10px 20px;
            margin-bottom: 5px;
            min-width: 60px;
            text-align: center;
        }
        
        .current-score {
            font-size: 1.8em;
            font-weight: bold;
            color: #fff;            
        }

        /* 세트 정보 행 (하단) */
        .set-info-row {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: bold;
            gap: 5px;
        }

        /* 세트 승리 횟수 섹션 */
        .set-wins-section {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
        }

        .set-wins {
            font-size: 24px;
            font-weight: 900;
            color: #181818;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        /* 세트 득점 표시 (동그라미) */
        .set-wins-circle {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #ff6b6b;
            background-color: transparent;
            margin: 0 2px;
            transition: all 0.3s ease;
        }

        /* 세트 득점 시 채워진 원 */
        .set-wins-circle.filled {
            background-color: #ff6b6b;
            border-color: #ff6b6b;
        }

        /* 홈팀 세트 득점 */
        .set-wins-circle.home {
            border-color: #4ecdc4;
        }

        .set-wins-circle.home.filled {
            background-color: #4ecdc4;
            border-color: #4ecdc4;
        }

        /* 어웨이팀 세트 득점 */
        .set-wins-circle.away {
            border-color: #667eea;
        }

        .set-wins-circle.away.filled {
            background-color: #667eea;
            border-color: #667eea;
        }

        /* 팀 섹션 */
        .team-section {
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
            min-width: 120px;
            max-width: 140px;
            padding: 6px 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            margin: 0;
        }

        .team-section.home {
            background: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
        }

        .team-section.away {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .team-name {
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }

        /* 점수 섹션 */
        .score-section {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 50px;
            padding: 5px 10px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 6px;
            margin: 0 5px;
        }

        .team-score {
            font-size: 28px;
            font-weight: 900;
            color: #4ecdc4;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        /* 세트 정보 섹션 */
        .set-info-section {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 60px;
            padding: 5px 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 6px;
            margin: 0 5px;
        }

        .current-set {
            font-size: 14px;
            font-weight: bold;
            color: white;
        }

        /* 서브 섹션 (상단 중앙) */
        .serve-section {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            margin: 0 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 5px;
        }

        /* 세트 승리 횟수 표시 (좌우 배치) */
        .set-wins-display {
            position: absolute;
            top: 420px;
            left: 80px;
            width: 420px;
            height: 40px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            font-weight: bold;
        }

        .set-wins-section {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .set-wins-section.home {
            flex-direction: row;
        }

        .set-wins-section.away {
            flex-direction: row-reverse;
        }

        .set-wins-label {
            font-size: 14px;
            color: #ccc;
        }

        .set-wins-count {
            font-size: 24px;
            font-weight: 900;
            color: #0f0f0f;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .set-wins-divider {
            margin: 0 15px;
            font-size: 20px;
            color: #ffffff;
        }

        .score-section {
            flex: 0 0 100px;
            width: 100px;
            max-width: 100px;
            min-width: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.8);
            gap: 8px;
        }

        .set-score-display {
            font-size: 24px;
            font-weight: 900;
            text-align: center;
            margin-bottom: 0;
        }

        .set-score-display .home-set-wins,
        .set-score-display .away-set-wins {
            color: #050505;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .set-score-display .set-divider {
            color: #ffffff;
            margin: 0 8px;
        }

        .set-info {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            gap: 6px;
            font-size: 10px;
        }

        .current-set {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2px 6px;
            border-radius: 8px;
            font-weight: bold;
            color: white;
        }

        .serve-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .serve-triangle {
            width: 0;
            height: 0;
            animation: pulse 1.5s infinite;
            display: inline-block;
        }

    /* 홈팀 서브권 (오른쪽 화살표) */
    .serve-triangle.home {
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-left: 15px solid #ffff00;
       
    }

    /* 어웨이팀 서브권 (왼쪽 화살표) */
    .serve-triangle.away {
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-right: 15px solid #ffff00;
        
    }

        @keyframes pulse {
            0% {
                opacity: 1;
                transform: scale(1);
            }
            50% {
                opacity: 0.7;
                transform: scale(1.1);
            }
            100% {
                opacity: 1;
                transform: scale(1);
            }
        }


        /* 배구 세트 승리 횟수 표시 박스 */
        .set-wins-box {
            position: absolute;
            top: 102px;
            left: 80px;
            width: 450px;
            height: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            font-weight: bold;
            text-align: center;
            padding: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.2);
            box-sizing: border-box;
            z-index: 9999;
            opacity: 0; /* 초기에는 투명 */
            transition: opacity 0.3s ease; /* 부드러운 전환 효과 */
        }

        
        /* 배구는 승부차기가 없으므로 승부차기 관련 CSS 제거 */

        .scoreboard-extra-box.show {
            opacity: 1; /* 보일 때는 완전 불투명 */
        }
        
        
        /* 하단 스트립 */
        .bottom-strip {
            position: fixed;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            width: 1200px;
            height: auto; /* 높이를 자동으로 조정 */
            min-height: 140px; /* 최소 높이 설정 */
            background: linear-gradient(135deg, rgba(0, 50, 100, 0.8), rgba(0, 100, 150, 0.8));
            border: 3px solid #00bfff;
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            transition: transform 0.3s ease; /* 위치 변화만 애니메이션 */
        }
        
        /* 상단 구역: 대회명 */
        .strip-top-section {
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, rgba(0, 50, 100, 0.8), rgba(0, 100, 150, 0.8));
            border-bottom: 2px solid #00bfff;
            border-radius: 17px 17px 0 0;
        }
        
        .strip-tournament-title {
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 32px;
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            /*text-shadow: 0 0 15px rgba(0, 191, 255, 0.9);*/
            margin: 0;
            letter-spacing: 2px;
        }
        
        /* 하단 구역: 팀 정보 */
        /* 중앙 구역: 득점 정보 */
        .strip-center-section {
            height: 120px; /* 기본 높이 */
            background: linear-gradient(135deg, rgba(0, 30, 60, 0.9), rgba(0, 50, 100, 0.9));
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 5px 20px; /* 10px 40px → 5px 20px로 줄임 */
            border-top: 1px solid #00bfff;
            border-bottom: 1px solid #00bfff;
            transition: height 0.3s ease; /* 부드러운 높이 변화 */
            overflow: hidden; /* 내용이 넘치지 않도록 */
        }
        
        .strip-goals-container {
            display: flex;
            justify-content: space-between;
            width: 100%;
            height: 100%;
            gap: 20px;
        }
        
        .strip-home-goals {
            width: 45%;
            display: flex;
            flex-direction: column-reverse; /* 아래에서부터 위로 쌓기 */
            gap: 2px;
            overflow: hidden;
            max-height: none;
        }
        
        .strip-away-goals {
            width: 45%;
            display: flex;
            flex-direction: column-reverse; /* 아래에서부터 위로 쌓기 */
            gap: 2px;
            overflow: hidden;
            max-height: none;
        }
        
        .goals-row {
            display: flex;
            gap: 5px; /* 2개 득점 박스 사이 간격 */
            margin: 2px 0;
        }
        
        .strip-home-goals .goals-row {
            flex-direction: row; /* 홈팀은 왼쪽부터 채워짐 */
        }
        
        .goal-item {
            width: 50%; /* 2명 박스와 동일한 크기 유지 */
            background: rgba(0, 191, 255, 0.2);
            padding: 6px 8px; /* 기존보다 작게 */
            border-radius: 8px; /* 기존 12px → 8px */
            border: 1px solid #00bfff;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 16px; /* 기존 13px → 11px */
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            box-shadow: 0 0 8px rgba(0, 191, 255, 0.3);
            transition: all 0.3s ease;
            line-height: 1.4;
            min-height: 20px; /* 기존 28px → 20px */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .goal-item:hover {
            background: rgba(0, 191, 255, 0.3);
            box-shadow: 0 0 12px rgba(0, 191, 255, 0.5);
        }

        .goal-item.empty {
            background: transparent;
            border: 1px solid transparent;
            box-shadow: none;
        }
        
        .strip-bottom-section {
            position: relative;
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 40px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(20, 20, 40, 0.9));
            border-radius: 0 0 17px 17px;
            flex-shrink: 0; /* 하단 섹션 크기 고정 */
        }
        
        .strip-team-section {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .strip-team-section.home {
            padding-left: 40px;
        }
        
        .strip-team-section.away {
            padding-right: 40px;
        }
        
        .strip-team-logo {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
        }
        
        .strip-team-logo.home-logo {
            left: -70px;
        }
        
        .strip-team-logo.away-logo {
            right: -70px;
        }
        
        .strip-team-info {
            display: flex;
            align-items: center;
            gap: 50px;
        }
        
        .strip-team-score {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            z-index: 5;
        }
        
        /* 홈팀 점수 위치 */
        .strip-team-score#strip-home-score {
            left: calc(50% - 140px);
        }
        
        /* 어웨이이 점수 위치 */
        .strip-team-score#strip-away-score {
            right: calc(50% - 140px);
        }
        
        .strip-team-logo {
            top: 30px;
            width: 100px;
            height: 60px;
            border-radius: 10px;
            /*border: 1px solid #ffffff;*/
            /*box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);*/
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: relative;
        }
        
        .strip-team-logo img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            padding: 5px;
            box-sizing: border-box;
        }
        
        .strip-team-logo-placeholder {
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #333, #555);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #ffffff;
            font-size: 14px;
            font-weight: bold;
        }

        .strip-team-name {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 40px;
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 400px;
            z-index: 5;
            /* text-shadow: 0 0 5px rgba(255, 255, 255, 0.5); */
        }
        
        .strip-team-name#strip-home-name {
            left: calc(50% + 200px);
        }
        
        .strip-team-name#strip-away-name {
            left: calc(50% - 200px);
        }
        
        .strip-team-score {
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 55px;
            font-weight: bold;
            color: #00bfff;
            display: flex;
            align-items: center;
            justify-content: center;
            /* text-shadow: 0 0 10px rgba(0, 191, 255, 0.8); */
        }
        
        .strip-center {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
        
        .strip-match-state {
            background: rgba(0, 191, 255, 0.5);
            padding: 10px 20px;
            border-radius: 20px;
            border: 2px solid #00bfff;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 24px;
            font-weight: bold;
            color: #ffffff;
            text-shadow: 0 0 10px rgba(0, 191, 255, 0.8);
            box-shadow: 0 0 15px rgba(0, 191, 255, 0.3);
        }
        
        /* 중앙 구역: 팀 로고 + 팀명 */
        .vs-middle-section {
            height: 360px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, rgba(20, 20, 40, 0.9), rgba(40, 40, 60, 0.9));
            flex: 1;
        }
        
        /* 하단 구역: 추가 정보 */
        .vs-bottom-section {
            height: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, rgba(0, 50, 100, 0.8), rgba(0, 100, 150, 0.8));
            border-top: 2px solid #00bfff;
        }
        
        .vs-bottom-content {
            font-size: 24px;
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            text-shadow: 0 0 10px rgba(0, 191, 255, 0.8);
        }
        
        .vs-teams-section {
            display: flex;
            justify-content: space-around;
            align-items: center;
            width: 100%;
            height: 100%;
            padding: 20px;
        }
        
        .vs-team-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 640px;
        }
        
        .vs-team-logo {
            width: 352px;
            height: 264px;
            border-radius: 20px;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            border: 3px solid #161616;
            box-shadow: 0 0 20px rgba(3, 3, 3, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .vs-team-logo img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            padding: 10px;
            box-sizing: border-box;
        }
        
        
        .vs-team-name {
            font-size: 38px;
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            /*text-shadow: 0 0 5px rgba(255, 255, 255, 0.5);*/
            line-height: 1.2;
            max-width: 640px;
            word-wrap: break-word;
        }
        
        .vs-center-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 300px;
            height: 100%;
        }
        
        .vs-text {
            font-size: 64px;
            font-weight: bold;
            color: #ffffff;
            text-shadow: 0 0 15px rgba(0, 191, 255, 0.8);
            margin: 0;
        }

        .scoreboard.animate-slide {
            animation: slideIn 0.5s ease-in-out;
        }

        @keyframes slideIn {
            0% {
                transform: translateY(-100%);
                opacity: 1;
            }
            100% {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* 내부 요소들의 개별 애니메이션 제거 */
        .team-section, .score-section, .team-header, .team-content, .team-logo, .team-name,
        .score-display {
            transition: none;
            animation: none;
        }

        .team-section {
            flex: 1 1 0;
            min-width: 180px;
        }
        .score-section {
            flex: 0 0 80px;
            width: 80px;
            max-width: 80px;
            min-width: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        .team-name, .score-display {
            min-width: 0;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .team-section.home {
            background-color: rgb(0, 204, 51); /* rgba 대신 rgb 사용으로 완전 불투명 */
            border-radius: 8px 0 0 8px;
        }
        .team-section.away {
            background-color: rgb(0, 204, 51); /* rgba 대신 rgb 사용으로 완전 불투명 */
            border-radius: 0 8px 8px 0;
        }
        .team-header {
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            background-color: rgba(255, 255, 255, 0.1);
            /* 아래 추가: 화면에서 숨김 */
            visibility: hidden;
            opacity: 0;
        }
        .home .team-header {
            background-color: rgba(0, 0, 0, 0.6);
            border-radius: 8px 0 0 0;
        }
        .away .team-header {
            background-color: rgba(0, 0, 0, 0.6);
            border-radius: 0 8px 0 0;
        }
        .team-content {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 0 15px;
        }
        /* 외부 로고 섹션 스타일 */
        .team-logo-section {
            position: absolute;
            width: 40px;
            height: 30px;
            border-radius: 1px;
            overflow: hidden;
            /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3); */
            opacity: 1;
            z-index: 9999;
            transition: opacity 0.3s ease;
        }
        
        .team-logo-section.home-logo {
            top: 64px;
            left: 84px;
        }
        
        .team-logo-section.away-logo {
            top: 64px;
            right: 1392px;
        }
        
        .team-logo-section .team-logo {
            width: 100%;
            height: 100%;
            margin: 0;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: transparent; /* 기본 배경색을 투명하게 설정 */
        }
        
        .team-logo {
            width: 40px;
            height: 40px;
            margin-right: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
            overflow: hidden;
            background-color: transparent; /* 기본 배경색을 투명하게 설정 */
        }
        .away .team-logo {
            margin-right: 0;
            margin-left: 10px;
            /* 배경색은 JavaScript에서 동적으로 설정 */
        }
        .team-logo img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .team-logo.no-logo {
            font-size: 16px;
            color: rgba(255, 255, 255, 0.7);
        }
        .team-logo-placeholder {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            background-color: rgb(0, 0, 0); /* 완전 불투명한 검은색 */
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 24px;
        }
        .team-name {
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 20px;
            font-weight: bold;
            text-align: center;
            width: 100%;
            margin: 0 auto;
            padding: 0 4px;
            white-space: nowrap;
            overflow: visible;
            transition: transform 0.3s ease;
        }
        .home .team-name,
        .away .team-name {
            margin: 0;
            padding: 0 4px;
        }
        .score-display {
            margin-top: -2px;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            font-size: 28px;
            font-weight: bold;
            display: flex;
            align-items: center;
        }
        .score-divider {
            margin: 0 2px;
            color: rgba(255, 255, 255, 0.5);
        }
            padding: -10px 12px;
            min-width: 80px;
            text-align: center;
            background-color: rgb(50, 50, 50);
            border-radius: 3px;
        }
        
        /* 오버레이 이미지 */
        .overlay-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 1920px;
            height: 1080px;
            z-index: 1000;
            display: none; /* 기본적으로 숨김 */
        }

        .overlay-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 0;
            box-shadow: none;
        }

        .overlay-image.show {
            display: block;
        }
        
        /* 라인업 오버레이 스타일 - 상단 스코어보드 좌측 기준 */
        .lineup-overlay {
            position: absolute;
            top: 180px; /* 스코어보드 아래 100px에서 300px 위로 이동 */
            left: 80px; /* 스코어보드와 동일한 좌측 위치 */
            width: 420px; /* 스코어보드와 동일한 너비 */          
            background: linear-gradient(135deg, rgba(0, 50, 100, 0.95), rgba(0, 100, 150, 0.95));
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            z-index: 1500;
            display: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        .lineup-overlay.show {
            display: block;
        }
        
        .lineup-container {
            width: 100%;
        }
        
        .lineup-header {
            text-align: center;
            margin-bottom: 20px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.3);
            padding-bottom: 15px;
        }
        
        .lineup-title {
            color: #fff;
            font-size: 24px;
            font-weight: 900;
            margin: 0 0 10px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
            letter-spacing: 2px;
        }
        
        .lineup-team-name {
            color: #007bff;
            font-size: 30px;
            font-weight: 700;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }
        
        .lineup-coach {
            color: #ffc107;
            font-size: 18px;
            font-weight: 600;
            margin: 5px 0 0 0;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }
        
        .lineup-players {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .lineup-player {
            background: rgba(0, 0, 0, 0.8);
            border-radius: 4px;
            padding: 2px 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
            margin-bottom: 1px;
            min-height: 24px;
        }
        
        .lineup-player:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateX(5px);
        }
        
        .player-number {
            color: #007bff;
            font-size: 16px;
            font-weight: 600;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            flex-shrink: 0;
            width: 18px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            line-height: 1;
        }
        
        
        .player-name {
            color: white;
            font-size: 20px;
            font-weight: 600;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            flex: 1;
            text-align: left;
            margin: 10px;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            height: 100%;
            line-height: 1;
        }
        
        .player-position {
            color: #007bff;
            font-size: 18px;
            font-weight: 600;
            font-family: 'Noto Sans KR', Arial, sans-serif;
            flex-shrink: 0;
            width: 20px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            line-height: 1;
        }
        
        .no-players {
            color: #ccc;
            text-align: center;
            font-style: italic;
            padding: 20px;
        }

        /* 경기 상태 표시 */
        .match-state {
            position: absolute;
            top: 65px;
            left: 230px;
            width: 150px;
            background-color: rgba(0, 0, 0, 0.0);
            border-radius: 6px;
            color: white;
            padding: 2px 0;
            font-size: 20px;
            min-width: 0;
            text-align: center;
            margin: 0;
            transition: all 0.3s ease;            
        }
        
        .match-state.animate-slide {
            animation: slideIn 0.5s ease-in-out;
        }
        
        @keyframes slideIn {
            0% {
                transform: translateY(-20px);
                opacity: 0;
            }
            100% {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* 선수 카드 */
        .player-card {
            position: absolute;
            bottom: 120px;
            width: 320px;
            height: 100px;
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 8px;
            color: white;
            overflow: hidden;
            display: flex;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        .player-card.visible {
            opacity: 1;
        }
        .player-card.home {
            left: 20px;
        }
        .player-card.away {
            right: 20px;
        }
        .player-header {
            width: 100px;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.3);
            padding: 10px;
        }
        .home .player-header {
            background-color: rgba(0, 204, 51, 0.4);
        }
        .away .player-header {
            background-color: rgba(0, 204, 51, 0.4);
        }
        .player-position {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
        }
        .player-info {
            flex: 1;
            padding: 15px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        .player-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .player-stats {
            display: flex;
            justify-content: space-between;
        }
        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .stat-value {
            font-size: 18px;
            font-weight: bold;
        }
        .stat-label {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
            margin-top: 3px;
        }
        
        /* 경기 정보 (하단) */
        .match-info {
            position: absolute;
            bottom: -100px;
            left: 25%;
            width: 800px;
            height: 80px;
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 8px;
            color: white;
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 0 20px;
            z-index: 1000;
            transition: bottom 0.5s ease;
            opacity: 0;
        }

        .match-info.visible {
            bottom: 20px;
            opacity: 1;
        }

        .info-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-width: 150px;
        }
        .info-label {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 5px;
        }
        .info-value {
            font-size: 20px;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        /* 스코어보드 애니메이션 스타일 */
        .animate-slide {
            animation: slideIn 0.5s ease-in-out;
        }
        
        @keyframes slideIn {
            0% {
                transform: translateY(-100%);
                opacity: 0;
            }
            100% {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        @keyframes slideInLeft {
            0% {
                transform: translateX(-120%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideInRight {
            0% {
                transform: translateX(120%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .scoreboard-row {
            display: flex;
            align-items: center;
            position: absolute;
            top: 58px;
            left: 80px;
            z-index: 10;
            overflow: visible;
            width: fit-content;
            min-width: 900px;
        }
        .scoreboard {
            position: static;
            margin-right: 0;
            width: auto;
            min-width: 550px;
            max-width: none;
        }
        .team-section {
            width: 32%;
            min-width: 180px;
            display: flex;
            flex-direction: column;
            position: relative;
            height: 42px;
        }
        .score-section {
            width: 32%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 1.0);
            height: 42px;
        }
        /* 배구 특화 스타일 */
        .set-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
            color: #fff;
            margin-top: 5px;
        }
        
        .serve-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .set-wins {
            font-size: 18px;
            font-weight: bold;
            color: #4ecdc4;
        }
        
        .team-name.small-font {
            font-size: 16px !important;
        }
    </style>
</head>
<body>
    <div class="overlay-container">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="list-info" id="listInfo">
            <div class="list-name" id="listName"></div>
            <div class="match-counter" id="matchCounter"></div>
        </div>
        <% } %>
        
        <!-- 팀 헤더 섹션 -->
        <div class="team-headers-section">
            <div class="team-header home">HOME</div>
            <div class="team-header away">AWAY</div>
        </div>
        
        <!-- 홈팀 로고 섹션 -->
        <div class="team-logo-section home-logo">
            <div class="team-logo" id="home-team-logo-container">
                <% if (match.match_data?.home_team_logo) { %>
                    <img src="<%= match.match_data.home_team_logo %>" alt="홈팀 로고">
                <% } else { %>
                    <div class="team-logo-placeholder"></div>
                <% } %>
            </div>
        </div>
        
        <!-- 어웨이팀 로고 섹션 -->
        <div class="team-logo-section away-logo">
            <div class="team-logo" id="away-team-logo-container">
                <% if (match.match_data?.away_team_logo) { %>
                    <img src="<%= match.match_data.away_team_logo %>" alt="원정팀 로고">
                <% } else { %>
                    <div class="team-logo-placeholder"></div>
                <% } %>
            </div>
        </div>

    <!-- 하단 스트립 -->
    <div class="bottom-strip" id="bottomStrip" style="display: none;">
        <!-- 상단 구역: 대회명 -->
        <div class="strip-top-section">
            <div class="strip-tournament-title" id="strip-tournament-title"><%= match.tournament_name || '' %></div>
        </div>
        
        <!-- 중앙 구역: 득점 정보 -->
        <div class="strip-center-section">
            <div class="strip-goals-container">
                <div class="strip-home-goals" id="strip-home-goals">
                    <!-- 홈팀 득점 목록이 여기에 표시됩니다 -->
                </div>
                <div class="strip-away-goals" id="strip-away-goals">
                    <!-- 어웨이팀 득점 목록이 여기에 표시됩니다 -->
                </div>
            </div>
        </div>
        
        <!-- 하단 구역: 팀 정보 -->
        <div class="strip-bottom-section">
            <div class="strip-team-section home">
                <div class="strip-team-logo home-logo">
                    <img id="strip-home-logo" src="" alt="홈팀 로고" style="display: none;">
                    <div class="strip-team-logo-placeholder" id="strip-home-placeholder">HOME</div>
                </div>
                <!-- 홈팀명 (홈팀 섹션 중심) -->
                <div class="strip-team-name" id="strip-home-name"><%= match.home_team || 'HOME' %></div>
            </div>
            
            <!-- 홈팀 점수 (중앙 고정) -->
            <div class="strip-team-score" id="strip-home-score">0</div>
            
            <div class="strip-center">
                <div class="strip-match-state" id="strip-match-state"><%= match.status || '전반' %></div>
            </div>
            
            <div class="strip-team-section away">
                <div class="strip-team-logo away-logo">
                    <img id="strip-away-logo" src="" alt="어웨이팀 로고" style="display: none;">
                    <div class="strip-team-logo-placeholder" id="strip-away-placeholder">AWAY</div>
                </div>
                <!-- 어웨이팀명 (어웨이팀 섹션 중심) -->
                <div class="strip-team-name" id="strip-away-name"><%= match.away_team || 'AWAY' %></div>
            </div>
            
            <!-- 어웨이팀 점수 (중앙 고정) -->
            <div class="strip-team-score" id="strip-away-score">0</div>
            </div>
        </div>
        
        <!-- 오버레이 이미지 -->
        <div class="overlay-image" id="overlayImage">
            <!-- 이미지는 JavaScript로 동적으로 로드됩니다 -->
        </div>
        
        <!-- 라인업 오버레이 - 한팀씩 표시 -->
        <div class="lineup-overlay" id="lineupOverlay" style="display: none;">
            <div class="lineup-container">
                <div class="lineup-header">
                    <h3 class="lineup-title">STARTING LINE UP</h3>
                    <div class="lineup-team-name" id="lineupTeamName">팀명</div>
                    <div class="lineup-coach" id="lineupCoach">감독 : 감독이름</div>
                </div>
                <div class="lineup-players" id="lineupPlayers">
                    <!-- 선택된 팀의 선수들이 여기에 동적으로 로드됩니다 -->
                </div>
            </div>
        </div>

        <!-- 배구 스코어보드 (2줄 구조) -->
        <div class="volleyball-scoreboard-container" id="volleyballScoreboard">
            <!-- 상단: 팀명 | 현재세트점수 | ◀ | 현재세트점수 | 팀명 -->
            <div class="main-scoreboard">
                <div class="team-section home">
                    <div class="team-name"><%= match.home_team || 'HOME' %></div>
                </div>
                <div class="current-score-section">
                    <span class="current-score" id="home-current-score">0</span>
                </div>
                <div class="serve-section">
                    <div class="serve-indicator" id="serveIndicator">
                        <div class="serve-triangle home"></div>
                    </div>
                </div>
                <div class="current-score-section">
                    <span class="current-score" id="away-current-score">0</span>
                </div>
                <div class="team-section away">
                    <div class="team-name"><%= match.away_team || 'AWAY' %></div>
                </div>
            </div>
            
            <!-- 하단: ○○○ | 1세트 | ○○○ -->
            <div class="set-info-row">
                <div class="set-wins-section">
                    <div class="set-wins-circles" id="home-set-wins-circles">
                        <div class="set-wins-circle home"></div>
                        <div class="set-wins-circle home"></div>
                        <div class="set-wins-circle home"></div>
                        <div class="set-wins-circle home" style="display: none;"></div>
                        <div class="set-wins-circle home" style="display: none;"></div>
                    </div>
                </div>
                <div class="set-info-section">
                    <span class="current-set" id="current-set"><%= match.status || '전반' %></span>
                </div>
                <div class="set-wins-section">
                    <div class="set-wins-circles" id="away-set-wins-circles">
                        <div class="set-wins-circle away"></div>
                        <div class="set-wins-circle away"></div>
                        <div class="set-wins-circle away"></div>
                        <div class="set-wins-circle away" style="display: none;"></div>
                        <div class="set-wins-circle away" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        
        
        
        
        
    </div>

    <script src="/js/animations.js"></script>
    <script>
        const socket = io();
        // 전역 변수로 설정하여 animations.js에서 접근 가능하도록 함
        window.socket = socket;
        let matchId = '<%= match.id %>';
        
        // 소켓 연결 상태 확인 (중복 제거됨 - 아래에서 처리)

        // 배구 특화 변수
        let currentSet = 1;
        let servingTeam = 'home';
        let setScores = [];
        let homeTeamColor = null;
        let awayTeamColor = null;

        // 전역 상태 관리 객체
        const logoState = {
            home: {
                path: '',
                bgColor: null,
                teamName: '<%= match.home_team %>'
            },
            away: {
                path: '',
                bgColor: null,
                teamName: '<%= match.away_team %>'
            }
        };

        // 로고 업데이트 함수
        function updateTeamLogo(teamType, logoInfo) {
            
            // 외부 로고 섹션 업데이트 (메인 로고)
            const externalLogoContainer = document.getElementById(`${teamType}-team-logo-container`);
            
            if (externalLogoContainer) {
                // 배경색 업데이트
                externalLogoContainer.style.backgroundColor = logoInfo.bgColor;
                
                // 로고 이미지 업데이트 (logoPath가 있을 때만)
                if (logoInfo.path) {
                    // 올바른 경로로 수정 (앞에 / 추가하고 경로 정리)
                    let correctPath = logoInfo.path.startsWith('/') ? logoInfo.path : `/${logoInfo.path}`;
                    
                    // 경로에서 불필요한 부분 제거 (soccer/1002SC9485/ 제거)
                    if (correctPath.includes('/soccer/') && correctPath.includes('/TEAMLOGO/')) {
                        const teamLogoIndex = correctPath.indexOf('/TEAMLOGO/');
                        correctPath = correctPath.substring(teamLogoIndex);
                    }
                    
                    const img = document.createElement('img');
                    img.src = correctPath;
                    img.alt = `${teamType}팀 로고`;
                    img.style.width = '100%';
                    img.style.height = '100%';
                    img.style.objectFit = 'contain';
                    img.style.display = 'block';
                    
                    img.onload = () => {
                        };
                    
                    img.onerror = (error) => {
                        externalLogoContainer.innerHTML = `<div class="team-logo-placeholder" style="background-color: ${logoInfo.bgColor}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;">로고 없음</div>`;
                    };
                    
                    externalLogoContainer.innerHTML = '';
                    externalLogoContainer.appendChild(img);
                    } else {
                    // 로고 경로가 없을 때는 기존 로고를 유지하고 배경색만 업데이트
                    }
            } else {
                }
            
            // 기존 팀 섹션 로고도 업데이트 (호환성)
            const logoContainer = document.querySelector(`.team-section.${teamType} .team-logo`);
            if (logoContainer) {
                // 배경색 업데이트
                logoContainer.style.backgroundColor = logoInfo.bgColor;
                // 로고 이미지 업데이트 (logoPath가 있을 때만)
                if (logoInfo.path) {
                    // 올바른 경로로 수정 (앞에 / 추가하고 경로 정리)
                    let correctPath = logoInfo.path.startsWith('/') ? logoInfo.path : `/${logoInfo.path}`;
                    
                    // 경로에서 불필요한 부분 제거 (soccer/1002SC9485/ 제거)
                    if (correctPath.includes('/soccer/') && correctPath.includes('/TEAMLOGO/')) {
                        const teamLogoIndex = correctPath.indexOf('/TEAMLOGO/');
                        correctPath = correctPath.substring(teamLogoIndex);
                    }
                    
                    const img = document.createElement('img');
                    img.src = correctPath;
                    img.alt = `${teamType}팀 로고`;
                    img.style.width = '100%';
                    img.style.height = '100%';
                    img.style.objectFit = 'contain';
                    img.style.display = 'block';
                    
                    img.onload = () => {
                        };
                    
                    img.onerror = (error) => {
                        logoContainer.innerHTML = `<div class="team-logo-placeholder" style="background-color: ${logoInfo.bgColor}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;">로고 없음</div>`;
                    };
                    
                    logoContainer.innerHTML = '';
                    logoContainer.appendChild(img);
                    } else {
                    // 로고 경로가 없을 때는 기존 로고를 유지하고 배경색만 업데이트
                    }
            } else {
                }

            // 팀 섹션 배경색 업데이트 (로고 배경색과는 별개)
            const teamSection = document.querySelector(`.team-section.${teamType}`);
            if (teamSection) {
                // 팀 섹션은 팀 색상 유지, 로고 배경색과는 별개
                const teamColor = teamType === 'home' ? homeTeamColor : awayTeamColor;
                if (teamColor) {
                    teamSection.style.backgroundColor = teamColor;
                    console.log(`🔧 ${teamType}팀 섹션 컬러 업데이트:`, teamColor);
                }
            }

            // 팀 헤더 배경색 업데이트
            const teamHeader = document.querySelector(`.team-section.${teamType} .team-header`);
            if (teamHeader) {
                let color = logoInfo.bgColor;
                if (color.startsWith('rgba')) {
                    color = color.replace(/^rgba\(([^,]+),([^,]+),([^,]+),[^\)]+\)/, 'rgb($1,$2,$3)');
                }
                teamHeader.style.backgroundColor = color;
            }
            
            // VS 오버레이도 업데이트
            updateVSOverlayLogos();
        }

        // 오버레이 이미지 로드 함수 (활성화된 모든 이미지 표시)
    // 한글 파일명 디코딩 함수 (브라우저 호환 버전)
    function decodeKoreanFilename(filename) {
        try {
            // 깨진 파일명인지 확인
            if (filename.includes('ì') || filename.includes('ë') || filename.includes('í') || 
                filename.includes('â') || filename.includes('ê') || filename.includes('ô')) {
                
                // 브라우저 환경에서 한글 파일명 디코딩
                let decoded = filename;
                try {
                    // URL 디코딩 시도
                    decoded = decodeURIComponent(filename);
                } catch (e) {
                    // URL 디코딩 실패 시 원본 반환
                    console.log(`🔧 URL 디코딩 실패, 원본 사용: ${filename}`);
                    return filename;
                }
                
                console.log(`🔧 클라이언트 파일명 디코딩: ${filename} -> ${decoded}`);
                return decoded;
            }
            return filename;
        } catch (error) {
            console.error('🔧 클라이언트 파일명 디코딩 실패:', error);
            return filename;
        }
    }

    // 오버레이 이미지 이벤트 리스너 재등록 함수
    function registerOverlayImageEventListeners() {
        console.log('🔧 오버레이 이미지 이벤트 리스너 재등록');
        
        // 기존 이벤트 리스너 제거 (중복 방지)
        socket.off('overlay_image_status_changed');
        socket.off('overlay_page_refresh');
        
        // 오버레이 이미지 상태 변경 실시간 이벤트 처리 (재등록)
        socket.on('overlay_image_status_changed', function(data) {
            console.log('🔧 오버레이 이미지 상태 변경 실시간 이벤트 (재등록):', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교 (window.matchData 사용)
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 스포츠 타입 일치, 이미지 처리 시작 (재등록)');
                
                if (data.isActive && data.imageData) {
                    // 이미지 활성화 - 해당 이미지만 추가 표시
                    console.log('🔧 오버레이 이미지 활성화 (재등록):', data.imageData);
                    addOverlayImage(data.imageData);
                } else if (!data.isActive && data.imageData) {
                    // 이미지 비활성화 - 해당 이미지만 제거
                    console.log('🔧 오버레이 이미지 비활성화 (재등록):', data.imageData);
                    removeOverlayImage(data.imageData.id);
                }
            } else {
                console.log('🔧 스포츠 타입 불일치, Room 재참여 시도 (재등록)');
                // 스포츠 타입이 일치하지 않으면 Room 재참여 시도
                if (window.matchData?.sport_type) {
                    console.log('🔧 Room 재참여 요청 (재등록):', window.matchData.sport_type);
                    socket.emit('join_sport_room', window.matchData.sport_type);
                }
            }
        });

        // 오버레이 페이지 새로고침 이벤트 처리 (재등록)
        socket.on('overlay_page_refresh', function(data) {
            console.log('🔧 오버레이 페이지 새로고침 신호 수신 (재등록):', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 오버레이 페이지 새로고침 실행 (재등록):', data.reason);
                // DB 저장 완료를 위해 500ms 지연 후 페이지 새로고침
                setTimeout(() => {
                    console.log('🔧 500ms 지연 후 페이지 새로고침 실행 (재등록)');
                    location.reload();
                }, 500);
            } else {
                console.log('🔧 스포츠 타입 불일치로 새로고침 건너뜀 (재등록)');
                // 대안: window.matchData가 없을 때도 새로고침 (디버깅용)
                if (!window.matchData) {
                    console.log('🔧 window.matchData가 없어서 강제 새로고침 실행 (재등록)');
                    setTimeout(() => {
                        console.log('🔧 500ms 지연 후 강제 새로고침 실행 (재등록)');
                        location.reload();
                    }, 500);
                }
            }
        });
        
        console.log('🔧 오버레이 이미지 이벤트 리스너 재등록 완료');
    }

    // 오버레이 이미지 추가 함수 (다중 이미지 지원)
    function addOverlayImage(imageData) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 오버레이 이미지 추가:', imageData);
        
        // 이미 존재하는 이미지인지 확인
        const existingImg = overlayImageContainer.querySelector(`[data-image-id="${imageData.id}"]`);
        if (existingImg) {
            console.log('🔧 이미지가 이미 존재함:', imageData.id);
            return;
        }
        
        const img = document.createElement('img');
        img.setAttribute('data-image-id', imageData.id);
        
        // 파일 경로에서 파일명 추출 및 디코딩
        const pathParts = imageData.file_path.split('/');
        const filename = pathParts[pathParts.length - 1];
        const decodedFilename = decodeKoreanFilename(filename);
        const decodedPath = imageData.file_path.replace(filename, decodedFilename);
        
        img.src = decodedPath;
        img.alt = '오버레이 이미지';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.position = 'absolute';
        img.style.top = '0';
        img.style.left = '0';
        img.style.zIndex = '1';
        
        img.onload = () => {
            overlayImageContainer.appendChild(img);
            overlayImageContainer.classList.add('show');
            console.log('🔧 오버레이 이미지 추가 완료:', imageData.id);
        };
        
        img.onerror = (error) => {
            console.error('🔧 오버레이 이미지 로드 실패:', error);
        };
    }
    
    // 오버레이 이미지 제거 함수 (다중 이미지 지원)
    function removeOverlayImage(imageId) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 오버레이 이미지 제거:', imageId);
        
        const imgToRemove = overlayImageContainer.querySelector(`[data-image-id="${imageId}"]`);
        if (imgToRemove) {
            imgToRemove.remove();
            console.log('🔧 오버레이 이미지 제거 완료:', imageId);
            
            // 모든 이미지가 제거되었으면 컨테이너 숨김
            const remainingImages = overlayImageContainer.querySelectorAll('img');
            if (remainingImages.length === 0) {
                overlayImageContainer.classList.remove('show');
            }
        }
    }
    
    // 오버레이 이미지 표시 함수 (실시간 업데이트용) - 단일 이미지용
    function displayOverlayImage(imageData) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 오버레이 이미지 표시:', imageData);
        
        // 기존 이미지 제거
        overlayImageContainer.innerHTML = '';
        
        const img = document.createElement('img');
        // 파일 경로에서 파일명 추출 및 디코딩
        const pathParts = imageData.file_path.split('/');
        const filename = pathParts[pathParts.length - 1];
        const decodedFilename = decodeKoreanFilename(filename);
        const decodedPath = imageData.file_path.replace(filename, decodedFilename);
        
        img.src = decodedPath;
        img.alt = '오버레이 이미지';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.position = 'absolute';
        img.style.top = '0';
        img.style.left = '0';
        img.style.zIndex = '1';
        
        img.onload = () => {
            overlayImageContainer.appendChild(img);
            overlayImageContainer.classList.add('show');
            console.log('🔧 오버레이 이미지 로드 완료');
        };
        
        img.onerror = (error) => {
            console.error('🔧 오버레이 이미지 로드 실패:', error);
            overlayImageContainer.classList.remove('show');
        };
    }
    
    // 오버레이 이미지 숨김 함수 (실시간 업데이트용) - 단일 이미지용
    function hideOverlayImage() {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 오버레이 이미지 숨김');
        overlayImageContainer.classList.remove('show');
        overlayImageContainer.innerHTML = '';
    }

    async function loadOverlayImage() {
        try {
            console.log('오버레이 이미지 로드 시작...');
                
                // 경기 정보에서 종목 코드 가져오기
                const matchResponse = await fetch(`/api/matches/${matchId}`);
                if (!matchResponse.ok) {
                    console.error('경기 정보를 가져올 수 없습니다.');
                    return;
                }
                
                const matchData = await matchResponse.json();
                const sportCode = matchData.sport_type.toUpperCase();
                console.log('종목 코드:', sportCode);
                
                // 종목코드 그대로 사용 (종목명 대신)
                const sportCodeForPath = sportCode;
                console.log('종목코드:', sportCodeForPath);
                
                // 해당 종목의 활성화된 이미지 조회
                const response = await fetch(`/api/overlay-images/active/${sportCode}`);
                const result = await response.json();
                
                console.log('활성화된 이미지 목록 조회 결과:', result);
                
                const overlayImageContainer = document.getElementById('overlayImage');
                
                if (result.success && result.images && result.images.length > 0) {
                    console.log('🔧 활성화된 이미지들:', result.images);
                    
                    // 모든 활성화된 이미지를 표시
                    overlayImageContainer.innerHTML = '';
                    
                    result.images.forEach((image, index) => {
                        const img = document.createElement('img');
                        img.setAttribute('data-image-id', image.id);
                        
                        // 종목코드 기반 경로로 직접 구성
                        const filename = image.filename;
                        const decodedFilename = decodeKoreanFilename(filename);
                        const imagePath = `/overlay-images/${sportCodeForPath}/${decodedFilename}`;
                        
                        console.log(`🔧 이미지 경로 구성: ${imagePath}`);
                        img.src = imagePath;
                        img.alt = `오버레이 이미지 ${index + 1}`;
                        img.style.width = '100%';
                        img.style.height = '100%';
                        img.style.objectFit = 'cover';
                        img.style.position = 'absolute';
                        img.style.top = '0';
                        img.style.left = '0';
                        img.style.zIndex = 1000 + index;
                        
                        img.onload = () => {
                            overlayImageContainer.appendChild(img);
                            overlayImageContainer.style.display = 'block';
                            console.log(`활성화된 오버레이 이미지 ${index + 1} 로드됨:`, image.file_path);
                        };
                        
                        img.onerror = (error) => {
                            console.error(`활성화된 오버레이 이미지 ${index + 1} 로드 실패:`, error);
                        };
                    });
                } else {
                    overlayImageContainer.style.display = 'none';
                    console.log('활성화된 오버레이 이미지가 없습니다.');
                }
        } catch (error) {
            console.error('오버레이 이미지 로드 오류:', error);
            document.getElementById('overlayImage').style.display = 'none';
        }
    }

        // 팀 색상 로드 함수
        async function loadTeamColors() {
            try {
                
                // 팀 색상 정보를 DB에서 로드
                const response = await fetch(`/api/matches/${matchId}`);
                if (response.ok) {
                    const matchData = await response.json();
                    // 팀 색상 업데이트
                    if (matchData.home_team_color) {
                        homeTeamColor = matchData.home_team_color;
                        }
                    if (matchData.away_team_color) {
                        awayTeamColor = matchData.away_team_color;
                        }
                    
                    // 팀 색상 적용
                    updateTeamColors(homeTeamColor, awayTeamColor);
                    } else {
                    }
            } catch (error) {
                }
        }

        // 강력한 DB 데이터 로드 함수 (최적화된 버전)
        async function reloadAllDataFromDB() {
            try {
                console.log('🔧 reloadAllDataFromDB 함수 시작 (최적화)');
                
                // 통합 API로 모든 초기 데이터를 한 번에 로드
                const response = await fetch(`/api/matches/${matchId}/initial-data`);
                if (!response.ok) {
                    throw new Error('초기 데이터 로드 실패');
                }
                
                const initialData = await response.json();
                console.log('✅ 통합 초기 데이터 로드 완료:', initialData);
                
                // 통합 데이터를 각각의 함수로 처리
                await processOverlayInitialData(initialData);
                
                console.log('🔧 reloadAllDataFromDB 함수 완료 (최적화)');
                
            } catch (error) {
                console.error('❌ reloadAllDataFromDB 함수 오류:', error);
                // 폴백: 기존 방식으로 개별 로드
                console.log('🔄 폴백: 기존 방식으로 개별 로드 시작');
                await reloadAllDataFromDBFallback();
            }
        }
        
        // 오버레이 통합 데이터 처리 함수
        async function processOverlayInitialData(data) {
            try {
                console.log('🔧 오버레이 통합 데이터 처리 시작');
                
                // 1. 경기 기본 정보 처리
                if (data.match) {
                    await processOverlayMatchData(data.match);
                }
                
                // 2. 팀로고 정보 처리
                if (data.teamLogos && data.teamLogos.length > 0) {
                    await processOverlayTeamLogoData(data.teamLogos);
                }
                
                // 3. 팀로고 표시 모드 처리
                if (data.displayMode) {
                    await processOverlayDisplayModeData(data.displayMode);
                }
                
                // 4. 라인업 데이터 처리
                if (data.lineup) {
                    await processOverlayLineupData(data.lineup);
                }
                
                // 5. 토너먼트 텍스트 처리
                if (data.tournamentText) {
                    await processOverlayTournamentTextData(data.tournamentText);
                }
                
                console.log('✅ 오버레이 통합 데이터 처리 완료');
            } catch (error) {
                console.error('❌ 오버레이 통합 데이터 처리 실패:', error);
                throw error;
            }
        }
        
        // 오버레이 경기 데이터 처리
        async function processOverlayMatchData(matchData) {
            console.log('🔧 오버레이 경기 데이터 처리:', matchData);
            
            // 팀 색상 업데이트
            if (matchData.home_team_color && matchData.away_team_color) {
                homeTeamColor = matchData.home_team_color;
                awayTeamColor = matchData.away_team_color;
                updateTeamColors(homeTeamColor, awayTeamColor);
            }
            
            // 팀명 업데이트
            if (matchData.home_team) {
                const homeTeamElements = document.querySelectorAll('.team-section.home .team-name');
                homeTeamElements.forEach(el => el.textContent = matchData.home_team);
            }
            if (matchData.away_team) {
                const awayTeamElements = document.querySelectorAll('.team-section.away .team-name');
                awayTeamElements.forEach(el => el.textContent = matchData.away_team);
            }
            
            // 배구 데이터 복원
            if (matchData.match_data) {
                console.log('🔧 배구 데이터 복원 시작:', matchData.match_data);
                
                // 세트제 복원
                if (matchData.match_data.setFormat) {
                    updateSetFormatCircles(matchData.match_data.setFormat);
                }
                
                // 현재 세트 복원
                if (matchData.match_data.current_set) {
                    updateCurrentSetDisplay(matchData.match_data.current_set);
                }
                
                // 세트 승리 복원
                if (matchData.match_data.home_wins !== undefined || matchData.match_data.away_wins !== undefined) {
                    updateSetWinsCircles(matchData.match_data.home_wins || 0, matchData.match_data.away_wins || 0);
                }
                
                // 현재 세트 점수 복원
                if (matchData.match_data.home_score !== undefined && matchData.match_data.away_score !== undefined) {
                    const homeCurrentScore = document.getElementById('home-current-score');
                    const awayCurrentScore = document.getElementById('away-current-score');
                    
                    if (homeCurrentScore) {
                        homeCurrentScore.textContent = matchData.match_data.home_score;
                    }
                    if (awayCurrentScore) {
                        awayCurrentScore.textContent = matchData.match_data.away_score;
                    }
                }
                
                // 서브권 복원
                if (matchData.match_data.servingTeam) {
                    updateServeIndicator(matchData.match_data.servingTeam);
                }
                
                // 세트 점수 복원
                if (matchData.match_data.set_scores) {
                    updateSetScoresDisplay(matchData.match_data.set_scores);
                }
            }
        }
        
        // 오버레이 팀로고 데이터 처리
        async function processOverlayTeamLogoData(teamLogos) {
            console.log('🔧 오버레이 팀로고 데이터 처리:', teamLogos);
            
            // 팀로고 정보를 전역 변수에 저장
            window.teamLogos = teamLogos;
            
            // 팀로고 UI 업데이트
            teamLogos.forEach((teamInfo) => {
                const teamType = teamInfo.team_type;
                if (teamInfo.logo_path || teamInfo.logo_bg_color) {
                    logoState[teamType] = {
                        path: teamInfo.logo_path || '',
                        bgColor: teamInfo.logo_bg_color || '#ffffff',
                        teamName: teamInfo.team_name
                    };
                    updateTeamLogo(teamType, logoState[teamType]);
                }
            });
        }
        
        // 오버레이 표시 모드 데이터 처리
        async function processOverlayDisplayModeData(displayMode) {
            console.log('🔧 오버레이 표시 모드 데이터 처리:', displayMode);
            
            // 표시 모드에 따라 UI 업데이트
            if (displayMode === 'background') {
                updateTeamLogoVisibility(false);
            } else {
                updateTeamLogoVisibility(true);
            }
        }
        
        // 오버레이 라인업 데이터 처리
        async function processOverlayLineupData(lineupData) {
            console.log('🔧 오버레이 라인업 데이터 처리:', lineupData);
            
            // 라인업 데이터를 전역 변수에 저장
            window.currentLineupData = lineupData;
            
            // 라인업 UI 업데이트
            if (lineupData.home && lineupData.away) {
                updateLineupDisplay('home', lineupData.home);
                updateLineupDisplay('away', lineupData.away);
            }
        }
        
        // 오버레이 토너먼트 텍스트 데이터 처리
        async function processOverlayTournamentTextData(tournamentText) {
            console.log('🔧 오버레이 토너먼트 텍스트 데이터 처리:', tournamentText);
            
            if (tournamentText) {
                const tournamentElement = document.getElementById('tournament-text');
                if (tournamentElement) {
                    tournamentElement.textContent = tournamentText;
                }
            }
        }
        
        // 폴백 함수 (기존 방식)
        async function reloadAllDataFromDBFallback() {
            try {
                console.log('🔄 폴백: 기존 방식으로 개별 로드');
                
                // 1. 경기 기본 정보 로드
                const matchResponse = await fetch(`/api/matches/${matchId}`);
                if (matchResponse.ok) {
                    const matchData = await matchResponse.json();
                    
                    // 라인업 로드
                    await loadLineup();
                    
                    // 팀 색상 업데이트
                    if (matchData.home_team_color) {
                        homeTeamColor = matchData.home_team_color;
                    }
                    if (matchData.away_team_color) {
                        awayTeamColor = matchData.away_team_color;
                    }
                    
                    if (homeTeamColor && awayTeamColor) {
                        updateTeamColors(homeTeamColor, awayTeamColor);
                    }
                    
                    // 팀명 업데이트
                    if (matchData.home_team) {
                        const homeTeamElements = document.querySelectorAll('.team-section.home .team-name');
                        homeTeamElements.forEach(element => {
                            element.textContent = matchData.home_team;
                        });
                    }
                    if (matchData.away_team) {
                        const awayTeamElements = document.querySelectorAll('.team-section.away .team-name');
                        awayTeamElements.forEach(element => {
                            element.textContent = matchData.away_team;
                        });
                    }
                    
                    // 배구 데이터 복원
                    if (matchData.match_data) {
                        // 세트제 복원
                        if (matchData.match_data.setFormat) {
                            updateSetFormatCircles(matchData.match_data.setFormat);
                        }
                        
                        // 현재 세트 복원
                        if (matchData.match_data.current_set) {
                            updateCurrentSetDisplay(matchData.match_data.current_set);
                        }
                        
                        // 세트 승리 복원
                        if (matchData.match_data.home_wins !== undefined || matchData.match_data.away_wins !== undefined) {
                            updateSetWinsCircles(matchData.match_data.home_wins || 0, matchData.match_data.away_wins || 0);
                        }
                        
                        // 현재 세트 점수 복원
                        if (matchData.match_data.home_score !== undefined && matchData.match_data.away_score !== undefined) {
                            const homeCurrentScore = document.getElementById('home-current-score');
                            const awayCurrentScore = document.getElementById('away-current-score');
                            
                            if (homeCurrentScore) {
                                homeCurrentScore.textContent = matchData.match_data.home_score;
                            }
                            if (awayCurrentScore) {
                                awayCurrentScore.textContent = matchData.match_data.away_score;
                            }
                        }
                        
                        // 서브권 복원
                        if (matchData.match_data.servingTeam) {
                            updateServeIndicator(matchData.match_data.servingTeam);
                        }
                        
                        // 세트 점수 복원
                        if (matchData.match_data.set_scores) {
                            updateSetScoresDisplay(matchData.match_data.set_scores);
                        }
                    }
                }
                
                // 2. 팀로고 정보 로드
                const teamLogosResponse = await fetch(`/api/matches/${matchId}/team-logos`);
                if (teamLogosResponse.ok) {
                    const teamLogosData = await teamLogosResponse.json();
                    
                    if (teamLogosData && teamLogosData.teamLogos) {
                        teamLogosData.teamLogos.forEach((teamInfo) => {
                            const teamType = teamInfo.team_type;
                            if (teamInfo.logo_path || teamInfo.logo_bg_color) {
                                logoState[teamType] = {
                                    path: teamInfo.logo_path || '',
                                    bgColor: teamInfo.logo_bg_color || '#ffffff',
                                    teamName: teamInfo.team_name
                                };
                                updateTeamLogo(teamType, logoState[teamType]);
                            }
                        });
                    }
                }
                
                // 3. 팀로고 가시성 상태 로드
                await loadAndApplyLogoDisplayStates();
                
                // 4. 팀로고 표시 모드 상태 로드
                await loadAndApplyLogoDisplayMode();
                
                console.log('✅ 폴백 데이터 로드 완료');
            } catch (error) {
                console.error('❌ 폴백 데이터 로드 실패:', error);
            }
        }
        
        // 기존 함수 (폴백용)
        async function reloadAllDataFromDBOriginal() {
            try {
                console.log('🔧 reloadAllDataFromDB 함수 시작');
                
                // 1. 경기 기본 정보 로드
                const matchResponse = await fetch(`/api/matches/${matchId}`);
                if (matchResponse.ok) {
                    const matchData = await matchResponse.json();
                    
                    // 라인업 로드
                    await loadLineup();
                    
                    // 팀 색상 업데이트 (DB에서 가져온 값 사용)
                    if (matchData.home_team_color) {
                        homeTeamColor = matchData.home_team_color;
                        console.log('🔧 홈팀 컬러 로드 (DB):', homeTeamColor);
                    }
                    if (matchData.away_team_color) {
                        awayTeamColor = matchData.away_team_color;
                        console.log('🔧 어웨이팀 컬러 로드 (DB):', awayTeamColor);
                    }
                    
                    // 팀 색상 적용 (DB에서 가져온 값으로)
                    if (homeTeamColor && awayTeamColor) {
                        updateTeamColors(homeTeamColor, awayTeamColor);
                        console.log('🔧 팀 컬러 적용 완료:', { homeTeamColor, awayTeamColor });
                    }
                    
                    // 팀명 업데이트
                    if (matchData.home_team) {
                        const homeTeamElements = document.querySelectorAll('.team-section.home .team-name');
                        homeTeamElements.forEach(element => {
                            element.textContent = matchData.home_team;
                        });
                        console.log('🔧 홈팀명 업데이트:', matchData.home_team);
                    }
                    if (matchData.away_team) {
                        const awayTeamElements = document.querySelectorAll('.team-section.away .team-name');
                        awayTeamElements.forEach(element => {
                            element.textContent = matchData.away_team;
                        });
                        console.log('🔧 어웨이팀명 업데이트:', matchData.away_team);
                    }
                    
                    // 배구 데이터 복원
                    if (matchData.match_data) {
                        console.log('🔧 배구 데이터 복원 시작:', matchData.match_data);
                        
                        // 세트제 복원
                        if (matchData.match_data.setFormat) {
                            console.log('🔧 세트제 복원:', matchData.match_data.setFormat);
                            updateSetFormatCircles(matchData.match_data.setFormat);
                        }
                        
                        // 현재 세트 복원
                        if (matchData.match_data.current_set) {
                            console.log('🔧 현재 세트 복원:', matchData.match_data.current_set);
                            updateCurrentSetDisplay(matchData.match_data.current_set);
                        }
                        
                        // 세트 승리 복원
                        if (matchData.match_data.home_wins !== undefined || matchData.match_data.away_wins !== undefined) {
                            console.log('🔧 세트 승리 복원:', matchData.match_data.home_wins, matchData.match_data.away_wins);
                            updateSetWinsCircles(matchData.match_data.home_wins || 0, matchData.match_data.away_wins || 0);
                        }
                        
                        // 현재 세트 점수 복원
                        if (matchData.match_data.home_score !== undefined && matchData.match_data.away_score !== undefined) {
                            console.log('🔧 현재 세트 점수 복원:', matchData.match_data.home_score, matchData.match_data.away_score);
                            
                            const homeCurrentScore = document.getElementById('home-current-score');
                            const awayCurrentScore = document.getElementById('away-current-score');
                            
                            if (homeCurrentScore) {
                                homeCurrentScore.textContent = matchData.match_data.home_score;
                            }
                            if (awayCurrentScore) {
                                awayCurrentScore.textContent = matchData.match_data.away_score;
                            }
                        }
                        
                        // 서브권 복원
                        if (matchData.match_data.servingTeam) {
                            console.log('🔧 서브권 복원:', matchData.match_data.servingTeam);
                            updateServeIndicator(matchData.match_data.servingTeam);
                        }
                        
                        // 세트 점수 복원
                        if (matchData.match_data.set_scores) {
                            console.log('🔧 세트 점수 복원:', matchData.match_data.set_scores);
                            updateSetScoresDisplay(matchData.match_data.set_scores);
                        }
                        
                        console.log('✅ 배구 데이터 복원 완료');
                    }
                }
                
                // 2. 팀로고 정보 로드 (dataChanged 이벤트에서는 항상 재로드)
                console.log('🔧 팀로고 정보 재로드 시작');
                const teamLogosResponse = await fetch(`/api/matches/${matchId}/team-logos`);
                if (teamLogosResponse.ok) {
                    const teamLogosData = await teamLogosResponse.json();
                    
                    if (teamLogosData && teamLogosData.teamLogos) {
                        teamLogosData.teamLogos.forEach((teamInfo) => {
                            const teamType = teamInfo.team_type;
                            if (teamInfo.logo_path || teamInfo.logo_bg_color) {
                                logoState[teamType] = {
                                    path: teamInfo.logo_path || '',
                                    bgColor: teamInfo.logo_bg_color || '#ffffff',
                                    teamName: teamInfo.team_name
                                };
                                console.log(`🔧 ${teamType}팀 로고 정보 업데이트:`, logoState[teamType]);
                                updateTeamLogo(teamType, logoState[teamType]);
                            }
                        });
                        console.log('🔧 팀로고 정보 재로드 완료');
                        
                        // 팀로고 정보 로드 후 UI 업데이트 강제 실행
                        console.log('🔧 팀로고 UI 업데이트 강제 실행');
                        teamLogosData.teamLogos.forEach((teamInfo) => {
                            const teamType = teamInfo.team_type;
                            if (logoState[teamType]) {
                                updateTeamLogo(teamType, logoState[teamType]);
                                console.log(`🔧 ${teamType}팀 로고 UI 업데이트 강제 실행 완료`);
                            }
                        });
                    }
                } else {
                    console.error('🔧 팀로고 정보 로드 실패:', teamLogosResponse.status);
                }
                
                // 3. 팀로고 가시성 상태 로드
                await loadAndApplyLogoDisplayStates();
                
                // 4. 팀로고 표시 모드 상태 로드
                await loadAndApplyLogoDisplayMode();
                
                console.log('🔧 reloadAllDataFromDB 함수 완료');
                
                } catch (error) {
                console.error('🔧 reloadAllDataFromDB 함수 오류:', error);
                }
        }

        // 초기 로고 로드 함수 (최적화된 버전)
        async function loadInitialLogos() {
            if (teamLogosLoaded) {
                console.log('🔧 팀로고 이미 로드됨 - 중복 호출 방지');
                return;
            }
            
            try {
                // 1. DB에서 팀로고 정보 로드 (최우선순위)
                try {
                    console.log(`🔍 팀로고 정보 조회 시작: /api/matches/${matchId}/team-logos`);
                    const teamLogosResponse = await fetch(`/api/matches/${matchId}/team-logos`);
                    console.log(`📡 팀로고 API 응답 상태: ${teamLogosResponse.status}`);
                    
                    if (teamLogosResponse.ok) {
                        const teamLogosData = await teamLogosResponse.json();
                        console.log('📄 팀로고 API 응답 데이터:', teamLogosData);
                        
                        if (teamLogosData && teamLogosData.teamLogos) {
                            console.log(`📊 팀로고 개수: ${teamLogosData.teamLogos.length}`);
                            teamLogosData.teamLogos.forEach((teamInfo, index) => {
                                const teamType = teamInfo.team_type;
                                console.log(`🔍 ${teamType}팀 정보:`, teamInfo);
                                
                                if (teamInfo.logo_path || teamInfo.logo_bg_color) {
                                    logoState[teamType] = {
                                        path: teamInfo.logo_path || '',
                                        bgColor: teamInfo.logo_bg_color || '#ffffff',
                                        teamName: teamInfo.team_name
                                    };
                                    console.log(`✅ ${teamType}팀 로고 정보 로드 (DB):`, logoState[teamType]);
                                    updateTeamLogo(teamType, logoState[teamType]);
                                } else {
                                    console.log(`⚠️ ${teamType}팀 로고 정보 없음`);
                                }
                            });
                            
                            // VS 오버레이도 업데이트 (한 번만)
                            updateVSOverlayLogos();
                            teamLogosLoaded = true;
                            console.log('✅ 팀로고 로딩 완료 (DB)');
                            return;
                        } else {
                            console.log('⚠️ 팀로고 데이터가 없습니다.');
                        }
                    } else {
                        console.error(`❌ 팀로고 API 오류: ${teamLogosResponse.status}`);
                    }
                } catch (dbError) {
                    console.error('❌ 팀로고 DB 조회 오류:', dbError);
                }
                
                // 2. 경기별 팀 로고 정보 로드 (백업)
                try {
                    const matchResponse = await fetch(`/api/matches/${matchId}`);
                    if (matchResponse.ok) {
                        const matchData = await matchResponse.json();
                        if (matchData && matchData.match_data) {
                            const matchDataObj = matchData.match_data;
                            
                            // 홈팀 로고 정보 (DB에 없을 때만)
                            if ((matchDataObj.home_team_logo || matchDataObj.home_team_bg_color) && !logoState.home) {
                                logoState.home = {
                                    path: matchDataObj.home_team_logo,
                                    bgColor: matchDataObj.home_team_bg_color || '#ffffff',
                                    teamName: '<%= match.home_team %>'
                                };
                                console.log('홈팀 로고 정보 로드 (경기 데이터):', logoState.home);
                                updateTeamLogo('home', logoState.home);
                            }
                            
                            // 어웨이팀 로고 정보 (DB에 없을 때만)
                            if ((matchDataObj.away_team_logo || matchDataObj.away_team_bg_color) && !logoState.away) {
                                logoState.away = {
                                    path: matchDataObj.away_team_logo,
                                    bgColor: matchDataObj.away_team_bg_color || '#ffffff',
                                    teamName: '<%= match.away_team %>'
                                };
                                console.log('어웨이팀 로고 정보 로드 (경기 데이터):', logoState.away);
                                updateTeamLogo('away', logoState.away);
                            }
                        }
                    }
                } catch (matchError) {
                    }
                
                // 2. 팀 로고 맵 정보 로드 (백업)
                const response = await fetch('/api/overlay-images/TEAMLOGO/SOCCER');
                if (!response.ok) {
                    throw new Error(`팀 로고 맵 로드 실패: ${response.status}`);
                }
                
                const data = await response.json();
                if (data && data.teamLogoMap) {
                    const homeTeamName = '<%= match.home_team %>';
                    const awayTeamName = '<%= match.away_team %>';
                    
                    console.log('사용 가능한 팀들:', Object.keys(data.teamLogoMap));
                    console.log('현재 경기 팀명:', { homeTeamName, awayTeamName });
                    
                    // 홈팀 로고 설정 (경기 데이터에 없을 때만)
                    if (data.teamLogoMap[homeTeamName] && !logoState.home) {
                        logoState.home = {
                            path: data.teamLogoMap[homeTeamName].path,
                            bgColor: data.teamLogoMap[homeTeamName].bgColor || '#ffffff',
                            teamName: homeTeamName
                        };
                        console.log('홈팀 로고 정보 로드 (팀 맵):', logoState.home);
                        updateTeamLogo('home', logoState.home);
                    } else if (!logoState.home) {
                        console.log('홈팀 로고 없음 - 팀명:', homeTeamName);
                        }
                    
                    // 원정팀 로고 설정 (경기 데이터에 없을 때만)
                    if (data.teamLogoMap[awayTeamName] && !logoState.away) {
                        logoState.away = {
                            path: data.teamLogoMap[awayTeamName].path,
                            bgColor: data.teamLogoMap[awayTeamName].bgColor || '#ffffff',
                            teamName: awayTeamName
                        };
                        console.log('원정팀 로고 정보 로드 (팀 맵):', logoState.away);
                        updateTeamLogo('away', logoState.away);
                    } else if (!logoState.away) {
                        console.log('원정팀 로고 없음 - 팀명:', awayTeamName);
                        }
                    
                    // VS 오버레이 로고도 업데이트
                    updateVSOverlayLogos();
                    
                    // 팀 색상 적용 후에도 로고 배경색 보호
                    setTimeout(() => {
                        updateTeamColors(homeTeamColor, awayTeamColor);
                    }, 100);
                } else {
                    }
            } catch (error) {
                }
        }

        // 팀로고 로딩 상태 관리
        let teamLogosLoaded = false;

        // 팀로고 가시성 업데이트 함수
        function updateTeamLogoVisibility(useLogos) {
            
            // 홈팀과 어웨이팀 로고 섹션 (더 구체적인 셀렉터 사용)
            const homeLogoSection = document.querySelector('.team-logo-section.home-logo');
            const awayLogoSection = document.querySelector('.team-logo-section.away-logo');
            
            // 대안 셀렉터들도 시도
            const homeLogoSectionAlt = document.getElementById('home-team-logo-container');
            const awayLogoSectionAlt = document.getElementById('away-team-logo-container');
            
            
            if (useLogos) {
                // 팀로고 사용: 로고 표시
                if (homeLogoSection) {
                    homeLogoSection.style.opacity = '1';
                    } else if (homeLogoSectionAlt) {
                    homeLogoSectionAlt.style.opacity = '1';
                    }
                if (awayLogoSection) {
                    awayLogoSection.style.opacity = '1';
                    } else if (awayLogoSectionAlt) {
                    awayLogoSectionAlt.style.opacity = '1';
                    }
                
                } else {
                // 팀로고 사용 안함: 로고 숨김
                if (homeLogoSection) {
                    homeLogoSection.style.opacity = '0';
                    } else if (homeLogoSectionAlt) {
                    homeLogoSectionAlt.style.opacity = '0';
                    }
                if (awayLogoSection) {
                    awayLogoSection.style.opacity = '0';
                    } else if (awayLogoSectionAlt) {
                    awayLogoSectionAlt.style.opacity = '0';
                    }
                
                }
        }

        // 경기 상태 표시 설정 로드
        async function loadMatchStateVisibility() {
            try {
                const response = await fetch('/api/soccer-match-state-visibility');
                const result = await response.json();
                
                if (result.success) {
                    const matchStateContainer = document.getElementById('matchStateContainer');
                    if (matchStateContainer) {
                        matchStateContainer.style.display = result.showMatchState ? 'block' : 'none';
                    }
                }
            } catch (error) {
                }
        }

        // 경기 데이터 로드 함수
        async function loadMatchData() {
            try {
                const response = await fetch(`/api/matches/${matchId}`);
                const matchData = await response.json();
                window.matchData = matchData;  // 전역 변수로 저장
                console.log('🔧 경기 데이터 로드 완료:', matchData.sport_type);
                return matchData;
            } catch (error) {
                console.error('🔧 경기 데이터 로드 실패:', error);
                return null;
            }
        }

        // 소켓 연결 이벤트
        socket.on('connect', async () => {
            // 이전 방에서 나가기
            socket.emit('leave_all_rooms');
            
            // 새 방에 참가
            socket.emit('join', matchId);
            
            // 배구 특화 데이터 요청
            socket.emit('request_volleyball_data', { matchId: matchId });
            console.log('🔧 배구 데이터 요청 전송');
            
            // 경기 데이터 로드 후 종목별 Room에 참여 요청
            const matchData = await loadMatchData();
            if (matchData) {
                // 서버에 종목별 Room 참여 요청
                socket.emit('join_sport_room', matchData.sport_type);
                console.log(`🔧 종목별 Room 참여 요청: sport_${matchData.sport_type}`);
            }
            
            // 방 참가 확인을 위한 이벤트 리스너 추가
            socket.on('joined_room', (data) => {
                });
            
            // 종목별 Room 참여 확인 이벤트 리스너
            socket.on('joined_sport_room', (data) => {
                if (data.success) {
                    console.log(`🔧 종목별 Room 참여 완료: ${data.roomName}`);
                    console.log(`🔧 Room 참여자 수: ${data.clientCount}`);
                    // Room 참여 완료 후 기존 활성 이미지 로드
                    loadOverlayImage();
                    
                    // 이벤트 리스너 재등록 (Room 참여 완료 후)
                    console.log('🔧 이벤트 리스너 재등록 시작');
                    registerOverlayImageEventListeners();
                } else {
                    console.error(`🔧 종목별 Room 참여 실패: ${data.error}`);
                }
            });
            
            if (typeof isListMode !== 'undefined' && isListMode && typeof listId !== 'undefined' && listId) { 
            // 리스트 오버레이 모드일 때 리스트 오버레이 방에도 참가
            socket.emit('join_list_overlay', '<%= listId %>');
            }
            
            // 경기 상태 표시 설정 로드
            loadMatchStateVisibility();
        });

        // 소켓 연결 실패 이벤트
        socket.on('connect_error', (error) => {
            console.error('❌ 오버레이 페이지 소켓 연결 오류:', error);
            updateConnectionStatus(false);
        });

        // 재연결 시도 이벤트
        socket.on('reconnect_attempt', (attemptNumber) => {
            console.log(`🔄 오버레이 페이지 소켓 재연결 시도 중... (${attemptNumber}번째)`);
            updateConnectionStatus(false);
        });

        // 재연결 실패 이벤트
        socket.on('reconnect_error', (error) => {
            console.error('❌ 오버레이 페이지 소켓 재연결 실패:', error);
            updateConnectionStatus(false);
        });

        // 재연결 완전 실패 이벤트
        socket.on('reconnect_failed', () => {
            console.error('❌ 오버레이 페이지 소켓 재연결 완전 실패');
            updateConnectionStatus(false);
        });

        // 소켓 재연결 이벤트
        socket.on('reconnect', (attemptNumber) => {
            console.log(`🔄 오버레이 페이지 소켓 재연결 성공 (시도 ${attemptNumber}번째)`);
            updateConnectionStatus(true);
            
            // 재연결 시 종목별 룸 재조인
            if (window.matchData?.sport_type) {
                console.log('🔧 재연결 후 종목별 룸 재조인:', window.matchData.sport_type);
                socket.emit('join_sport_room', window.matchData.sport_type);
            }
            
            
            // 🔄 재연결 시 오버레이 페이지 자동 새로고침 (서버 리셋 후 컨트롤 페이지 내용 반영)
            console.log('🔄 재연결 감지 - 오버레이 페이지 자동 새로고침 실행');
            console.log('🔄 새로고침 이유: 서버 재연결 후 컨트롤 페이지 내용 동기화');
            
            // DB 저장 완료를 위해 1초 지연 후 페이지 새로고침
            setTimeout(() => {
                console.log('🔄 1초 지연 후 재연결 새로고침 실행');
                location.reload();
            }, 1000);
        });

        socket.on('disconnect', () => {
            console.log('🔌 서버 연결 끊김');
            updateConnectionStatus(false);
        });

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(connected) {
            // 오버레이 페이지에서는 연결 상태 표시가 없으므로 콘솔 로그만 출력
            if (connected) {
                console.log('✅ 오버레이 페이지 서버 연결됨');
            } else {
                console.log('❌ 오버레이 페이지 서버 연결 끊김');
            }
        }
        
        // 페이지 언로드 시 방에서 나가기
        window.addEventListener('beforeunload', () => {
            socket.emit('leave_all_rooms');
        });

        // match_update 이벤트 처리
        socket.on('match_update', (data) => {
            if (data.matchId === matchId) {
                // 점수 업데이트
                if (data.home_score !== undefined) {
                    const homeScoreElement = document.querySelector('.home-score');
                    if (homeScoreElement) {
                        homeScoreElement.textContent = data.home_score;
                        }
                }
                if (data.away_score !== undefined) {
                    const awayScoreElement = document.querySelector('.away-score');
                    if (awayScoreElement) {
                        awayScoreElement.textContent = data.away_score;
                        }
                }
                
                // 경기 상태 업데이트
                
                // 하단 스트립 점수 업데이트 - match_update 이벤트에서
                
                // 하단 스트립이 표시 중인지 확인
                const bottomStrip = document.getElementById('bottomStrip');
                const isBottomStripVisible = bottomStrip && bottomStrip.style.display !== 'none';
                
                // 하단 스트립이 표시되지 않아도 스코어는 항상 업데이트
                console.log('🔥 ✅ 하단 스트립 스코어 업데이트 진행 (표시 여부 무관)');
                updateBottomStripScore(data.home_score, data.away_score);
            }
        });

        // 실시간 경기 데이터 업데이트 이벤트 처리
        socket.on('match_data_updated', (data) => {
            
            if (data.matchId === matchId) {
                // 점수 업데이트
                const homeScoreElement = document.querySelector('.home-score');
                const awayScoreElement = document.querySelector('.away-score');
                
                if (homeScoreElement && data.home_score !== undefined) {
                    homeScoreElement.textContent = data.home_score;
                    }
                if (awayScoreElement && data.away_score !== undefined) {
                    awayScoreElement.textContent = data.away_score;
                    }
                
                // 경기 상태 업데이트
            } else {
                }
        });

        // 득점 정보 업데이트 이벤트 처리
        socket.on('goalsUpdated', (data) => {
            if (data.matchId === matchId) {
                // 하단 스트립이 표시 중인지 확인
                const bottomStrip = document.getElementById('bottomStrip');
                const isBottomStripVisible = bottomStrip && bottomStrip.style.display !== 'none';
                
                if (isBottomStripVisible) {
                    const homeGoalsCount = data.homeGoals ? data.homeGoals.length : 0;
                    const awayGoalsCount = data.awayGoals ? data.awayGoals.length : 0;
                    const totalGoals = homeGoalsCount + awayGoalsCount;
                    
                    if (totalGoals > 0) {
                        updateBottomStripGoals(data.homeGoals, data.awayGoals);
                        adjustStripSize(homeGoalsCount, awayGoalsCount);
                        } else {
                        hideCenterSection();
                        }
                } else {
                    }
            } else {
                }
        });

        // 하단 스트립 득점 정보 업데이트 함수 (2명씩 가로 배치)
        function updateBottomStripGoals(homeGoals, awayGoals) {
            // 홈팀 득점 목록 업데이트 (2명씩 그룹화)
            const homeGoalsContainer = document.getElementById('strip-home-goals');
            if (homeGoalsContainer) {
                if (homeGoals && homeGoals.length > 0) {
                    // 홈팀: 아래에서부터 위로 쌓기 (역순 처리)
                    let html = '';
                    const reversedGoals = [...homeGoals].reverse(); // 배열 복사 후 역순
                    
                    for (let i = 0; i < reversedGoals.length; i += 2) {
                        const goal1 = reversedGoals[i];
                        const goal2 = reversedGoals[i + 1];
                        
                        html += '<div class="goals-row">';
                        if (goal2) {
                            html += `<div class="goal-item">${goal1.player} ${goal1.time}</div>`;
                            html += `<div class="goal-item">${goal2.player} ${goal2.time}</div>`;
                        } else {
                            html += `<div class="goal-item">${goal1.player} ${goal1.time}</div>`;
                            html += `<div class="goal-item empty"></div>`;
                        }
                        html += '</div>';
                    }
                    
                    homeGoalsContainer.innerHTML = html;
                    console.log('✅ 홈팀 득점 목록 업데이트 완료 (아래에서 위로):', homeGoals.length + '개');
                } else {
                    homeGoalsContainer.innerHTML = '';
                    }
            } else {
                }
            
            // 어웨이팀 득점 목록 업데이트 (2명씩 그룹화)
            const awayGoalsContainer = document.getElementById('strip-away-goals');
            if (awayGoalsContainer) {
                if (awayGoals && awayGoals.length > 0) {
                    // 어웨이팀: 아래에서부터 위로 쌓기 (역순 처리)
                    let html = '';
                    const reversedGoals = [...awayGoals].reverse(); // 배열 복사 후 역순
                    
                    for (let i = 0; i < reversedGoals.length; i += 2) {
                        const goal1 = reversedGoals[i];
                        const goal2 = reversedGoals[i + 1];
                        
                        html += '<div class="goals-row">';
                        if (goal2) {
                            html += `<div class="goal-item">${goal1.player} ${goal1.time}</div>`;
                            html += `<div class="goal-item">${goal2.player} ${goal2.time}</div>`;
                        } else {
                            html += `<div class="goal-item">${goal1.player} ${goal1.time}</div>`;
                            html += `<div class="goal-item empty"></div>`;
                        }
                        html += '</div>';
                    }
                    
                    awayGoalsContainer.innerHTML = html;
                    console.log('✅ 어웨이팀 득점 목록 업데이트 완료 (아래에서 위로):', awayGoals.length + '개');
                } else {
                    awayGoalsContainer.innerHTML = '';
                    }
            } else {
                }
            
        }

        // 저장된 득점 정보 로드 함수
        function loadSavedGoals() {
            
            // 서버에서 현재 매치 정보 가져오기
            fetch(`/api/matches/${matchId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.match_data && data.match_data.goals) {
                        const goals = data.match_data.goals;
                        // 홈팀과 어웨이팀 득점 정보를 모두 로드
                        const homeGoals = goals.home || [];
                        const awayGoals = goals.away || [];
                        
                        // 득점 정보 표시
                        updateBottomStripGoals(homeGoals, awayGoals);
                        // 득점 개수에 따른 스트립 크기 조정
                        adjustStripSize(homeGoals.length, awayGoals.length);
                        
                    } else {
                        // 빈 상태로 초기화
                        updateBottomStripGoals([], []);
                    }
                })
                .catch(error => {
                    // 에러 시 빈 상태로 초기화
                    updateBottomStripGoals([], []);
                });
        }

        // 하단 스트립 표시 시 득점 정보 로드 및 반영 함수
        async function loadAndDisplayGoals() {
            
            try {
                // 서버에서 현재 매치 정보 가져오기
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    hideCenterSection();
                    return;
                }
                
                const data = await response.json();
                if (data.match_data && data.match_data.goals) {
                    const goals = data.match_data.goals;
                    // 홈팀과 어웨이팀 득점 정보를 모두 로드
                    const homeGoals = goals.home || [];
                    const awayGoals = goals.away || [];
                    const totalGoals = homeGoals.length + awayGoals.length;
                    
                    if (totalGoals > 0) {
                        updateBottomStripGoals(homeGoals, awayGoals);
                        adjustStripSize(homeGoals.length, awayGoals.length);
                        } else {
                        hideCenterSection();
                        }
                    
                } else {
                    hideCenterSection();
                }
                
            } catch (error) {
                hideCenterSection();
            }
        }

        // 중단 섹션 숨김 함수
        function hideCenterSection() {
            
            const centerSection = document.querySelector('.strip-center-section');
            const bottomStrip = document.getElementById('bottomStrip');
            
            if (centerSection && bottomStrip) {
                // 중단 섹션 숨김
                centerSection.style.display = 'none';
                centerSection.style.height = '0px';
                
                // 하단 스트립은 항상 고정 위치 유지
                bottomStrip.style.transform = 'translateX(-50%)';
                
                }
        }

        // 중단 섹션 표시 함수
        function showCenterSection() {
            
            const centerSection = document.querySelector('.strip-center-section');
            
            if (centerSection) {
                centerSection.style.display = 'flex';
                }
        }

        // 스트립 크기 조정 함수 (하단 스트립 고정, 중단 섹션만 확장)
        function adjustStripSize(homeGoalsCount, awayGoalsCount) {
            
            const centerSection = document.querySelector('.strip-center-section');
            const bottomStrip = document.getElementById('bottomStrip');
            
            if (centerSection && bottomStrip) {
                // 중단 섹션 표시
                showCenterSection();
                
                // 득점 개수에 따라 중단 섹션 높이 조정 (단계별 증가)
                const maxGoals = Math.max(homeGoalsCount, awayGoalsCount);
                let centerHeight = 0; // 기본 높이 0px
                
                if (maxGoals > 0) {
                    // 단계별 높이 계산 (50px 배수)
                    if (maxGoals <= 2) {
                        centerHeight = 50; // 1단: 1-2개 (기본 높이)
                    } else if (maxGoals <= 4) {
                        centerHeight = 100; // 2단: 3-4개 (2배 높이)
                    } else if (maxGoals <= 6) {
                        centerHeight = 150; // 3단: 5-6개 (3배 높이)
                    } else if (maxGoals <= 8) {
                        centerHeight = 200; // 4단: 7-8개 (4배 높이)
                    } else {
                        centerHeight = 250; // 5단 이상: 9개 이상 (5배 높이)
                    }
                    
                    console.log('득점 개수별 단계:', {
                        득점개수: maxGoals,
                        단계: Math.ceil(maxGoals / 2),
                        높이: centerHeight + 'px'
                    });
                }
                
                // 중단 섹션 높이 설정
                centerSection.style.height = centerHeight + 'px';
                // 하단 스트립은 항상 고정 위치 유지 (bottom: 30px)
                bottomStrip.style.transform = 'translateX(-50%)';
                }
        }

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                // 팀명 업데이트
                const homeTeamElement = document.getElementById('home-team-name');
                const awayTeamElement = document.getElementById('away-team-name');
                
                if (homeTeamElement && data.home_team) {
                    homeTeamElement.textContent = data.home_team;
                    }
                if (awayTeamElement && data.away_team) {
                    awayTeamElement.textContent = data.away_team;
                    }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    }
                
                // 라인업 업데이트
                if (data.match_data && data.match_data.lineup) {
                    console.log('🔧 라인업 업데이트 수신:', data.match_data.lineup);
                    displayLineup(data.match_data.lineup, 'home'); // 기본적으로 홈팀 표시
                }
                
                // 점수 업데이트 - 강화된 실시간 업데이트
                
                // 스코어보드 점수 업데이트
                const homeScoreInput = document.getElementById('home-score');
                const awayScoreInput = document.getElementById('away-score');
                
                if (homeScoreInput && data.home_score !== undefined) {
                    homeScoreInput.value = data.home_score;
                    }
                if (awayScoreInput && data.away_score !== undefined) {
                    awayScoreInput.value = data.away_score;
                    }
                
                
                // 배구 스코어보드 점수 업데이트 (토탈 세트 승리 수는 원형 표시로)
                // data.home_score와 data.away_score는 토탈 세트 승리 수
                // data.match_data.home_score와 data.match_data.away_score는 현재 세트 점수
                
                // 토탈 세트 승리 수 업데이트 (원형 표시) - 0이 아닌 경우에만 업데이트
                if (data.home_score !== undefined || data.away_score !== undefined) {
                    console.log('🔧 토탈 세트 승리 수 업데이트:', data.home_score, data.away_score);
                    // 서버에서 받은 데이터가 유효한 경우에만 업데이트 (0이 아닌 경우)
                    if (data.home_score > 0 || data.away_score > 0) {
                        updateSetWinsCircles(data.home_score || 0, data.away_score || 0);
                    } else {
                        console.log('🔧 서버에서 받은 매치 점수가 0이므로 업데이트하지 않음');
                    }
                }
                
                // 서브권 업데이트
                if (data.match_data && data.match_data.servingTeam) {
                    console.log('🔧 서브권 업데이트 수신:', data.match_data.servingTeam);
                    console.log('🔧 updateServeIndicator 함수 호출 전');
                    updateServeIndicator(data.match_data.servingTeam);
                    console.log('🔧 updateServeIndicator 함수 호출 후');
                }
                
                // 세트 변경 업데이트
                if (data.match_data && data.match_data.current_set) {
                    console.log('🔧 세트 변경 업데이트 수신:', data.match_data.current_set);
                    updateCurrentSetDisplay(data.match_data.current_set);
                }
                
                // 세트 점수 업데이트
                if (data.match_data && data.match_data.set_scores) {
                    console.log('🔧 세트 점수 업데이트 수신:', data.match_data.set_scores);
                    updateSetScoresDisplay(data.match_data.set_scores);
                }
                
                // 세트 승리 업데이트 (원형 표시)
                if (data.match_data && (data.match_data.home_wins !== undefined || data.match_data.away_wins !== undefined)) {
                    console.log('🔧 세트 승리 업데이트 수신:', data.match_data.home_wins, data.match_data.away_wins);
                    updateSetWinsCircles(data.match_data.home_wins, data.match_data.away_wins);
                }
                
                // 세트제 변경 시 원형 표시 개수 조정
                if (data.match_data && data.match_data.setFormat) {
                    console.log('🔧 세트제 변경 수신:', data.match_data.setFormat);
                    updateSetFormatCircles(data.match_data.setFormat);
                }
                
                // 현재 세트 점수 업데이트
                if (data.match_data && data.match_data.home_score !== undefined && data.match_data.away_score !== undefined) {
                    console.log('🔧 현재 세트 점수 업데이트 수신:', data.match_data.home_score, data.match_data.away_score);
                    
                    // 현재 세트 점수 업데이트
                    const homeCurrentScore = document.getElementById('home-current-score');
                    const awayCurrentScore = document.getElementById('away-current-score');
                    
                    if (homeCurrentScore) {
                        homeCurrentScore.textContent = data.match_data.home_score;
                    }
                    if (awayCurrentScore) {
                        awayCurrentScore.textContent = data.match_data.away_score;
                    }
                    
                    console.log('✅ 현재 세트 점수 업데이트 완료:', data.match_data.home_score, data.match_data.away_score);
                }
                
                // 경기 종료 처리
                if (data.match_data && data.match_data.status === '경기종료') {
                    console.log('🔧 경기 종료 수신:', data.match_data);
                    
                    // 최종 세트 점수 업데이트
                    if (data.match_data.set_scores) {
                        console.log('🔧 최종 세트 점수 업데이트:', data.match_data.set_scores);
                        updateSetScoresDisplay(data.match_data.set_scores);
                    }
                    
                    // 최종 매치 점수 업데이트 (원형 표시)
                    if (data.match_data.home_wins !== undefined && data.match_data.away_wins !== undefined) {
                        console.log('🔧 최종 매치 점수 업데이트:', data.match_data.home_wins, data.match_data.away_wins);
                        updateSetWinsCircles(data.match_data.home_wins, data.match_data.away_wins);
                    }
                    
                    // 경기 종료 상태 표시
                    const matchStatusElement = document.getElementById('match-status');
                    if (matchStatusElement) {
                        matchStatusElement.textContent = '경기종료';
                        matchStatusElement.style.color = '#ff6b6b';
                        matchStatusElement.style.fontWeight = 'bold';
                    }
                    
                    console.log('✅ 경기 종료 처리 완료');
                }
            }
        });

        // 경기 상황 업데이트 이벤트 처리
        socket.on('matchStateUpdated', (data) => {
            if (data.matchId === matchId) {
                console.log('🔧 경기 상황 업데이트 수신:', data.matchState);
                
                // 경기 상황 표시 업데이트
                const matchStateElement = document.querySelector('.match-state');
                if (matchStateElement) {
                    matchStateElement.textContent = data.matchState;
                    console.log('✅ 경기 상황 업데이트 완료:', data.matchState);
                } else {
                    console.log('⚠️ 경기 상황 표시 요소를 찾을 수 없습니다.');
                }
                
                // 하단 스트립 경기 상황 업데이트
                const stripMatchState = document.getElementById('strip-match-state');
                if (stripMatchState) {
                    stripMatchState.textContent = data.matchState;
                    console.log('✅ 하단 스트립 경기 상황 업데이트 완료:', data.matchState);
                } else {
                    console.log('⚠️ 하단 스트립 경기 상황 요소를 찾을 수 없습니다.');
                }
            }
        });

        // 배구 특화 함수들
        function updateServeIndicator(servingTeam) {
            console.log('🔧 updateServeIndicator 함수 시작:', servingTeam);
            const indicator = document.getElementById('serveIndicator');
            console.log('🔧 serveIndicator 요소:', indicator);
            
            if (indicator) {
                // 기존 모든 서브권 도형 제거
                indicator.innerHTML = '';
                
                // 새로운 서브권 도형 생성 (한 번에 하나만)
                if (servingTeam === 'home' || servingTeam === 'away') {
                    indicator.innerHTML = `<div class="serve-triangle ${servingTeam}"></div>`;
                    console.log('🔧 새로운 triangle 생성 완료:', servingTeam);
                } else {
                    console.log('🔧 잘못된 servingTeam 값:', servingTeam);
                }
            } else {
                console.log('🔧 serveIndicator 요소를 찾을 수 없음');
            }
        }
        
        function updateSetWins(homeWins, awayWins) {
            const homeWinsElement = document.querySelector('.home-team .set-wins');
            const awayWinsElement = document.querySelector('.away-team .set-wins');
            if (homeWinsElement) homeWinsElement.textContent = homeWins;
            if (awayWinsElement) awayWinsElement.textContent = awayWins;
        }
        
        // 현재 세트 표시 업데이트 함수 (오버레이 페이지용)
        function updateCurrentSetDisplay(currentSet) {
            console.log('=== updateCurrentSetDisplay 함수 호출 (오버레이) ===');
            console.log('currentSet:', currentSet);
            
            // 1. 현재 세트 표시 업데이트
            const currentSetElement = document.getElementById('current-set');
            if (currentSetElement) {
                currentSetElement.textContent = currentSet + '세트';
                console.log('현재 세트 표시 업데이트:', currentSet + '세트');
            }
            
            // 2. 현재 세트 점수 초기화 (새 세트 시작 시)
            const homeCurrentScore = document.getElementById('home-current-score');
            const awayCurrentScore = document.getElementById('away-current-score');
            
            if (homeCurrentScore) {
                homeCurrentScore.textContent = '0';
            }
            if (awayCurrentScore) {
                awayCurrentScore.textContent = '0';
            }
            
            console.log('✅ 오버레이 세트 변경 UI 업데이트 완료');
        }
        
        // 세트 점수 표시 업데이트 함수
        function updateSetScoresDisplay(setScores) {
            console.log('=== updateSetScoresDisplay 함수 호출 ===');
            console.log('setScores:', setScores);
            
            // 세트 점수 원형 표시 업데이트
            for (let set = 1; set <= 5; set++) {
                const homeSetElement = document.getElementById(`home-set-${set}`);
                const awaySetElement = document.getElementById(`away-set-${set}`);
                
                if (homeSetElement && setScores.home && setScores.home[set] !== undefined) {
                    const homeScore = setScores.home[set];
                    homeSetElement.textContent = homeScore;
                    console.log(`홈팀 ${set}세트 점수 업데이트:`, homeScore);
                }
                
                if (awaySetElement && setScores.away && setScores.away[set] !== undefined) {
                    const awayScore = setScores.away[set];
                    awaySetElement.textContent = awayScore;
                    console.log(`어웨이팀 ${set}세트 점수 업데이트:`, awayScore);
                }
            }
        }
        
        // 세트 승리 표시 업데이트 함수
        function updateSetWinsDisplay(homeWins, awayWins) {
            console.log('=== updateSetWinsDisplay 함수 호출 ===');
            console.log('homeWins:', homeWins, 'awayWins:', awayWins);
            
            // 세트 승리 원형 표시 업데이트
            for (let set = 1; set <= 5; set++) {
                const homeWinElement = document.getElementById(`home-win-${set}`);
                const awayWinElement = document.getElementById(`away-win-${set}`);
                
                if (homeWinElement) {
                    if (set <= homeWins) {
                        homeWinElement.classList.add('won');
                        homeWinElement.classList.remove('lost');
                    } else {
                        homeWinElement.classList.remove('won');
                        homeWinElement.classList.add('lost');
                    }
                }
                
                if (awayWinElement) {
                    if (set <= awayWins) {
                        awayWinElement.classList.add('won');
                        awayWinElement.classList.remove('lost');
                    } else {
                        awayWinElement.classList.remove('won');
                        awayWinElement.classList.add('lost');
                    }
                }
            }
        }

        // 세트 득점 동그라미 업데이트
        function updateSetWinsCircles(homeWins, awayWins) {
            console.log('=== updateSetWinsCircles 함수 호출 ===');
            console.log('homeWins:', homeWins, 'awayWins:', awayWins);
            
            const homeCircles = document.querySelectorAll('#home-set-wins-circles .set-wins-circle');
            const awayCircles = document.querySelectorAll('#away-set-wins-circles .set-wins-circle');
            
            console.log('홈팀 원형 개수:', homeCircles.length);
            console.log('어웨이팀 원형 개수:', awayCircles.length);
            
            // 홈팀 세트 득점 업데이트
            homeCircles.forEach((circle, index) => {
                if (index < homeWins) {
                    circle.classList.add('filled');
                    console.log(`홈팀 ${index + 1}번째 원 채움`);
                } else {
                    circle.classList.remove('filled');
                    console.log(`홈팀 ${index + 1}번째 원 비움`);
                }
            });
            
            // 어웨이팀 세트 득점 업데이트
            awayCircles.forEach((circle, index) => {
                if (index < awayWins) {
                    circle.classList.add('filled');
                    console.log(`어웨이팀 ${index + 1}번째 원 채움`);
                } else {
                    circle.classList.remove('filled');
                    console.log(`어웨이팀 ${index + 1}번째 원 비움`);
                }
            });
            
            console.log('✅ 세트 승리 원형 표시 업데이트 완료');
        }
        
        // 세트제에 따른 원형 표시 개수 조정
        function updateSetFormatCircles(setFormat) {
            console.log('=== updateSetFormatCircles 함수 호출 ===');
            console.log('setFormat:', setFormat);
            
            const homeCircles = document.querySelectorAll('#home-set-wins-circles .set-wins-circle');
            const awayCircles = document.querySelectorAll('#away-set-wins-circles .set-wins-circle');
            
            // 모든 원을 숨김
            homeCircles.forEach(circle => circle.style.display = 'none');
            awayCircles.forEach(circle => circle.style.display = 'none');
            
            // 세트제에 따라 원 표시
            for (let i = 0; i < setFormat; i++) {
                if (homeCircles[i]) {
                    homeCircles[i].style.display = 'inline-block';
                }
                if (awayCircles[i]) {
                    awayCircles[i].style.display = 'inline-block';
                }
            }
            
            console.log(`✅ ${setFormat}세트제에 맞게 원형 표시 조정 완료`);
        }
        
        
        // 배구 데이터 업데이트 처리
        function handleVolleyballUpdate(data) {
            // 현재 표시 중인 경기만 처리
            if (data.matchId !== matchId) {
                return;
            }
            
            // 서브권 업데이트
            if (data.servingTeam) {
                console.log('서브권 업데이트:', data.servingTeam);
                updateServeIndicator(data.servingTeam);
            }
        }


        // 배구 특화 소켓 이벤트
        socket.on('volleyball_data', handleVolleyballUpdate);
        socket.on('set_score_updated', handleVolleyballUpdate);
        socket.on('serve_changed', handleVolleyballUpdate);

        // 경기 상태 표시 설정 변경 이벤트 처리
        socket.on('soccer_match_state_visibility_changed', function(data) {
            const matchStateContainer = document.getElementById('matchStateContainer');
            if (matchStateContainer) {
                matchStateContainer.style.display = data.showMatchState ? 'block' : 'none';
                }
        });

        
        // 오버레이 이미지 변경 이벤트 처리
        socket.on('overlay_image_updated', function(data) {
            if (data.action === 'uploaded') {
                // 새 이미지가 업로드된 경우
                const overlayImageContainer = document.getElementById('overlayImage');
                if (overlayImageContainer) {
                    const img = document.createElement('img');
                    img.src = data.imagePath;
                    img.alt = '오버레이 이미지';
                    img.onload = () => {
                        overlayImageContainer.innerHTML = '';
                        overlayImageContainer.appendChild(img);
                        overlayImageContainer.classList.add('show');
                    };
                    img.onerror = (error) => {
                        overlayImageContainer.classList.remove('show');
                    };
                }
            } else if (data.action === 'deleted') {
                // 이미지가 삭제된 경우
                const overlayImageContainer = document.getElementById('overlayImage');
                if (overlayImageContainer) {
                    overlayImageContainer.classList.remove('show');
                    overlayImageContainer.innerHTML = '';
                    }
            }
        });

        // 스포츠 오버레이 이미지 변경 이벤트 처리 (새로운 이벤트)
        socket.on('sport_overlay_image_updated', function(data) {
            console.log('스포츠 오버레이 이미지 업데이트:', data);
            
            if (data.action === 'uploaded') {
                // 새 이미지가 업로드된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'deleted') {
                // 이미지가 삭제된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'activated') {
                // 이미지가 활성화된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'status_changed') {
                // 이미지 상태가 변경된 경우 - 활성화된 이미지들 다시 로드
                console.log('이미지 상태 변경됨:', data);
                loadOverlayImage();
            }
        });

        // 오버레이 이미지 상태 변경 실시간 이벤트 처리 (동적 처리)
        socket.on('overlay_image_status_changed', function(data) {
            console.log('🔧 오버레이 이미지 상태 변경 실시간 이벤트:', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교 (window.matchData 사용)
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 스포츠 타입 일치, 이미지 처리 시작');
                
                if (data.isActive && data.imageData) {
                    // 이미지 활성화 - 해당 이미지만 추가 표시
                    console.log('🔧 오버레이 이미지 활성화:', data.imageData);
                    addOverlayImage(data.imageData);
                } else if (!data.isActive && data.imageData) {
                    // 이미지 비활성화 - 해당 이미지만 제거
                    console.log('🔧 오버레이 이미지 비활성화:', data.imageData);
                    removeOverlayImage(data.imageData.id);
                }
            } else {
                console.log('🔧 스포츠 타입 불일치, Room 재참여 시도');
                // 스포츠 타입이 일치하지 않으면 Room 재참여 시도
                if (window.matchData?.sport_type) {
                    console.log('🔧 Room 재참여 요청:', window.matchData.sport_type);
                    socket.emit('join_sport_room', window.matchData.sport_type);
                }
            }
        });

        // 오버레이 페이지 새로고침 이벤트 처리
        socket.on('overlay_page_refresh', function(data) {
            console.log('🔧 오버레이 페이지 새로고침 신호 수신:', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 오버레이 페이지 새로고침 실행:', data.reason);
                // DB 저장 완료를 위해 500ms 지연 후 페이지 새로고침
                setTimeout(() => {
                    console.log('🔧 500ms 지연 후 페이지 새로고침 실행');
                    location.reload();
                }, 500);
            } else {
                console.log('🔧 스포츠 타입 불일치로 새로고침 건너뜀');
                // 대안: window.matchData가 없을 때도 새로고침 (디버깅용)
                if (!window.matchData) {
                    console.log('🔧 window.matchData가 없어서 강제 새로고침 실행');
                    setTimeout(() => {
                        console.log('🔧 500ms 지연 후 강제 새로고침 실행');
                        location.reload();
                    }, 500);
                }
            }
        });

        // 팀명 업데이트 이벤트 처리
        socket.on('teamNameUpdated', function(data) {
            if (data.matchId === matchId) {
                const team = data.team;
                const teamName = data.teamName;
                
                // 팀명 요소 업데이트
                const teamNameElements = document.querySelectorAll(`.team-section.${team} .team-name`);
                teamNameElements.forEach(element => {
                    element.textContent = teamName;
                });

                }
        });

        // 팀 색상 업데이트 이벤트 처리
        socket.on('teamColorUpdated', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                const teamColor = data.teamColor;
                const headerText = data.headerText;
                
                // 팀 색상 업데이트
                const teamElements = document.querySelectorAll(`.team-section.${teamType}`);
                teamElements.forEach(element => {
                    element.style.backgroundColor = teamColor;
                });
                
                // 팀 헤더 텍스트 업데이트 (있는 경우)
                if (headerText) {
                    const headerElements = document.querySelectorAll(`.team-section.${teamType} .team-header`);
                    headerElements.forEach(element => {
                        element.textContent = headerText;
                    });
                }
                
                }
        });

        // 데이터 변경 이벤트 처리 (DB에서 최신 데이터 로드)
        socket.on('dataChanged', async function(data) {
            console.log('🔧 dataChanged 이벤트 수신:', data);
            console.log('🔧 현재 경기 ID:', matchId);
            console.log('🔧 이벤트 경기 ID:', data.matchId);
            console.log('🔧 이벤트 타입:', data.type);
            console.log('🔧 팀 타입:', data.teamType);
            
            if (data.matchId === matchId) {
                console.log('🔧 동일 경기 dataChanged 이벤트 - 데이터 재로드 시작');
                // DB 저장 완료를 위해 500ms 지연 후 데이터 재로드
                setTimeout(async () => {
                    try {
                        console.log('🔧 500ms 지연 후 데이터 재로드 실행');
                        await reloadAllDataFromDB();
                        console.log('🔧 데이터 재로드 완료');
                    } catch (error) {
                        console.error('🔧 데이터 재로드 오류:', error);
                    }
                }, 500);
            } else {
                console.log('🔧 다른 경기의 dataChanged 이벤트로 무시');
            }
        });

        // 소켓 연결 상태 확인 (중복 제거됨 - 위에서 처리)

        // 팀 위치 변경 이벤트 처리
        socket.on('teamsSwapped', function(data) {
            if (data.matchId === matchId) {
                // 팀명 업데이트
                const homeTeamElements = document.querySelectorAll('.team-section.home .team-name');
                const awayTeamElements = document.querySelectorAll('.team-section.away .team-name');
                
                homeTeamElements.forEach(element => {
                    element.textContent = data.home_team;
                });
                awayTeamElements.forEach(element => {
                    element.textContent = data.away_team;
                });
                
                // 팀명 길이에 따른 폰트 사이즈 조정
                document.querySelectorAll('.team-name').forEach(function(el) {
                    if (el.textContent.trim().length >= 8) {
                        el.classList.add('small-font');
                    } else {
                        el.classList.remove('small-font');
                    }
                });

                // 점수 업데이트
                const homeScoreElements = document.querySelectorAll('.home-score');
                const awayScoreElements = document.querySelectorAll('.away-score');
                
                homeScoreElements.forEach(element => {
                    element.textContent = data.home_score;
                });
                awayScoreElements.forEach(element => {
                    element.textContent = data.away_score;
                });
                
                // 팀 컬러 업데이트 (서버에서 최신 데이터 가져오기)
                updateTeamColorsAfterSwap();
                
                }
        });

        // 팀 위치 변경 후 팀 컬러 업데이트 함수
        async function updateTeamColorsAfterSwap() {
            try {
                
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    throw new Error('경기 데이터 로드 실패');
                }
                
                const matchData = await response.json();
                // 직접 필드에서 홈팀 컬러 업데이트
                if (matchData.home_team_color) {
                    const homeTeamElements = document.querySelectorAll('.team-section.home');
                    homeTeamElements.forEach(element => {
                        element.style.backgroundColor = matchData.home_team_color;
                    });
                    console.log('오버레이 홈팀 컬러 업데이트 (직접 필드):', matchData.home_team_color);
                }
                
                // 직접 필드에서 어웨이팀 컬러 업데이트
                if (matchData.away_team_color) {
                    const awayTeamElements = document.querySelectorAll('.team-section.away');
                    awayTeamElements.forEach(element => {
                        element.style.backgroundColor = matchData.away_team_color;
                    });
                    console.log('오버레이 어웨이팀 컬러 업데이트 (직접 필드):', matchData.away_team_color);
                }
                
                // match_data에서도 팀 컬러 확인 (백업용)
                if (matchData.match_data) {
                    const matchDataObj = matchData.match_data;
                    // match_data에서 홈팀 컬러 업데이트 (직접 필드가 없을 때만)
                    if (matchDataObj.home_team_color && !matchData.home_team_color) {
                        const homeTeamElements = document.querySelectorAll('.team-section.home');
                        homeTeamElements.forEach(element => {
                            element.style.backgroundColor = matchDataObj.home_team_color;
                        });
                        console.log('오버레이 홈팀 컬러 업데이트 (match_data):', matchDataObj.home_team_color);
                    }
                    
                    // match_data에서 어웨이팀 컬러 업데이트 (직접 필드가 없을 때만)
                    if (matchDataObj.away_team_color && !matchData.away_team_color) {
                        const awayTeamElements = document.querySelectorAll('.team-section.away');
                        awayTeamElements.forEach(element => {
                            element.style.backgroundColor = matchDataObj.away_team_color;
                        });
                        console.log('오버레이 어웨이팀 컬러 업데이트 (match_data):', matchDataObj.away_team_color);
                    }
                }

            } catch (error) {
                }
        }

        // 팀 로고 업데이트 이벤트 처리

        // 로고 표시 토글 이벤트 처리
        socket.on('logo-display-toggled', function(data) {
            if (data.matchId === matchId) {
                toggleLogoDisplay(data.teamType, data.showLogo);
            }
        });

        // 로고 표시 토글 함수
        function toggleLogoDisplay(teamType, showLogo) {
            
            const logoContainer = document.getElementById(`${teamType}-team-logo-container`);
            const logoImage = logoContainer ? logoContainer.querySelector('img') : null;
            const teamName = document.querySelector(`.team-section.${teamType} .team-name`);
            // DB에서 가져온 로고 정보가 있다면 적용
            if (logoState[teamType]) {
                const logoInfo = logoState[teamType];
                // 로고 이미지 업데이트
                if (logoImage && logoInfo.path) {
                    // 올바른 경로로 수정
                    let correctPath = logoInfo.path.startsWith('/') ? logoInfo.path : `/${logoInfo.path}`;
                    
                    // 경로에서 불필요한 부분 제거 (soccer/1002SC9485/ 제거)
                    if (correctPath.includes('/soccer/') && correctPath.includes('/TEAMLOGO/')) {
                        const teamLogoIndex = correctPath.indexOf('/TEAMLOGO/');
                        correctPath = correctPath.substring(teamLogoIndex);
                    }
                    
                    logoImage.src = correctPath;
                    logoImage.style.display = showLogo ? 'block' : 'none';
                }
                
                // 로고 배경색 업데이트
                if (logoContainer) {
                    logoContainer.style.backgroundColor = logoInfo.bgColor || '#ffffff';
                }
            }
            
            // 팀로고 사용안함 상태 확인 (로고 섹션이 숨겨져 있는지 확인)
            const logoSection = document.querySelector(`.team-logo-section.${teamType}-logo`);
            const isTeamLogoDisabled = logoSection && (logoSection.style.display === 'none' || logoSection.style.visibility === 'hidden');
            
            // 팀로고 사용안함 상태를 localStorage에서도 확인
            const storedLogoStates = localStorage.getItem('logoDisplayStates');
            let globalLogoDisplayState = false;
            if (storedLogoStates) {
                try {
                    const parsed = JSON.parse(storedLogoStates);
                    globalLogoDisplayState = parsed.globalLogoDisplayState || false;
                } catch (e) {
                    }
            }
            
            // 팀로고 사용안함 상태를 더 정확하게 감지
            const isTeamLogoDisabledFinal = isTeamLogoDisabled || !globalLogoDisplayState;
            
            if (logoContainer) {
                if (showLogo) {
                    // 로고 표시: 폭 100%
                    logoContainer.style.width = '100%';
                    if (teamType === 'away') {
                        logoContainer.style.marginLeft = '0'; // 어웨이팀 정렬 초기화
                    }
                    if (logoImage) logoImage.style.display = 'block';
                    
                    } else {
                    // 배경색만 표시: 폭 25%
                    logoContainer.style.width = '25%';
                    if (teamType === 'away') {
                        logoContainer.style.marginLeft = 'auto'; // 어웨이팀 오른쪽 정렬
                    }
                    if (logoImage) logoImage.style.display = 'none';
                    
                    }
            } else {
                }
            
            }

        // 로고 표시 상태 로드 및 적용
        function loadAndApplyLogoDisplayStates() {
            try {
                const savedStates = localStorage.getItem('logoDisplayStates');
                if (savedStates) {
                    const logoDisplayStates = JSON.parse(savedStates);
                    // 각 팀의 상태 적용
                    ['home', 'away'].forEach(teamType => {
                        if (logoDisplayStates[teamType] !== undefined) {
                            toggleLogoDisplay(teamType, logoDisplayStates[teamType]);
                        }
                    });
                }
            } catch (error) {
                }
        }
        
        // 팀로고 표시 모드 상태 로드 및 적용
        async function loadAndApplyLogoDisplayMode() {
            try {
                
                const response = await fetch(`/api/matches/${matchId}/team-logo-display-mode`);
                
                if (response.ok) {
                    const data = await response.json();
                    const displayMode = data.displayMode;
                    
                    // 표시 모드에 따라 로고 표시 상태 설정
                    const showLogo = displayMode === 'logo';
                    
                    // 홈팀과 어웨이팀 모두에 적용
                    ['home', 'away'].forEach(teamType => {
                        toggleLogoDisplay(teamType, showLogo);
                    });
                } else {
                    }
            } catch (error) {
                }
        }

        // 팀 로고 삭제 이벤트 처리
        socket.on('teamLogoRemoved', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                
                // 현재 팀의 상태 초기화
                logoState[teamType] = {
                    path: '',
                    bgColor: '#ffffff',
                    teamName: data.teamName || (teamType === 'home' ? '<%= match.home_team %>' : '<%= match.away_team %>')
                };
                
                // UI 업데이트
                updateTeamLogo(teamType, logoState[teamType]);
            }
        });

        // 팀로고 사용 상태 불러오기 함수
        async function loadTeamLogoVisibility() {
            try {
                const response = await fetch(`/api/soccer-team-logo-visibility/${matchId}`);
                
                if (response.ok) {
                    const data = await response.json();
                    // API 응답 구조: { success: true, useLogos: false }
                    const useLogos = data.useLogos;

                    // 팀로고 가시성 적용
                    updateTeamLogoVisibility(useLogos);
                } else {
                    console.log('팀로고 사용 상태 불러오기 실패, 기본값(true) 사용');
                    updateTeamLogoVisibility(true);
                }
            } catch (error) {
                updateTeamLogoVisibility(true);
            }
        }

        // 팀로고 표시 모드 상태 불러오기 함수
        async function loadTeamLogoDisplayMode() {
            try {
                
                const response = await fetch(`/api/matches/${matchId}/team-logo-display-mode`);
                if (response.ok) {
                    const data = await response.json();
                    const displayMode = data.displayMode;
                    
                    // 표시 모드에 따라 UI 업데이트
                    const showLogo = displayMode === 'logo';
                    // 홈팀과 어웨이팀 모두에 적용
                    ['home', 'away'].forEach(teamType => {
                        toggleLogoDisplay(teamType, showLogo);
                    });
                    
                    } else {
                    console.log('팀로고 표시 모드 불러오기 실패, 기본값(logo) 사용');
                    // 기본값으로 로고 표시 모드 적용
                    ['home', 'away'].forEach(teamType => {
                        toggleLogoDisplay(teamType, true);
                    });
                }
            } catch (error) {
                // 오류 시 기본값으로 로고 표시 모드 적용
                ['home', 'away'].forEach(teamType => {
                    toggleLogoDisplay(teamType, true);
                });
            }
        }

        // 통합된 오버레이 초기화 함수
        async function initializeOverlay() {
            try {
                console.log('🔧 오버레이 통합 초기화 시작');
                
                // 1. 경기 데이터 로드 (REST API 우선)
                await reloadAllDataFromDB();
                
                // 2. 오버레이 전용 데이터 로드
                await loadOverlaySpecificData();
                
                // 3. UI 초기화
                initializeOverlayUI();
                
                // 4. 새로고침 시 데이터 동기화를 위한 추가 로딩
                console.log('🔧 새로고침 시 데이터 동기화 시작');
                await refreshOverlayDataFromDB();
                
                console.log('🔧 오버레이 통합 초기화 완료');
            } catch (error) {
                console.error('❌ 오버레이 초기화 실패:', error);
            }
        }

        // 오버레이 전용 데이터 로드 함수
        async function loadOverlaySpecificData() {
            try {
                console.log('🔧 오버레이 전용 데이터 로드 시작');
                
                // 오버레이 페이지 전용 데이터만 로드
                await Promise.all([
                    loadInitialLogos(),                    // 팀로고
                    loadOverlayImage(),                   // 오버레이 이미지
                    loadAndApplyLogoDisplayStates(),      // 로고 표시 상태
                    loadAndApplyLogoDisplayMode()         // 로고 표시 모드
                ]);
                
                console.log('🔧 오버레이 전용 데이터 로드 완료');
            } catch (error) {
                console.error('❌ 오버레이 전용 데이터 로드 실패:', error);
            }
        }

        // 오버레이 UI 초기화 함수
        function initializeOverlayUI() {
            try {
                console.log('🔧 오버레이 UI 초기화 시작');
                
                // 팀 색상 적용
                if (homeTeamColor && awayTeamColor) {
                    updateTeamColors(homeTeamColor, awayTeamColor);
                    console.log('🔧 초기 팀 컬러 적용 완료:', { homeTeamColor, awayTeamColor });
                }
                
                // 팀명 폰트 크기 조정
                document.querySelectorAll('.team-name').forEach(function(el) {
                    if (el.textContent.trim().length >= 8) {
                        el.classList.add('small-font');
                    } else {
                        el.classList.remove('small-font');
                    }
                });
                
                // 하단 스트립 초기화
                initializeBottomStripScore();
                
                console.log('🔧 오버레이 UI 초기화 완료');
            } catch (error) {
                console.error('❌ 오버레이 UI 초기화 실패:', error);
            }
        }

        // 새로고침 시 오버레이 데이터 동기화 함수
        async function refreshOverlayDataFromDB() {
            try {
                console.log('🔧 새로고침 시 오버레이 데이터 동기화 시작');
                
                // 1. REST API로 최신 경기 데이터 로드
                const response = await fetch(`/api/matches/${matchId}`);
                if (response.ok) {
                    const matchData = await response.json();
                    console.log('🔧 DB에서 최신 경기 데이터 로드 완료:', matchData);
                    
                    // 2. 현재 세트 점수 복원
                    if (matchData.match_data && matchData.match_data.current_set) {
                        const currentSet = matchData.match_data.current_set;
                        const homeScore = matchData.match_data.home_score || 0;
                        const awayScore = matchData.match_data.away_score || 0;
                        
                        // 상단 스코어보드 업데이트
                        const homeScoreElement = document.querySelector('#home-score');
                        const awayScoreElement = document.querySelector('#away-score');
                        if (homeScoreElement) homeScoreElement.textContent = homeScore;
                        if (awayScoreElement) awayScoreElement.textContent = awayScore;
                        
                        // 하단 스트립 스코어 업데이트
                        updateBottomStripScore(homeScore, awayScore);
                        
                        console.log(`🔧 현재 세트 ${currentSet} 점수 복원: 홈팀 ${homeScore}, 어웨이팀 ${awayScore}`);
                    }
                    
                    // 3. 매치 점수(세트 승리) 복원
                    if (matchData.match_data && (matchData.match_data.home_wins !== undefined || matchData.match_data.away_wins !== undefined)) {
                        const homeWins = matchData.match_data.home_wins || 0;
                        const awayWins = matchData.match_data.away_wins || 0;
                        
                        // 세트 승리 표시 업데이트
                        updateSetWinsDisplay(homeWins, awayWins);
                        
                        console.log('🔧 매치 점수(세트 승리) 복원 완료:', { homeWins, awayWins });
                    }
                    
                    // 4. 팀 색상 복원
                    if (matchData.home_team_color && matchData.away_team_color) {
                        homeTeamColor = matchData.home_team_color;
                        awayTeamColor = matchData.away_team_color;
                        updateTeamColors(homeTeamColor, awayTeamColor);
                        console.log('🔧 팀 색상 복원 완료:', { homeTeamColor, awayTeamColor });
                    }
                    
                    // 5. 팀명 복원
                    if (matchData.home_team) {
                        const homeTeamElements = document.querySelectorAll('.team-section.home .team-name');
                        homeTeamElements.forEach(el => el.textContent = matchData.home_team);
                    }
                    if (matchData.away_team) {
                        const awayTeamElements = document.querySelectorAll('.team-section.away .team-name');
                        awayTeamElements.forEach(el => el.textContent = matchData.away_team);
                    }
                    
                    console.log('🔧 팀명 복원 완료');
                    
                    // 6. 세트제 복원
                    if (matchData.match_data && matchData.match_data.setFormat) {
                        const setFormat = parseInt(matchData.match_data.setFormat);
                        updateSetFormatCircles(setFormat);
                        console.log('🔧 세트제 복원 완료:', setFormat);
                    }
                    
                } else {
                    console.error('❌ DB에서 경기 데이터 로드 실패:', response.status);
                }
                
                console.log('🔧 새로고침 시 오버레이 데이터 동기화 완료');
            } catch (error) {
                console.error('❌ 새로고침 시 오버레이 데이터 동기화 실패:', error);
            }
        }

        // 단일 DOMContentLoaded 이벤트 리스너
        document.addEventListener('DOMContentLoaded', async function() {
            await initializeOverlay();
        });

        // 서버로부터 팀 색상 변경 이벤트 수신 (teamColorChanged)
        socket.on('teamColorChanged', function(data) {
            if (data.matchId === matchId) {
                // 오버레이 페이지 팀 색상 즉시 업데이트
                homeTeamColor = data.homeColor;
                awayTeamColor = data.awayColor;
                updateTeamColors(homeTeamColor, awayTeamColor);
                
                // 로고 배경색은 유지 (팀 색상과 별개)
                }
        });
        
        // 단일 팀 색상 업데이트 이벤트 처리 (teamColorUpdate)
        socket.on('teamColorUpdate', function(data) {
            if (data.matchId === matchId) {
                const color = data.teamColor;
                if (data.teamType === 'home') {
                    homeTeamColor = color;
                    updateTeamColors(homeTeamColor, awayTeamColor);
                } else {
                    awayTeamColor = color;
                    updateTeamColors(homeTeamColor, awayTeamColor);
                }
                
                // 로고 배경색은 유지 (팀 색상과 별개)
                }
        });

        // 테스트 이벤트 처리
        socket.on('test_event', function(data) {
            // 테스트 이벤트 처리
        });

        // 팀로고 가시성 변경 이벤트 처리 (즉시 UI 업데이트)
        socket.on('teamLogoVisibilityChanged', function(data) {
            if (data.matchId === matchId) {
                updateTeamLogoVisibility(data.useLogos);
            } else {
                }
        });
        
        // 팀로고 표시 모드 변경 이벤트 처리 (즉시 UI 업데이트)
        socket.on('teamLogoDisplayModeChanged', function(data) {
            console.log('이벤트 수신 시간:', new Date().toISOString());
            
            if (data.matchId === matchId) {
                const showLogo = data.displayMode === 'logo';
                // 홈팀과 어웨이팀 모두에 적용
                ['home', 'away'].forEach(teamType => {
                    toggleLogoDisplay(teamType, showLogo);
                });
                } else {
                }
        });

        // 스코어 보드 추가 박스 토글 이벤트 처리
        socket.on('extra_box_toggled', function(data) {
            
            if (data.matchId === matchId) {
                const extraBox = document.getElementById('scoreboardExtraBox');
                if (extraBox) {
                    extraBox.classList.toggle('show');
                    }
            }
        });

        // 그래픽 토글 이벤트 처리
        socket.on('toggleGraphic', function(data) {
            console.log('이벤트 수신 시간:', new Date().toISOString());
            
            if (data.matchId === matchId) {
                // 하단 스트립의 경우 추가 데이터 처리
                if (data.graphicType === 'bottom-strip' && data.visible) {
                    // 스코어 정보가 있으면 업데이트
                    if (data.score) {
                        // 새로운 하단 스트립 스코어 업데이트 함수 사용
                        updateBottomStripScore(data.score.home, data.score.away);
                    } else {
                        }
                    
                    // 득점 정보가 있으면 업데이트
                    if (data.goals) {
                        updateBottomStripGoals(data.goals.home || [], data.goals.away || []);
                        // 득점 개수에 따른 스트립 크기 조정
                        adjustStripSize((data.goals.home || []).length, (data.goals.away || []).length);
                    } else {
                        }
                    
                    // 경기 상황 업데이트 (DB에서 현재 상태 로드)
                    if (data.matchState) {
                        const stripMatchState = document.getElementById('strip-match-state');
                        if (stripMatchState) {
                            stripMatchState.textContent = data.matchState;
                            console.log('✅ 하단 스트립 경기 상황 업데이트:', data.matchState);
                        }
                    }
                }
                
                toggleGraphicElement(data.graphicType, data.visible, data);
            } else {
                }
        });

        // 스코어 보드 추가 박스 텍스트 업데이트 이벤트 처리
        socket.on('extra_box_text_updated', function(data) {
            
            if (data.matchId === matchId) {
                const extraBoxText = document.getElementById('extraBoxText');
                if (extraBoxText) {
                    extraBoxText.textContent = data.text || '0 (승부차기) 0';
                    }
            }
        });

        // 배구 세트 승리 횟수 업데이트 이벤트 처리
        socket.on('updateSetWins', function(data) {
            if (data.matchId === matchId) {
                const setWinsText = document.getElementById('setWinsText');
                if (setWinsText) {
                    setWinsText.textContent = `세트 승리: ${data.homeWins || 0} - ${data.awayWins || 0}`;
                }
            }
        });


        // 배구는 승부차기가 없으므로 승부차기 관련 함수들 제거

        // 소켓 연결 상태 확인 함수
        function checkSocketConnection() {
            }

        // 요소 존재 확인 함수 (디버깅용)
        window.checkElements = function() {
            console.log('상단 스코어보드:', document.getElementById('topScoreboard'));
            console.log('VS 오버레이:', document.getElementById('vsOverlay'));
            console.log('하단 스트립:', document.getElementById('bottomStrip'));
            
            console.log('VS 홈팀 로고:', document.querySelector('#vs-home-logo'));
            console.log('VS 어웨이팀 로고:', document.querySelector('#vs-away-logo'));
            
            console.log('스트립 홈팀 로고:', document.querySelector('#strip-home-logo'));
            console.log('스트립 어웨이팀 로고:', document.querySelector('#strip-away-logo'));
            
            console.log('스코어보드 홈팀 로고:', document.querySelector('.team-section.home .team-logo'));
            console.log('스코어보드 어웨이팀 로고:', document.querySelector('.team-section.away .team-logo'));
        };

        // 페이지 로드 시 소켓 연결 상태 확인
        setTimeout(checkSocketConnection, 1000);

                // 애니메이션 이벤트 리스너 등록
        if (typeof window.registerAnimationListeners === 'function') {
            window.registerAnimationListeners(socket);
        }
        
        // 스코어보드 토글 이벤트 수신 (팀 로고 포함)
        socket.on('toggle_scoreboard', (data) => {
            // 팀 정보, 스코어, 팀 로고 모두 토글
            const homeTeam = document.querySelector('.team-section.home');
            const awayTeam = document.querySelector('.team-section.away');
            const scoreSection = document.querySelector('.score-section');
            const timerSection = document.querySelector('.match-timer-section');
                const matchState = document.querySelector('.match-state');
            const homeLogoSection = document.querySelector('.team-logo-section.home-logo');
            const awayLogoSection = document.querySelector('.team-logo-section.away-logo');
            
            if (homeTeam && awayTeam && scoreSection && timerSection && matchState) {
                const isVisible = homeTeam.style.display !== 'none';
                
                if (isVisible) {
                    // 숨기기
                    homeTeam.style.display = 'none';
                    awayTeam.style.display = 'none';
                    scoreSection.style.display = 'none';
                    timerSection.style.display = 'none';
                    matchState.style.display = 'none';
                    
                    // 팀 로고도 숨기기
                    if (homeLogoSection) {
                        homeLogoSection.style.display = 'none';
                    }
                    if (awayLogoSection) {
                        awayLogoSection.style.display = 'none';
                    }
                    
                    console.log('스코어보드 전체 숨김 (팀 로고 포함)');
                } else {
                    // 보이기
                    homeTeam.style.display = 'flex';
                    awayTeam.style.display = 'flex';
                    scoreSection.style.display = 'flex';
                    timerSection.style.display = 'flex';
                        matchState.style.display = 'block';
                    
                    // 팀 로고도 보이기
                    if (homeLogoSection) {
                        homeLogoSection.style.display = 'block';
                    }
                    if (awayLogoSection) {
                        awayLogoSection.style.display = 'block';
                    }
                    
                    console.log('스코어보드 전체 표시 (팀 로고 포함)');
                }
            }
        });
        
        
        // 하단 스트립 토글 이벤트 수신
        socket.on('toggle_bottom_strip', (data) => {
            const bottomStrip = document.getElementById('bottomStrip');
            if (bottomStrip) {
                const isVisible = bottomStrip.style.display !== 'none';
                
                if (isVisible) {
                    bottomStrip.style.display = 'none';
                    } else {
                    bottomStrip.style.display = 'flex';
                    // 하단 스트립이 표시될 때 토너먼트 제목 확인 및 적용
                    loadTournamentTitleForStrip();
                    
                    // 하단 스트립이 표시될 때 초기 점수 로드
                    loadInitialStripScores();
                    
                    // 하단 스트립이 표시될 때 팀 로고 업데이트
                    updateBottomStripLogos();
                    
                    // 하단 스트립이 표시될 때 현재 스코어보드 점수로 즉시 업데이트
                    updateBottomStripScoresFromScoreboard();
                    
                    // 전송받은 득점 정보 확인 및 처리
                    if (data.homeGoals && data.awayGoals) {
                        const homeGoalsCount = data.homeGoals.length;
                        const awayGoalsCount = data.awayGoals.length;
                        const totalGoals = homeGoalsCount + awayGoalsCount;
                        
                        if (totalGoals > 0) {
                            updateBottomStripGoals(data.homeGoals, data.awayGoals);
                            adjustStripSize(homeGoalsCount, awayGoalsCount);
                            } else {
                            hideCenterSection();
                            }
                    } else {
                        // 득점 정보가 없으면 저장된 정보 로드
                        loadAndDisplayGoals();
                    }
                    
                    }
            }
        });
        
        // 하단 스트립용 토너먼트 제목 로드 함수
        function loadTournamentTitleForStrip() {
            // 서버에서 토너먼트 제목 가져오기
            fetch(`/api/tournament-text/${matchId}`)
                .then(response => response.json())
                .then(data => {
                    const stripTournamentTitle = document.getElementById('strip-tournament-title');
                    if (stripTournamentTitle) {
                        if (data.tournamentText && data.tournamentText.trim() !== '') {
                            stripTournamentTitle.textContent = data.tournamentText;
                            } else {
                            stripTournamentTitle.textContent = '';
                            }
                    }
                })
                .catch(error => {
                    // 에러 시 기본 제목 적용
                    const stripTournamentTitle = document.getElementById('strip-tournament-title');
                    if (stripTournamentTitle) {
                        stripTournamentTitle.textContent = '';
                        }
                });
        }

        // 하단 스트립 초기 점수 로드 함수
        function loadInitialStripScores() {
            // 서버에서 현재 매치 정보 가져오기
            fetch(`/api/matches/${matchId}`)
                .then(response => response.json())
                .then(data => {
                    const stripHomeScore = document.getElementById('strip-home-score');
                    const stripAwayScore = document.getElementById('strip-away-score');
                    
                    if (stripHomeScore && data.home_score !== undefined) {
                        stripHomeScore.textContent = data.home_score;
                        }
                    
                    if (stripAwayScore && data.away_score !== undefined) {
                        stripAwayScore.textContent = data.away_score;
                        }
                })
                .catch(error => {
                    // 에러 시 기본 점수 적용
                    const stripHomeScore = document.getElementById('strip-home-score');
                    const stripAwayScore = document.getElementById('strip-away-score');
                    
                    if (stripHomeScore) {
                        stripHomeScore.textContent = '0';
                        }
                    if (stripAwayScore) {
                        stripAwayScore.textContent = '0';
                        }
                });
        }

        // 토너먼트 제목 로드 함수
        function loadTournamentTitle() {
            // 서버에서 토너먼트 제목 가져오기
            fetch(`/api/tournament-text/${matchId}`)
                .then(response => response.json())
                .then(data => {
                    const tournamentTitle = document.querySelector('.vs-tournament-title');
                    if (tournamentTitle) {
                        if (data.tournamentText && data.tournamentText.trim() !== '') {
                            tournamentTitle.textContent = data.tournamentText;
                            } else {
                            tournamentTitle.textContent = '';
                            }
                    }
                })
                .catch(error => {
                    // 에러 시 기본 제목 적용
                    const tournamentTitle = document.querySelector('.vs-tournament-title');
                    if (tournamentTitle) {
                        tournamentTitle.textContent = '';
                        }
                });
        }

        // VS 오버레이 팀 로고 업데이트 함수 (최적화된 버전)
        let vsOverlayUpdated = false;
        
        function updateVSOverlayLogos() {
            if (vsOverlayUpdated) {
                console.log('🔧 VS 오버레이 이미 업데이트됨 - 중복 호출 방지');
                return;
            }
            
            console.log('🔧 VS 오버레이 팀로고 업데이트 시작');
            console.log('현재 로고 상태:', logoState);
            
            // 홈팀 로고 업데이트
            const homeLogoContainer = document.querySelector('.vs-team-section.home .vs-team-logo');
            const homeLogoImg = document.getElementById('vs-home-logo');
            
            if (logoState.home && logoState.home.path) {
                console.log('홈팀 로고 설정:', logoState.home.path);
                // 로고 이미지 설정
                homeLogoImg.src = logoState.home.path;
                homeLogoImg.style.display = 'block';
                // 로고 컨테이너에 배경색 적용
                if (homeLogoContainer) {
                    homeLogoContainer.style.backgroundColor = logoState.home.bgColor || '#ffffff';
                }
                console.log('✅ 홈팀 로고 표시 완료');
            } else {
                console.log('홈팀 로고 없음 - 로고 숨김');
                homeLogoImg.style.display = 'none';
                // 기본 배경색
                if (homeLogoContainer) {
                    homeLogoContainer.style.backgroundColor = '#ffffff';
                }
            }
            
            // 어웨이팀 로고 업데이트
            const awayLogoContainer = document.querySelector('.vs-team-section.away .vs-team-logo');
            const awayLogoImg = document.getElementById('vs-away-logo');
            
            if (logoState.away && logoState.away.path) {
                console.log('어웨이팀 로고 설정:', logoState.away.path);
                // 로고 이미지 설정
                awayLogoImg.src = logoState.away.path;
                awayLogoImg.style.display = 'block';
                // 로고 컨테이너에 배경색 적용
                if (awayLogoContainer) {
                    awayLogoContainer.style.backgroundColor = logoState.away.bgColor || '#ffffff';
                }
                console.log('✅ 어웨이팀 로고 표시 완료');
            } else {
                console.log('어웨이팀 로고 없음 - 로고 숨김');
                awayLogoImg.style.display = 'none';
                // 기본 배경색
                if (awayLogoContainer) {
                    awayLogoContainer.style.backgroundColor = '#ffffff';
                }
            }
            
            vsOverlayUpdated = true;
            console.log('🔧 VS 오버레이 팀로고 업데이트 완료');
        }
        
        // 토너먼트 텍스트 업데이트 이벤트 수신
        socket.on('tournament_text_updated', (data) => {
            const tournamentTitle = document.querySelector('.vs-tournament-title');
            if (tournamentTitle) {
                tournamentTitle.textContent = data.tournamentText || '';
                }
            
            // 하단 스트립 대회명도 동시 업데이트
            const stripTournamentTitle = document.getElementById('strip-tournament-title');
            if (stripTournamentTitle) {
                stripTournamentTitle.textContent = data.tournamentText || '';
                }
        });

        // 팀 헤더 변경 이벤트 처리
        socket.on('teamHeaderChanged', function(data) {
            if (data.matchId === matchId) {
                const homeTeamHeader = document.querySelector('.team-section.home .team-header');
                const awayTeamHeader = document.querySelector('.team-section.away .team-header');
                
                if (homeTeamHeader) {
                    homeTeamHeader.textContent = data.homeHeader;
                    }
                if (awayTeamHeader) {
                    awayTeamHeader.textContent = data.awayHeader;
                    }
                
            } else {
                }
        });

        // 팀명 변경 이벤트 처리
        socket.on('teamNameUpdated', function(data) {
            if (data.matchId === matchId) {
                // 스코어보드 팀명 업데이트
                const homeTeamHeader = document.querySelector('.team-section.home .team-header');
                const awayTeamHeader = document.querySelector('.team-section.away .team-header');
                
                if (data.team === 'home' && homeTeamHeader) {
                    homeTeamHeader.textContent = data.teamName;
                    }
                if (data.team === 'away' && awayTeamHeader) {
                    awayTeamHeader.textContent = data.teamName;
                    }
                
                
                // 하단 스트립 팀명도 실시간 업데이트
                const stripHomeName = document.getElementById('strip-home-name');
                const stripAwayName = document.getElementById('strip-away-name');
                
                if (data.team === 'home' && stripHomeName) {
                    stripHomeName.textContent = data.teamName;
                    }
                if (data.team === 'away' && stripAwayName) {
                    stripAwayName.textContent = data.teamName;
                    }
            } else {
                }
        });

        // 팀명 길이에 따른 폰트 사이즈 조정 함수
        function adjustTeamPositionForLongNames() {
            const stripHomeName = document.getElementById('strip-home-name');
            const stripAwayName = document.getElementById('strip-away-name');
            
            // 홈팀명 길이 확인 및 폰트 사이즈 조정
            if (stripHomeName) {
                const homeNameLength = stripHomeName.textContent.length;
                if (homeNameLength >= 8) {
                    stripHomeName.style.fontSize = '32px'; // 40px에서 32px로 축소
                    } else {
                    stripHomeName.style.fontSize = '40px'; // 기본값
                }
            }
            
            // 어웨이팀명 길이 확인 및 폰트 사이즈 조정
            if (stripAwayName) {
                const awayNameLength = stripAwayName.textContent.length;
                if (awayNameLength >= 8) {
                    stripAwayName.style.fontSize = '32px'; // 40px에서 32px로 축소
                    } else {
                    stripAwayName.style.fontSize = '40px'; // 기본값
                }
            }
        }

        // 하단 스트립 데이터 업데이트 함수
        function updateBottomStripData() {
            
            // 현재 스코어보드 데이터 읽기
            const homeTeamHeader = document.querySelector('.team-section.home .team-header');
            const awayTeamHeader = document.querySelector('.team-section.away .team-header');
            const homeScore = document.getElementById('home-score');
            const awayScore = document.getElementById('away-score');
            const matchState = document.querySelector('input[name="matchState"]:checked');
            
            // 하단 스트립 요소들
            const stripHomeName = document.getElementById('strip-home-name');
            const stripAwayName = document.getElementById('strip-away-name');
            const stripHomeScore = document.getElementById('strip-home-score');
            const stripAwayScore = document.getElementById('strip-away-score');
            const stripMatchState = document.getElementById('strip-match-state');
            const stripTournamentTitle = document.getElementById('strip-tournament-title');
            
            // 대회명은 토너먼트 텍스트 업데이트 이벤트에서 처리됨
            
            // 팀명 길이에 따른 위치 조정
            adjustTeamPositionForLongNames();
            
            // 팀명 업데이트
            if (homeTeamHeader && stripHomeName) {
                stripHomeName.textContent = homeTeamHeader.textContent;
                }
            if (awayTeamHeader && stripAwayName) {
                stripAwayName.textContent = awayTeamHeader.textContent;
                }
            
            // 점수 업데이트 - 스코어보드에서 현재 점수 가져오기
            if (homeScore && stripHomeScore) {
                const newHomeScore = homeScore.value || '0';
                stripHomeScore.textContent = newHomeScore;
                } else {
                }
            
            if (awayScore && stripAwayScore) {
                const newAwayScore = awayScore.value || '0';
                stripAwayScore.textContent = newAwayScore;
                } else {
                }
            
            // 경기 상태 업데이트
            if (matchState && stripMatchState) {
                stripMatchState.textContent = matchState.value || '전반';
                }
            
            // 팀 로고 업데이트 (약간의 지연을 두고 실행)
            setTimeout(() => {
                updateBottomStripLogos();
            }, 100);
        }
        
        // 하단 스트립 점수를 스코어보드에서 실시간으로 가져오는 함수
        function updateBottomStripScoresFromScoreboard() {
            // 스코어보드에서 현재 점수 가져오기
            const homeScoreInput = document.getElementById('home-score');
            const awayScoreInput = document.getElementById('away-score');
            
            // 하단 스트립 점수 엘리먼트
            const stripHomeScore = document.getElementById('strip-home-score');
            const stripAwayScore = document.getElementById('strip-away-score');
            
            // 홈팀 점수 업데이트
            if (homeScoreInput && stripHomeScore) {
                const currentHomeScore = homeScoreInput.value || '0';
                stripHomeScore.textContent = currentHomeScore;
                } else {
                }
            
            // 어웨이팀 점수 업데이트
            if (awayScoreInput && stripAwayScore) {
                const currentAwayScore = awayScoreInput.value || '0';
                stripAwayScore.textContent = currentAwayScore;
                } else {
                }
        }

        // 하단 스트립 팀 로고 업데이트 함수 (단순화)
        function updateBottomStripLogos() {
            console.log('=== 하단 스트립 팀 로고 업데이트 시작 ===');
            console.log('logoState.home:', logoState.home);
            console.log('logoState.away:', logoState.away);
            
            // logoState가 없으면 DB에서 로고 정보 로드
            if (!logoState.home || !logoState.away) {
                console.log('logoState가 없음. DB에서 로고 정보 로드 시도');
                loadTeamLogosForGraphic('bottom-strip');
                return; // 로드 완료 후 다시 호출될 것임
            }
            
            console.log('logoState가 있음. updateTeamLogosForAllGraphics에서 처리됨');
        }

        // 경기상황 변경 이벤트 수신
        socket.on('matchStateChanged', function(data) {
            if (data.matchId === matchId) {
                // 스코어보드 경기상황 업데이트
                const matchStateRadios = document.querySelectorAll('input[name="matchState"]');
                matchStateRadios.forEach(radio => {
                    if (radio.value === data.matchState) {
                        radio.checked = true;
                        }
                });
                
                
                // 하단 스트립 경기상황 업데이트
                const stripMatchState = document.getElementById('strip-match-state');
                if (stripMatchState) {
                    stripMatchState.textContent = data.matchState;
                    }
            } else {
                }
        });
                
        // 팀 색상 업데이트 함수
        function updateTeamColors(homeColor, awayColor) {
            const homeSection = document.querySelector('.team-section.home');
            const awaySection = document.querySelector('.team-section.away');
            const homeHeader = document.querySelector('.home .team-header');
            const awayHeader = document.querySelector('.away .team-header');
            
            // null 체크 추가
            if (homeSection && homeColor) {
                homeSection.style.backgroundColor = homeColor;
                console.log('🔧 홈팀 섹션 컬러 적용:', homeColor);
            }
            if (awaySection && awayColor) {
                awaySection.style.backgroundColor = awayColor;
                console.log('🔧 어웨이팀 섹션 컬러 적용:', awayColor);
            }
            if (homeHeader && homeColor) {
                homeHeader.style.backgroundColor = homeColor;
                console.log('🔧 홈팀 헤더 컬러 적용:', homeColor);
            }
            if (awayHeader && awayColor) {
                awayHeader.style.backgroundColor = awayColor;
                console.log('🔧 어웨이팀 헤더 컬러 적용:', awayColor);
            }
            
            // 로고 컨테이너의 배경색은 덮어쓰지 않음 (저장된 배경색 유지)
            // 로고 컨테이너 배경색 보호
            const homeLogoContainer = document.getElementById('home-team-logo-container');
            const awayLogoContainer = document.getElementById('away-team-logo-container');
            
            if (homeLogoContainer && logoState.home && logoState.home.bgColor) {
                homeLogoContainer.style.backgroundColor = logoState.home.bgColor;
                }
            if (awayLogoContainer && logoState.away && logoState.away.bgColor) {
                awayLogoContainer.style.backgroundColor = logoState.away.bgColor;
                }
            
            // VS 오버레이 로고 배경색도 보호
            const vsHomeLogoContainer = document.querySelector('.vs-team-section.home .vs-team-logo');
            const vsAwayLogoContainer = document.querySelector('.vs-team-section.away .vs-team-logo');
            
            if (vsHomeLogoContainer && logoState.home && logoState.home.bgColor) {
                vsHomeLogoContainer.style.backgroundColor = logoState.home.bgColor;
                }
            if (vsAwayLogoContainer && logoState.away && logoState.away.bgColor) {
                vsAwayLogoContainer.style.backgroundColor = logoState.away.bgColor;
                }
            
        }

        // 하단 스트립 초기 스코어 설정 (DOMContentLoaded 이벤트는 위에서 처리)
        function initializeBottomStripScore() {
            const initialHomeScore = document.querySelector('#home-score')?.textContent || '0';
            const initialAwayScore = document.querySelector('#away-score')?.textContent || '0';
            updateBottomStripScore(initialHomeScore, initialAwayScore);
        }

        // 하단 스트립 스코어 업데이트 함수 (상단 스코어보드와 동일한 방식)
        function updateBottomStripScore(homeScore, awayScore) {
            // 하단 스트립 스코어 요소 찾기
            const homeScoreElement = document.querySelector('#strip-home-score');
            const awayScoreElement = document.querySelector('#strip-away-score');
            
            if (homeScoreElement && awayScoreElement) {
                // 스코어 업데이트
                homeScoreElement.textContent = homeScore || '0';
                awayScoreElement.textContent = awayScore || '0';
                
                // 강제로 innerHTML도 업데이트
                homeScoreElement.innerHTML = homeScore || '0';
                awayScoreElement.innerHTML = awayScore || '0';
                
                // DOM 강제 리플로우
                homeScoreElement.style.display = 'none';
                homeScoreElement.offsetHeight;
                homeScoreElement.style.display = '';
                
                awayScoreElement.style.display = 'none';
                awayScoreElement.offsetHeight;
                awayScoreElement.style.display = '';
                
                } else {
                // 대안 방법으로 요소 찾기
                const allStripScores = document.querySelectorAll('.strip-team-score');
                allStripScores.forEach((element, index) => {
                    });
            }
        }

        // 하단 스트립 데이터 업데이트 함수
        function updateBottomStripData() {
            // 스코어 정보 업데이트
            const homeScoreElement = document.querySelector('#strip-home-score');
            const awayScoreElement = document.querySelector('#strip-away-score');
            
            if (homeScoreElement && awayScoreElement) {
                // 현재 스코어 정보 가져오기 (상단 스코어보드에서)
                const topHomeScore = document.querySelector('#home-score')?.textContent || '0';
                const topAwayScore = document.querySelector('#away-score')?.textContent || '0';
                
                // 업데이트 전 현재 값 확인
                homeScoreElement.textContent = topHomeScore;
                awayScoreElement.textContent = topAwayScore;
                
                // 강제로 innerHTML도 업데이트
                homeScoreElement.innerHTML = topHomeScore;
                awayScoreElement.innerHTML = topAwayScore;
                
                // 업데이트 후 확인
                } else {
                }
            
            // 득점 정보 업데이트는 toggleGraphic 이벤트에서 처리됨
            }

        // 그래픽 요소 토글 함수
        async function toggleGraphicElement(graphicType, visible, data = null) {
            let element = null;
            
            // 그래픽 타입에 따라 해당 요소 찾기
            switch (graphicType) {
                case 'top-scoreboard':
                    // 상단 스코어보드 그래픽 (기본적으로 표시됨)
                    element = document.getElementById('topScoreboard');
                    if (!element) {
                        element = document.querySelector('.scoreboard-row');
                    }
                    if (!element) {
                        element = document.querySelector('.scoreboard');
                    }
                    break;
                case 'bottom-strip':
                    // 하단 스트립 그래픽 (기본적으로 숨김)
                    element = document.getElementById('bottomStrip');
                    if (!element) {
                        element = document.querySelector('.bottom-strip');
                    }
                    break;
                default:
                    return;
            }
            
            if (element) {
                if (visible) {
                    // 표시
                    if (graphicType === 'bottom-strip') {
                        // 하단 스트립은 flex로 표시
                        element.style.display = 'flex';
                        element.style.visibility = 'visible';
                        element.style.opacity = '1';
                        
                        // 하단 스트립의 경우 스코어와 득점 정보 업데이트
                        // 하단 스트립 스코어 업데이트 함수 호출
                        if (data && data.score) {
                            updateBottomStripScore(data.score.home, data.score.away);
                        }
                    } else {
                        element.style.display = 'block';
                        element.style.visibility = 'visible';
                        element.style.opacity = '1';
                    }
                    // 그래픽이 표시될 때 팀로고와 배경색 최신 정보 로드
                    await loadTeamLogosForGraphic(graphicType);
                    
                    // 상단 스코어보드의 경우 팀로고도 함께 표시
                    if (graphicType === 'top-scoreboard') {
                        toggleScoreboardTeamLogos(true);
                        // 사이즈 고정 적용
                        setTimeout(() => fixScoreboardSize(), 100);
                    }
                } else {
                    // 숨김
                    element.style.display = 'none';
                    element.style.visibility = 'hidden';
                    element.style.opacity = '0';
                    // 상단 스코어보드의 경우 팀로고도 함께 숨김
                    if (graphicType === 'top-scoreboard') {
                        toggleScoreboardTeamLogos(false);
                    }
                }
                
                } else {
                console.log('- #topScoreboard:', document.getElementById('topScoreboard'));
                console.log('- .scoreboard-row:', document.querySelector('.scoreboard-row'));
                console.log('- .scoreboard:', document.querySelector('.scoreboard'));
                console.log('- #vsOverlay:', document.getElementById('vsOverlay'));
                console.log('- #bottomStrip:', document.getElementById('bottomStrip'));
                console.log('- .bottom-strip:', document.querySelector('.bottom-strip'));
                
                // 하단 스트립의 경우 강제로 표시 시도
                if (graphicType === 'bottom-strip' && visible) {
                    const bottomStrip = document.querySelector('.bottom-strip');
                    const bottomStripById = document.getElementById('bottomStrip');
                    
                    if (bottomStrip || bottomStripById) {
                        const element = bottomStrip || bottomStripById;
                        element.style.display = 'flex';
                        element.style.visibility = 'visible';
                        element.style.opacity = '1';
                        element.style.position = 'fixed';
                        element.style.bottom = '10px';
                        element.style.left = '50%';
                        element.style.transform = 'translateX(-50%)';
                        element.style.zIndex = '1000';
                        
                        updateBottomStripData();
                    } else {
                        }
                }
            }
        }
        
        // 전역 변수 - 현재 라인업 데이터
        let currentLineupData = null;
        
        // 라인업 로드 함수
        async function loadLineup() {
            try {
                console.log('🔍 라인업 로드 시작...');
                const response = await fetch(`/api/matches/${matchId}/load-lineup`);
                const data = await response.json();
                
                if (data.success && data.lineup) {
                    console.log('✅ 라인업 로드 성공:', data.lineup);
                    currentLineupData = data.lineup; // 전역 변수에 저장
                    displayLineup(data.lineup, 'home'); // 기본적으로 홈팀 표시
                    return data.lineup; // 라인업 데이터 반환
                } else {
                    console.log('⚠️ 라인업 데이터가 없습니다.');
                    currentLineupData = null;
                    displayEmptyLineup();
                    return null;
                }
            } catch (error) {
                console.error('❌ 라인업 로드 실패:', error);
                currentLineupData = null;
                displayEmptyLineup();
                return null;
            }
        }
        
        // 빈 라인업 표시 함수
        function displayEmptyLineup() {
            const playersContainer = document.getElementById('lineupPlayers');
            const teamNameElement = document.getElementById('lineupTeamName');
            
            if (playersContainer) {
                playersContainer.innerHTML = '<p class="text-muted">라인업 정보가 없습니다.</p>';
            }
            if (teamNameElement) {
                teamNameElement.textContent = '라인업 없음';
            }
        }
        
        // 라인업 표시 함수 - 한팀씩 표시
        function displayLineup(lineup, teamType = 'home') {
            const playersContainer = document.getElementById('lineupPlayers');
            const teamNameElement = document.getElementById('lineupTeamName');
            const coachElement = document.getElementById('lineupCoach');
            
            if (!playersContainer || !teamNameElement || !coachElement) {
                console.error('❌ 라인업 컨테이너를 찾을 수 없습니다.');
                return;
            }
            
            // 실제 팀명 가져오기
            const homeTeamName = document.querySelector('.team-section.home .team-name')?.textContent || 'HOME';
            const awayTeamName = document.querySelector('.team-section.away .team-name')?.textContent || 'AWAY';
            const teamName = teamType === 'home' ? homeTeamName : awayTeamName;
            teamNameElement.textContent = teamName;
            
            // 감독 정보 표시
            const coachName = lineup.coaches && lineup.coaches[teamType] ? lineup.coaches[teamType] : '';
            if (coachName) {
                coachElement.textContent = `감독 : ${coachName}`;
                coachElement.style.display = 'block';
            } else {
                coachElement.style.display = 'none';
            }
            
            // 선택된 팀의 라인업 표시
            const teamLineup = lineup[teamType] || [];
            if (teamLineup.length > 0) {
                playersContainer.innerHTML = teamLineup.map(player => `
                    <div class="lineup-player">
                        <span class="player-number">${player.number}</span>
                        <span class="player-name">${player.name}</span>
                        <span class="player-position">${player.position}</span>
                    </div>
                `).join('');
            } else {
                playersContainer.innerHTML = '<div class="no-players">라인업 데이터가 없습니다.</div>';
            }
        }
        
        // 빈 라인업 표시 함수
        function displayEmptyLineup() {
            const playersContainer = document.getElementById('lineupPlayers');
            const teamNameElement = document.getElementById('lineupTeamName');
            
            if (playersContainer) {
                playersContainer.innerHTML = '<div class="no-players">라인업 데이터가 없습니다.</div>';
            }
            if (teamNameElement) {
                teamNameElement.textContent = '팀명';
            }
        }
        
        // 라인업 오버레이 표시/숨김 함수
        function showLineup() {
            const lineupOverlay = document.getElementById('lineupOverlay');
            if (lineupOverlay) {
                lineupOverlay.style.display = 'flex';
                lineupOverlay.classList.add('show');
                console.log('✅ 라인업 오버레이 표시');
            }
        }
        
        function hideLineup() {
            const lineupOverlay = document.getElementById('lineupOverlay');
            if (lineupOverlay) {
                lineupOverlay.style.display = 'none';
                lineupOverlay.classList.remove('show');
                console.log('✅ 라인업 오버레이 숨김');
            }
        }
        
        // toggleLineup WebSocket 이벤트 리스너 - 컨트롤 페이지에서 라인업 토글
        socket.on('toggleLineup', async function(data) {
            console.log('🔧 라인업 토글 요청 수신:', data);
            if (data.matchId === matchId) {
                if (data.visible) {
                    // 라인업 표시 - DB에서 최신 데이터 로드
                    console.log(`💾 DB에서 라인업 데이터 로드 시작: ${data.teamType}팀`);
                    await loadLineup();
                    
                    if (data.teamType) {
                        // 특정 팀의 라인업만 표시
                        const lineupData = currentLineupData || {home: [], away: []};
                        displayLineup(lineupData, data.teamType);
                        console.log(`✅ DB에서 로드된 라인업 표시: ${data.teamType}팀`, lineupData);
                    } else {
                        // 전체 라인업 표시
                        const lineupData = currentLineupData || {home: [], away: []};
                        displayLineup(lineupData, 'home');
                        console.log(`✅ DB에서 로드된 전체 라인업 표시`, lineupData);
                    }
                    
                    showLineup();
                    console.log(`✅ 라인업 표시 완료: ${data.teamType}팀 (DB 데이터 사용)`);
                } else {
                    // 라인업 숨김
                    hideLineup();
                    console.log(`✅ 라인업 숨김: ${data.teamType}팀`);
                }
            }
        });

        // soccer_lineup_updated WebSocket 이벤트 리스너 - 야구 이닝점수 방식 적용
        socket.on('soccer_lineup_updated', async function(data) {
            console.log('⚽ 축구 라인업 업데이트 수신 (야구 방식):', data);
            if (data.matchId === matchId) {
                // 1. 전역 라인업 데이터 업데이트
                if (data.lineup) {
                    currentLineupData = data.lineup;
                    console.log('⚽ 전역 라인업 데이터 업데이트 완료:', currentLineupData);
                }
                
                // 2. 현재 라인업이 표시 중이라면 업데이트된 데이터로 다시 표시
                const lineupOverlay = document.getElementById('lineupOverlay');
                if (lineupOverlay && lineupOverlay.style.display !== 'none') {
                    console.log('⚽ 라인업이 표시 중 - 새 데이터로 업데이트');
                    
                    if (data.teamType) {
                        // 특정 팀의 라인업만 업데이트
                        displayLineup(currentLineupData, data.teamType);
                    } else {
                        // 전체 라인업 업데이트
                        displayLineup(currentLineupData, 'home');
                    }
                } else {
                    console.log('⚽ 라인업 데이터 업데이트 완료 (오버레이는 숨김 상태)');
                }
            }
        });

        // 배구 세트 점수 업데이트 이벤트 처리 (완전 재구현)
        socket.on('volleyball_score_updated', function(data) {
            console.log('=== 배구 세트 점수 업데이트 수신 (오버레이) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);
            
            if (data.matchId === matchId) {
                const { team, set, score, sets, currentSet, setFormat } = data;
                
                // 1. 현재 세트 표시 업데이트
                if (currentSet !== undefined) {
                    const currentSetElement = document.getElementById('current-set');
                    if (currentSetElement) {
                        currentSetElement.textContent = `${currentSet}세트`;
                    }
                }
                
                // 2. 세트 스코어 테이블 업데이트
                const teamElementId = team === 'home' ? `teamA-set-${set}` : `teamB-set-${set}`;
                const setElement = document.getElementById(teamElementId);
                
                if (setElement) {
                    setElement.textContent = score;
                    console.log(`세트 스코어 업데이트: ${team}팀 ${set}세트 = ${score}`);
                }
                
                // 3. 전체 세트 스코어 업데이트 (모든 세트)
                if (sets) {
                    for (let i = 1; i <= 5; i++) {
                        const homeSetElement = document.getElementById(`teamA-set-${i}`);
                        const awaySetElement = document.getElementById(`teamB-set-${i}`);
                        
                        if (homeSetElement && sets[`home_${i}`] !== undefined) {
                            homeSetElement.textContent = sets[`home_${i}`] || '0';
                        }
                        if (awaySetElement && sets[`away_${i}`] !== undefined) {
                            awaySetElement.textContent = sets[`away_${i}`] || '0';
                        }
                    }
                }
                
                console.log(`배구 세트 점수 업데이트 완료: ${team}팀 ${set}세트 = ${score}`);
                console.log(`현재 세트: ${currentSet}세트, 세트제: ${setFormat}세트제`);
                console.log('=== 배구 세트 점수 업데이트 처리 완료 (오버레이) ===');
            }
        });

        // 배구 매치 점수 업데이트 이벤트 수신 (다음 세트 버튼에서만 발생)
        socket.on('volleyball_match_score_updated', function(data) {
            console.log('=== 배구 매치 점수 업데이트 수신 (오버레이) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);

            if (data.matchId === matchId) {
                const { home_score, away_score } = data;

                const homeScoreElement = document.getElementById('home-score');
                const awayScoreElement = document.getElementById('away-score');

                if (homeScoreElement && home_score !== undefined) {
                    homeScoreElement.textContent = home_score;
                }
                if (awayScoreElement && away_score !== undefined) {
                    awayScoreElement.textContent = away_score;
                }

                console.log(`배구 매치 점수 업데이트 완료: 홈팀 ${home_score}세트, 원정팀 ${away_score}세트`);
                console.log('=== 배구 매치 점수 업데이트 처리 완료 (오버레이) ===');
            }
        });

        // 배구 다음 세트 업데이트 이벤트 수신 (완전 재구현)
        socket.on('volleyball_next_set_updated', function(data) {
            console.log('=== 배구 다음 세트 업데이트 수신 (오버레이) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);

            if (data.matchId === matchId) {
                const { currentSet, home_score, away_score, setFormat, match_data } = data;

                // 1. 현재 세트 표시 업데이트
                if (currentSet !== undefined) {
                    const currentSetElement = document.getElementById('current-set');
                    if (currentSetElement) {
                        currentSetElement.textContent = `${currentSet}세트`;
                    }
                }

                // 2. 매치 점수 업데이트
                const homeScoreElement = document.getElementById('home-score');
                const awayScoreElement = document.getElementById('away-score');

                if (homeScoreElement && home_score !== undefined) {
                    homeScoreElement.textContent = home_score;
                }
                if (awayScoreElement && away_score !== undefined) {
                    awayScoreElement.textContent = away_score;
                }

                // 3. 세트 점수 표 업데이트
                if (match_data && match_data.sets) {
                    for (let i = 1; i <= 5; i++) {
                        const homeSetElement = document.getElementById(`teamA-set-${i}`);
                        const awaySetElement = document.getElementById(`teamB-set-${i}`);

                        if (homeSetElement && match_data.sets.home && match_data.sets.home[i] !== undefined) {
                            homeSetElement.textContent = match_data.sets.home[i] || '0';
                        }
                        if (awaySetElement && match_data.sets.away && match_data.sets.away[i] !== undefined) {
                            awaySetElement.textContent = match_data.sets.away[i] || '0';
                        }
                    }
                }

                console.log(`배구 다음 세트 업데이트 완료: ${currentSet}세트`);
                console.log(`매치 점수: 홈팀 ${home_score}세트, 원정팀 ${away_score}세트`);
                console.log('=== 배구 다음 세트 업데이트 처리 완료 (오버레이) ===');
            }
        });

        // lineupUpdated WebSocket 이벤트 리스너 - 기존 방식 (호환성 유지)
        socket.on('lineupUpdated', async function(data) {
            console.log('🔧 라인업 업데이트 이벤트 수신:', data);
            if (data.matchId === matchId) {
                // 현재 라인업 데이터 업데이트
                currentLineupData = data.lineup;
                console.log('✅ 라인업 데이터 업데이트 완료:', currentLineupData);
                
                // 현재 라인업이 표시 중이라면 새 데이터로 다시 표시
                const lineupOverlay = document.getElementById('lineupOverlay');
                if (lineupOverlay && lineupOverlay.style.display !== 'none') {
                    console.log('🔧 라인업이 표시 중 - 새 데이터로 업데이트');
                    
                    if (data.teamType) {
                        // 특정 팀의 라인업만 업데이트
                        displayLineup(currentLineupData, data.teamType);
                    } else {
                        // 전체 라인업 업데이트 (기본적으로 홈팀 표시)
                        displayLineup(currentLineupData, 'home');
                    }
                }
                
                console.log(`✅ 라인업 자동 업데이트 완료: ${data.teamType || '전체'}`);
            }
        });
        
        // 키보드 이벤트 리스너 (라인업 L키 단축키 제거됨)
        
        // 그래픽별 팀로고 로드 함수
        async function loadTeamLogosForGraphic(graphicType) {
            try {
                // DB에서 최신 팀로고 정보 로드
                const response = await fetch(`/api/matches/${matchId}/team-logos`, {
                    method: 'GET',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.teamLogos) {
                        // 모든 그래픽에서 동일한 방식으로 팀로고 업데이트
                        updateTeamLogosForAllGraphics(data.teamLogos, graphicType);
                        
                        // 하단 스트립의 경우 updateTeamLogosForAllGraphics에서 이미 처리됨
                        if (graphicType === 'bottom-strip') {
                            console.log('하단 스트립 로고 업데이트 완료');
                        }
                        }
                } else {
                    }
            } catch (error) {
                }
        }
        
        
        // 모든 그래픽에서 동일한 방식으로 팀로고 업데이트
        function updateTeamLogosForAllGraphics(teamLogos, graphicType) {
            teamLogos.forEach(team => {
                const teamType = team.team_type; // 'home' 또는 'away'
                let logoPath = team.logo_path;
                const bgColor = team.logo_bg_color;
                
                
                let logoContainer = null;
                let imgElement = null;
                
                // 그래픽 타입에 따라 다른 선택자 사용
                if (graphicType === 'top-scoreboard') {
                    // 상단 스코어보드: 기존 방식
                    logoContainer = document.querySelector(`.team-section.${teamType} .team-logo`);
                    if (logoContainer) {
                        imgElement = logoContainer.querySelector('img');
                    }
                } else if (graphicType === 'bottom-strip') {
                    // 하단 스트립: 직접 img 태그 찾기
                    imgElement = document.querySelector(`#strip-${teamType}-logo`);
                }
                
                if (imgElement) {
                    console.log(`하단 스트립 ${teamType}팀 로고 업데이트:`, { logoPath, bgColor });
                    
                    // 로고 이미지 업데이트
                    if (logoPath) {
                        imgElement.src = logoPath;
                        imgElement.style.display = 'block';
                        console.log(`하단 스트립 ${teamType}팀 로고 이미지 설정:`, logoPath);
                        
                        // 플레이스홀더 숨기기 (하단 스트립의 경우)
                        if (graphicType === 'bottom-strip') {
                            const placeholder = document.querySelector(`#strip-${teamType}-placeholder`);
                            if (placeholder) {
                                placeholder.style.display = 'none';
                                console.log(`하단 스트립 ${teamType}팀 플레이스홀더 숨김`);
                            }
                            
                            // 하단 스트립의 경우 로고 컨테이너 배경색 설정
                            const logoContainer = document.querySelector(`.strip-team-section.${teamType} .strip-team-logo`);
                            if (logoContainer) {
                                logoContainer.style.backgroundColor = bgColor || '#ffffff';
                                console.log(`하단 스트립 ${teamType}팀 로고 컨테이너 배경색 설정:`, bgColor);
                            }
                        }
                } else {
                        console.log(`하단 스트립 ${teamType}팀 로고 없음. 플레이스홀더 표시`);
                        // 로고가 없으면 플레이스홀더 표시 (하단 스트립의 경우)
                        imgElement.style.display = 'none';
                        if (graphicType === 'bottom-strip') {
                            const placeholder = document.querySelector(`#strip-${teamType}-placeholder`);
                            if (placeholder) {
                                placeholder.style.display = 'flex';
                                console.log(`하단 스트립 ${teamType}팀 플레이스홀더 표시`);
                            }
                            
                            // 하단 스트립의 경우 로고 컨테이너 기본 배경색 설정
                            const logoContainer = document.querySelector(`.strip-team-section.${teamType} .strip-team-logo`);
                            if (logoContainer) {
                                logoContainer.style.backgroundColor = '#ffffff';
                                console.log(`하단 스트립 ${teamType}팀 기본 배경색 설정`);
                            }
                        }
                    }
                    
                    // 배경색 업데이트 (모든 그래픽에서 적용)
                    if (bgColor) {
                        if (graphicType === 'top-scoreboard' && logoContainer) {
                            // 상단 스코어보드: 컨테이너에 배경색 적용
                            logoContainer.style.backgroundColor = bgColor;
                        } else if (graphicType === 'bottom-strip') {
                            // 하단 스트립: img 태그의 부모 컨테이너에 배경색 적용
                            const stripContainer = imgElement.parentElement;
                            if (stripContainer) {
                                stripContainer.style.backgroundColor = bgColor;
                                } else {
                                }
                        }
                    } else {
                        }
                    
                    } else {
                    }
            });
        }
        
        // 상단 스코어보드 팀로고 토글 함수
        function toggleScoreboardTeamLogos(visible) {
            // 홈팀과 어웨이팀 로고 섹션 찾기
            const homeLogoSection = document.querySelector('.team-logo-section.home-logo');
            const awayLogoSection = document.querySelector('.team-logo-section.away-logo');
            
            if (homeLogoSection) {
                homeLogoSection.style.display = visible ? 'block' : 'none';
                }
            
            if (awayLogoSection) {
                awayLogoSection.style.display = visible ? 'block' : 'none';
                }
        }
        
        // 상단 스코어보드 그래픽 사이즈 고정 함수
        function fixScoreboardSize() {
            const scoreboardElement = document.getElementById('topScoreboard') || 
                                    document.querySelector('.scoreboard-row') || 
                                    document.querySelector('.scoreboard');
            
            if (scoreboardElement) {
                // 고정 사이즈 설정 (550px 유지)
                scoreboardElement.style.width = '550px';
                scoreboardElement.style.maxWidth = '550px';
                scoreboardElement.style.minWidth = '550px';
                scoreboardElement.style.height = 'auto';
                
                } else {
                }
        }
        
        // 배구 특화 초기화 함수
        function initializeVolleyball() {
            console.log('🔧 배구 시스템 초기화 시작');
            
            // 배구 데이터 요청
            if (socket && socket.connected) {
                socket.emit('request_volleyball_data', { matchId: window.matchId });
                console.log('✅ 배구 데이터 요청 전송');
            } else {
                console.log('⚠️ WebSocket 연결 없음 - 배구 데이터 로드 실패');
            }
        }
        
        // DOM 로드 완료 후 배구 시스템 초기화
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔧 배구 시스템 초기화 시작');
            
            // 배구 특화 초기화
            initializeVolleyball();
            
            console.log('✅ 배구 시스템 초기화 완료');
        });
        
    </script>
</body>
</html> 