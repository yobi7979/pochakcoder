<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Volleyball Overlay</title>
    <script>
        // 전역 변수 설정
        window.matchId = '<%= match.id %>';
        window.sportType = 'VOLLEYBALL';
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        /* 기본 스타일 */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Noto Sans KR', sans-serif;
            background-color: transparent;
            color: white;
            overflow: hidden;
        }

        .team-logo {
            max-width: 100%;
            max-height: 100%;
            background-color: rgba(255, 255, 255, 0.0);
            padding: 0px;
        }

                /* 실제 로고 영역: 원형 테두리 적용 */
        .team-logo-container {
            width: 40px;
            height: 40px;
            margin-right: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
        }

              /* 로고가 없을 때 표시될 플레이스홀더 스타일 */
        .team-logo-placeholder {
            width: 100%;                                 /* 부모 크기에 맞춤 */
            height: 100%;                                /* 부모 크기에 맞춤 */
            border-radius: 5px;                          /* 살짝 둥근 모서리 */
            background-color: rgba(0, 0, 0, 0.0);      /* 반투명 흰 배경 */
            display: flex;                               /* 텍스트 정렬용 flex */
            align-items: center;                         /* 세로 가운데 정렬 */
            justify-content: center;                     /* 가로 가운데 정렬 */
            font-weight: bold;                           /* 글씨 굵게 */
            color: white;                                /* 글씨 색 흰색 */
            font-size: 24px;                             /* 글씨 크기 24px */
        }

        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Noto Sans KR', Arial, sans-serif;
        }
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }
        body {
            min-height: 100vh;
            min-width: 100vw;
            height: 100vh;
            width: 100vw;
            position: relative;
        }
        .overlay-container {
            width: 100vw;
            height: 100vh;
            min-width: 100vw;
            min-height: 100vh;
            position: relative;
        }

        /* 리스트 정보 표시 영역 */
        .list-info {
            position: absolute;
            top: 20px;
            right: 50px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000;
            display: none;
        }
        
        .list-info.show {
            display: block;
        }
        
        .list-info .list-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .list-info .match-counter {
            font-size: 12px;
            opacity: 0.8;
        }

        /* 메인 스코어보드 (좌측 상단) - 좌우 수평 디자인 */
        .main-scoreboard {        
            position: fixed;
            top: 20px;
            left: 20px;
            width: 500px; /* 고정 너비 설정 (박스 요소들의 총 너비와 일치) */
            height: 60px; /* 현재 세트 박스와 동일한 높이 */
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            color: rgb(255, 255, 255);
            overflow: hidden;            
            border-radius: 10px;
            z-index: 1000;
        }
        
        /* 세트 스코어보드 (중앙 하단) */
        .set-scoreboard {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 600px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 10px;
            z-index: 1000;
        }
        
        /* 경기방식에 따른 세트 표시 */
        .set-scoreboard.format-3 [data-set="4"],
        .set-scoreboard.format-3 [data-set="5"] {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
        }
        
        .set-scoreboard.format-5 [data-set="4"],
        .set-scoreboard.format-5 [data-set="5"] {
            display: table-cell !important;
            visibility: visible !important;
            opacity: 1 !important;
        }
        
        /* 4세트, 5세트 숨김 처리 */
        .set-scoreboard.format-3 th:nth-child(5),
        .set-scoreboard.format-3 th:nth-child(6),
        .set-scoreboard.format-3 td:nth-child(5),
        .set-scoreboard.format-3 td:nth-child(6) {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
        }
        
        .set-header {
            padding: 10px 15px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px 10px 0 0;
        }
        
        .tournament-name {
            font-size: 18px;
            font-weight: bold;
            text-align: center;
        }
        
        .set-table {
            padding: 10px;
        }
        
        .sets-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .sets-table th,
        .sets-table td {
            padding: 8px 12px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .sets-table th {
            background-color: rgba(255, 255, 255, 0.1);
            font-weight: bold;
        }
        
        .sets-table .team-name {
            font-weight: bold;
            text-align: left;
        }
        
        .sets-table .set-score {
            font-size: 18px;
            font-weight: bold;
        }
        
        .sets-table .total-score {
            font-size: 20px;
            font-weight: bold;
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .home-row {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .away-row {
            background-color: rgba(255, 255, 255, 0.1);
        }
        .team-section {
            display: flex;
            flex-direction: row;
            width: 100%;
            align-items: center;
            justify-content: flex-start; /* space-between → flex-start (왼쪽 정렬) */
            gap: 0; /* 박스 간 간격 제거 */
        }
        
        /* 각 박스별 스타일 */
        .team-name-box, .team-score-box, .serve-indicator-box {
            background-color: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 !important; /* 모든 마진 강제 제거 */
            padding: 2px; /* 5px → 2px (간격 최소화) */
            height: 100%; /* 부모 높이에 맞춤 */
            flex: 0 0 auto; /* 크기 고정 */
        }
        
        /* 각 박스별 고정 너비 설정 */
        .team-name-box {
            width: 120px; /* 팀명 고정 너비 증가 */
            flex: 0 0 120px; /* 크기 고정 */
        }
        
        .team-score-box {
            width: 80px; /* 점수 고정 너비 */
            flex: 0 0 80px; /* 크기 고정 */
        }
        
        .serve-indicator-box {
            width: 100px; /* 서브권 고정 너비 */
            flex: 0 0 100px; /* 크기 고정 */
            background-color: #FFD700 !important; /* 진한 노란색으로 변경 */
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 15px;
            border-left: 2px solid rgba(255, 255, 255, 0.3);
            border-right: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        /* 박스 간 간격 완전 제거 */
        .team-section > div {
            margin: 0 !important;
            padding: 2px;
        }
        
        /* 첫 번째 박스만 왼쪽 모서리 둥글게 */
        .team-section > div:first-child {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        /* 마지막 박스만 오른쪽 모서리 둥글게 */
        .team-section > div:last-child {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        /* 중간 박스들은 테두리 완전 제거 */
        .team-section > div:not(:first-child):not(:last-child) {
            border: none !important;
        }
        
        .team-name {
            font-size: 18px;
            font-weight: bold;
            color: white;
            padding: 10px 15px;
            min-width: 120px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .team-score {
            font-size: 36px;
            font-weight: bold;
            color: white;
            padding: 10px 20px;
            min-width: 60px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* 현재 세트 표시 박스 (메인 스코어보드 옆) */
        .current-set-box {
            position: fixed;
            top: 20px;
            left: calc(500px + 20px + 5px); /* 메인 스코어보드 너비(500px) + 왼쪽 여백(20px) + 간격(5px) */
            width: 80px;
            height: 60px; /* 메인 스코어보드와 동일한 높이 */
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .current-set-number {
            font-size: 40px;
            font-weight: bold;
            color: white;
            margin-bottom: 2px; /* 0px → 2px (2px 간격) */
            line-height: 1; /* 줄 간격 최소화 */
            transform: translateY(-1px); /* 위로 1px 이동 */
        }
        
        .current-set-text {
            font-size: 14px;
            font-weight: bold;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 0px; /* 위쪽 마진 제거 */
            line-height: 1; /* 줄 간격 최소화 */
            transform: translateY(-1px); /* 위로 1px 이동 */
        }
        
        
       
       .serve-arrow {
           font-size: 24px;
           font-weight: bold;
           color: white;
       }
        
        
        
        
        
        
        
        /* 이닝 스코어 */
        .innings-scoreboard {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 800px;
            background-color: rgba(0, 0, 0, 1.0);
            border-radius: 8px;
            color: white;
            overflow: hidden;
        }
        .innings-title {
            background-color: rgb(0, 126, 52);
            padding: 8px 12px;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
        }
        .innings-table {
            width: 100%;
            border-collapse: collapse;
        }
        .innings-table th, .innings-table td {
            padding: 8px;
            text-align: center;
            font-size: 14px;
        }
        .innings-table th {
            color: rgba(255, 255, 255, 0.7);
            background-color: rgba(255, 255, 255, 0.1);
        }
        .innings-table td {
            font-weight: bold;
        }
        .innings-table td.team-name {
            text-align: left;
            width: 120px;
        }
        .innings-table td.total {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        /* 오버레이 이미지 */
        .overlay-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 1920px;
            height: 1080px;
            z-index: 1000;
            display: none; /* 기본적으로 숨김 */
        }

        .overlay-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 0;
            box-shadow: none;
        }

        .overlay-image.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="overlay-container">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="list-info" id="listInfo">
            <div class="list-name" id="listName"></div>
            <div class="match-counter" id="matchCounter"></div>
        </div>
        <% } %>
        
        <!-- 오버레이 이미지 -->
        <div class="overlay-image" id="overlayImage">
            <!-- 이미지는 JavaScript로 동적으로 로드됩니다 -->
        </div>
        
        <!-- 메인 스코어보드 (좌측 상단) - 좌우 수평 디자인 -->
        <div class="main-scoreboard">
            <div class="team-section">
                <!-- 홈팀명 박스 -->
                <div class="team-name-box home-team-name-box">
                    <div class="team-name home-team-name">
                        <%= match.home_team || 'HOME' %>
                    </div>
                    </div>
                
                <!-- 홈팀 점수 박스 -->
                <div class="team-score-box home-team-score-box">
                    <div class="team-score home-team-score">
                        <%= match.match_data?.innings?.home?.[match.match_data?.current_inning || 1] || '0' %>
                </div>
                    </div>
                
                <!-- 서브권 박스 -->
                <div class="serve-indicator-box">
                   <span class="serve-arrow" id="serve-arrow">
                       <%= match.match_data?.serve_team === 'home' ? '▶' : '◀' %>
                   </span>
                </div>
                
                <!-- 어웨이팀 점수 박스 -->
                <div class="team-score-box away-team-score-box">
                    <div class="team-score away-team-score">
                        <%= match.match_data?.innings?.away?.[match.match_data?.current_inning || 1] || '0' %>
            </div>
        </div>

                <!-- 어웨이팀명 박스 -->
                <div class="team-name-box away-team-name-box">
                    <div class="team-name away-team-name">
                        <%= match.away_team || 'AWAY' %>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 현재 세트 표시 박스 (메인 스코어보드 옆) -->
        <div class="current-set-box">
            <div class="current-set-number">
                <span id="current-set-display"><%= match.match_data?.current_inning || 1 %></span>
            </div>
            <div class="current-set-text">SET</div>
        </div>

        <!-- 세트 스코어보드 (중앙 하단) -->
        <div class="set-scoreboard">
            <div class="set-header">
                <div class="tournament-name"><span id="tournament-display"><%= match.match_data?.tournament_name || '대회명을 입력하세요' %></span></div>
            </div>
            <div class="set-table">
                <table class="sets-table">
                    <thead>
                        <tr>
                            <th>팀</th>
                            <th>1세트</th>
                            <th>2세트</th>
                            <th>3세트</th>
                            <th style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>">4세트</th>
                            <th style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>">5세트</th>
                            <th>총점</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="home-row">
                            <td class="team-name"><%= match.home_team || 'HOME' %></td>
                            <td class="set-score" id="home-set-1" data-set="1"><%= match.match_data?.innings?.home?.[1] || '0' %></td>
                            <td class="set-score" id="home-set-2" data-set="2"><%= match.match_data?.innings?.home?.[2] || '0' %></td>
                            <td class="set-score" id="home-set-3" data-set="3"><%= match.match_data?.innings?.home?.[3] || '0' %></td>
                            <td class="set-score" id="home-set-4" data-set="4" style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>"><%= match.match_data?.innings?.home?.[4] || '0' %></td>
                            <td class="set-score" id="home-set-5" data-set="5" style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>"><%= match.match_data?.innings?.home?.[5] || '0' %></td>
                            <td class="total-score" id="home-total">0</td>
                        </tr>
                        <tr class="away-row">
                            <td class="team-name"><%= match.away_team || 'AWAY' %></td>
                            <td class="set-score" id="away-set-1" data-set="1"><%= match.match_data?.innings?.away?.[1] || '0' %></td>
                            <td class="set-score" id="away-set-2" data-set="2"><%= match.match_data?.innings?.away?.[2] || '0' %></td>
                            <td class="set-score" id="away-set-3" data-set="3"><%= match.match_data?.innings?.away?.[3] || '0' %></td>
                            <td class="set-score" id="away-set-4" data-set="4" style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>"><%= match.match_data?.innings?.away?.[4] || '0' %></td>
                            <td class="set-score" id="away-set-5" data-set="5" style="<%= (match.match_data?.match_format || 3) === 3 ? 'display: none !important;' : '' %>"><%= match.match_data?.innings?.away?.[5] || '0' %></td>
                            <td class="total-score" id="away-total">0</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>


        
        
        
    </div>

    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // 경기 데이터 로드 함수
        async function loadMatchData() {
            try {
                const response = await fetch(`/api/matches/${matchId}`);
                const matchData = await response.json();
                window.matchData = matchData;  // 전역 변수로 저장
                console.log('🔧 경기 데이터 로드 완료:', matchData.sport_type);
                return matchData;
            } catch (error) {
                console.error('🔧 경기 데이터 로드 실패:', error);
                return null;
            }
        }

        // 서브권 변경 이벤트 수신 (전역으로 이동)
        socket.on('serve_changed', function(data) {
            console.log('🏐 서브권 변경 이벤트 수신:', data);
            const serveArrow = document.getElementById('serve-arrow');
            if (serveArrow) {
                const arrow = data.serve_team === 'home' ? '▶' : '◀';
                serveArrow.textContent = arrow;
                console.log('🏐 서브권 도형 변경:', arrow);
            }
        });

        // 소켓 연결
        socket.on('connect', async () => {
            console.log('=== Socket.IO 연결됨 (오버레이) ===');
            console.log('Socket ID:', socket.id);
            console.log('Match ID:', matchId);
            socket.emit('join', matchId);
            
            // 경기 데이터 로드 후 종목별 Room에 참여 요청
            const matchData = await loadMatchData();
            if (matchData) {
                // 서버에 종목별 Room 참여 요청
                socket.emit('join_sport_room', matchData.sport_type);
                console.log(`🔧 종목별 Room 참여 요청: sport_${matchData.sport_type}`);
            }
            
            // 종목별 Room 참여 확인 이벤트 리스너
            socket.on('joined_sport_room', (data) => {
                if (data.success) {
                    console.log(`🔧 야구 종목별 Room 참여 완료: ${data.roomName}`);
                    console.log(`🔧 Room 참여자 수: ${data.clientCount}`);
                    // Room 참여 완료 후 기존 활성 이미지 로드
                    loadOverlayImage();
                    
                    // 이벤트 리스너 재등록 (Room 참여 완료 후)
                    console.log('🔧 야구 이벤트 리스너 재등록 시작');
                    registerOverlayImageEventListeners();
                } else {
                    console.error(`🔧 야구 종목별 Room 참여 실패: ${data.error}`);
                }
            });
            
            if (typeof isListMode !== 'undefined' && isListMode && typeof listId !== 'undefined' && listId) { 
            // 리스트 오버레이 모드일 때 리스트 오버레이 방에도 참가
            socket.emit('join_list_overlay', '<%= listId %>');
            } 
        });
        
        socket.on('disconnect', () => {
            console.log('=== Socket.IO 연결 끊어짐 (오버레이) ===');
            updateConnectionStatus(false);
        });

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(connected) {
            // 오버레이 페이지에서는 연결 상태 표시가 없으므로 콘솔 로그만 출력
            if (connected) {
                console.log('✅ 야구 오버레이 페이지 서버 연결됨');
            } else {
                console.log('❌ 야구 오버레이 페이지 서버 연결 끊김');
            }
        }
        
        socket.on('connect_error', (error) => {
            console.error('=== Socket.IO 연결 오류 (오버레이) ===', error);
        });

        // 야구 오버레이 페이지 재연결 이벤트 처리
        socket.on('reconnect_attempt', (attemptNumber) => {
            console.log(`🔄 야구 오버레이 페이지 소켓 재연결 시도 중... (${attemptNumber}번째)`);
            updateConnectionStatus(false);
        });

        socket.on('reconnect_error', (error) => {
            console.error('❌ 야구 오버레이 페이지 소켓 재연결 실패:', error);
            updateConnectionStatus(false);
        });

        socket.on('reconnect_failed', () => {
            console.error('❌ 야구 오버레이 페이지 소켓 재연결 완전 실패');
            updateConnectionStatus(false);
        });

        // 소켓 재연결 이벤트
        socket.on('reconnect', (attemptNumber) => {
            console.log(`🔄 야구 오버레이 페이지 소켓 재연결 성공 (시도 ${attemptNumber}번째)`);
            updateConnectionStatus(true);
            
            // 재연결 시 종목별 룸 재조인
            if (window.matchData?.sport_type) {
                console.log('🔧 야구 재연결 후 종목별 룸 재조인:', window.matchData.sport_type);
                socket.emit('join_sport_room', window.matchData.sport_type);
            }
            
            // 🔄 재연결 시 오버레이 페이지 자동 새로고침 (서버 리셋 후 컨트롤 페이지 내용 반영)
            console.log('🔄 야구 재연결 감지 - 오버레이 페이지 자동 새로고침 실행');
            console.log('🔄 새로고침 이유: 서버 재연결 후 컨트롤 페이지 내용 동기화');
            
            // DB 저장 완료를 위해 1초 지연 후 페이지 새로고침
            setTimeout(() => {
                console.log('🔄 1초 지연 후 야구 재연결 새로고침 실행');
                location.reload();
            }, 1000);
        });

                // match_update 이벤트 제거됨 - match_updated 이벤트로 통합

        // 경기방식 변경 이벤트
        socket.on('match_format_updated', (data) => {
            console.log('🏐 경기방식 변경 이벤트 수신됨:', data);
            console.log('🏐 현재 matchId:', matchId);
            console.log('🏐 이벤트 match_id:', data.match_id);
            
            if (data.match_id === matchId) {
                console.log('🏐 경기방식 변경 이벤트 처리:', data.match_format + '세트제');
                updateOverlaySetDisplay(data.match_format);
            } else {
                console.log('🏐 경기방식 변경 이벤트 무시됨 (다른 경기)');
            }
        });

// 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamNameElement = document.querySelector('.home-team-name');
                const awayTeamNameElement = document.querySelector('.away-team-name');
                
                if (homeTeamNameElement && data.home_team) {
                    homeTeamNameElement.textContent = data.home_team;
                    console.log('홈팀명 업데이트:', data.home_team);
                }
                if (awayTeamNameElement && data.away_team) {
                    awayTeamNameElement.textContent = data.away_team;
                    console.log('원정팀명 업데이트:', data.away_team);
                }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    console.log('종목 변경됨:', currentSportType);
                }
                
                // 경기방식 업데이트 (배구용)
                if (data.match_data?.match_format) {
                    console.log('🏐 경기방식 업데이트:', data.match_data.match_format + '세트제');
                    updateOverlaySetDisplay(data.match_data.match_format);
                }
                
       // 서브권 정보 업데이트 (배구용) - 도형으로 변경
       if (data.match_data?.serve_team) {
           const serveArrow = document.getElementById('serve-arrow');
           if (serveArrow) {
               const arrow = data.match_data.serve_team === 'home' ? '▶' : '◀';
               serveArrow.textContent = arrow;
               console.log('🏐 서브권 도형 업데이트:', arrow);
           }
       }
                
                // 현재 세트 표시 업데이트 (배구용)
                if (data.match_data?.current_inning) {
                    const currentSetDisplay = document.getElementById('current-set-display');
                    if (currentSetDisplay) {
                        currentSetDisplay.textContent = data.match_data.current_inning;
                        console.log('🏐 현재 세트 업데이트:', data.match_data.current_inning + '세트');
                    }
                }
                
                // 현재 세트 점수 업데이트 (배구용)
                const currentSet = data.match_data?.current_inning || 1;
                let homeCurrentSetScore = 0;
                let awayCurrentSetScore = 0;
                
                // 현재 세트의 점수 가져오기
                if (data.match_data?.innings) {
                    if (data.match_data.innings.home && data.match_data.innings.away) {
                        // 새로운 구조: innings.home[1], innings.away[1]
                        homeCurrentSetScore = parseInt(data.match_data.innings.home[currentSet] || '0');
                        awayCurrentSetScore = parseInt(data.match_data.innings.away[currentSet] || '0');
                    } else {
                        // 기존 구조: innings.home_1, innings.away_1
                        homeCurrentSetScore = parseInt(data.match_data.innings[`home_${currentSet}`] || '0');
                        awayCurrentSetScore = parseInt(data.match_data.innings[`away_${currentSet}`] || '0');
                    }
                }
                
                // 🏐 초기화 감지: 모든 점수가 0이고 current_inning이 1인 경우
                const isReset = data.home_score === 0 && data.away_score === 0 && 
                               data.match_data?.current_inning === 1 &&
                               homeCurrentSetScore === 0 && awayCurrentSetScore === 0;
                
                if (isReset) {
                    console.log('🏐 초기화 감지 - 모든 UI 강제 업데이트');
                    
                    // 메인 스코어보드 강제 업데이트
                    const homeScoreEl = document.querySelector('.home-team-score');
                    const awayScoreEl = document.querySelector('.away-team-score');
                    if (homeScoreEl) homeScoreEl.textContent = '0';
                    if (awayScoreEl) awayScoreEl.textContent = '0';
                    
                    // 현재 세트 표시 강제 업데이트
                    const currentSetDisplay = document.getElementById('current-set-display');
                    if (currentSetDisplay) currentSetDisplay.textContent = '1';
                    
                    // 총점 강제 업데이트
                    const homeTotalElement = document.getElementById('home-total');
                    const awayTotalElement = document.getElementById('away-total');
                    if (homeTotalElement) homeTotalElement.textContent = '0';
                    if (awayTotalElement) awayTotalElement.textContent = '0';
                    
                    // 모든 세트 점수 강제 업데이트
                    for (let i = 1; i <= 5; i++) {
                        const homeSetElement = document.querySelector(`[data-set="${i}"].home-set-score`);
                        const awaySetElement = document.querySelector(`[data-set="${i}"].away-set-score`);
                        if (homeSetElement) homeSetElement.textContent = '0';
                        if (awaySetElement) awaySetElement.textContent = '0';
                    }
                    
                    console.log('🏐 초기화 UI 강제 업데이트 완료');
                }
                
                console.log('🔥 현재 세트 점수 사용:', { 
                    currentSet: currentSet, 
                    home: homeCurrentSetScore, 
                    away: awayCurrentSetScore 
                });
                
                // 배구용: 현재 세트 점수만 사용 (이닝별 점수 합계 계산 제거)
                
                const homeScoreEl = document.querySelector('.home-team-score');
                if (homeScoreEl && homeScoreEl.textContent !== homeCurrentSetScore) {
                    homeScoreEl.textContent = homeCurrentSetScore;
                }
                const awayScoreEl = document.querySelector('.away-team-score');
                if (awayScoreEl && awayScoreEl.textContent !== awayCurrentSetScore) {
                    awayScoreEl.textContent = awayCurrentSetScore;
                }
                
                console.log('🔥 최종 점수 업데이트:', { home: homeCurrentSetScore, away: awayCurrentSetScore });
                
                // 대회명 업데이트
                if (data.match_data?.tournament_name) {
                    const tournamentDisplay = document.getElementById('tournament-display');
                    if (tournamentDisplay) {
                        tournamentDisplay.textContent = data.match_data.tournament_name;
                        console.log('🏐 대회명 업데이트:', data.match_data.tournament_name);
                    }
                }
                
                // 배구용: 세트 승리 계산 및 총점 업데이트
                if (data.match_data?.innings) {
                    let homeWins = 0;
                    let awayWins = 0;
                    
                    // 현재 세트 이전까지만 승리 계산 (진행 중인 세트 제외)
                    for (let i = 1; i < currentSet; i++) {
                        let homeScore = 0;
                        let awayScore = 0;
                        
                        // 세트 점수 가져오기
                        if (data.match_data.innings.home && data.match_data.innings.away) {
                            // 새로운 구조: innings.home[1], innings.away[1]
                            homeScore = parseInt(data.match_data.innings.home[i] || '0');
                            awayScore = parseInt(data.match_data.innings.away[i] || '0');
                } else {
                            // 기존 구조: innings.home_1, innings.away_1
                            homeScore = parseInt(data.match_data.innings[`home_${i}`] || '0');
                            awayScore = parseInt(data.match_data.innings[`away_${i}`] || '0');
                        }
                        
                        // 세트가 진행된 경우에만 승리 계산
                        if (homeScore > 0 || awayScore > 0) {
                            if (homeScore > awayScore) {
                                homeWins++;
                            } else if (awayScore > homeScore) {
                                awayWins++;
                            }
                            // 동점인 경우는 승리하지 않음
                        }
                    }
                    
                    // 세트 스코어보드의 총점 업데이트
                    const homeTotalElement = document.getElementById('home-total');
                    const awayTotalElement = document.getElementById('away-total');
                    
                    if (homeTotalElement) homeTotalElement.textContent = homeWins;
                    if (awayTotalElement) awayTotalElement.textContent = awayWins;
                    
                    console.log(`🏐 세트 승리 계산 완료 (${currentSet}세트 진행 중): 홈팀 ${homeWins}, 어웨이팀 ${awayWins}`);
                    
                    // 🏐 세트 스코어보드 개별 세트 점수 업데이트
                    for (let i = 1; i <= 5; i++) {
                        let homeSetScore = 0;
                        let awaySetScore = 0;
                        
                        // 세트 점수 가져오기
                        if (data.match_data.innings.home && data.match_data.innings.away) {
                            // 새로운 구조: innings.home[1], innings.away[1]
                            homeSetScore = parseInt(data.match_data.innings.home[i] || '0');
                            awaySetScore = parseInt(data.match_data.innings.away[i] || '0');
                        } else {
                            // 기존 구조: innings.home_1, innings.away_1
                            homeSetScore = parseInt(data.match_data.innings[`home_${i}`] || '0');
                            awaySetScore = parseInt(data.match_data.innings[`away_${i}`] || '0');
                        }
                        
                        // 세트 스코어보드의 개별 세트 점수 업데이트
                        const homeSetElement = document.querySelector(`[data-set="${i}"].home-set-score`);
                        const awaySetElement = document.querySelector(`[data-set="${i}"].away-set-score`);
                        
                        if (homeSetElement) {
                            homeSetElement.textContent = homeSetScore;
                        }
                        if (awaySetElement) {
                            awaySetElement.textContent = awaySetScore;
                        }
                        
                        console.log(`🏐 ${i}세트 점수 업데이트: 홈팀 ${homeSetScore}, 어웨이팀 ${awaySetScore}`);
                    }
                }
                
                // 야구 특화 데이터 업데이트 (match_data가 있는 경우)
                if (data.match_data) {
                    console.log('🔥 야구 match_updated 이벤트 수신:', data.match_data);
                    console.log('🔥 이닝:', data.match_data.current_inning, '타입:', data.match_data.inning_type);
                } else {
                    // match_data가 없는 경우 서버 점수 사용
                    const homeScoreElement = document.querySelector('.home-team-score');
                    const awayScoreElement = document.querySelector('.away-team-score');
                    
                    if (homeScoreElement) {
                        homeScoreElement.textContent = homeCurrentSetScore;
                    }
                    if (awayScoreElement) {
                        awayScoreElement.textContent = awayCurrentSetScore;
                    }
                }
                
                // 야구 특화 데이터 업데이트 (match_data가 있는 경우에만)
                if (data.match_data) {
                    // 이닝 정보 업데이트
                    const inningElement = document.querySelector('.current-inning');
                    if (inningElement && data.match_data.current_inning) {
                        console.log('🔥 이닝 요소 찾음, 업데이트:', data.match_data.current_inning);
                        // 이닝 번호와 초/말 표시를 함께 업데이트
                        inningElement.innerHTML = `
                            ${data.match_data.current_inning}
                            <div class="inning-indicator ${data.match_data.inning_type === 'bottom' ? 'bottom' : 'top'}"></div>
                        `;
                        console.log('🔥 이닝 인디케이터 업데이트:', data.match_data.inning_type);
                    } else {
                        console.log('❌ 이닝 요소를 찾을 수 없음');
                    }
                    
                    
                    
                    
                    // 팀 통계 업데이트
                    if (data.match_data.home_hits !== undefined) {
                        const homeHitsEl = document.querySelector('.home-hits');
                        if (homeHitsEl) homeHitsEl.textContent = data.match_data.home_hits;
                    }
                    if (data.match_data.away_hits !== undefined) {
                        const awayHitsEl = document.querySelector('.away-hits');
                        if (awayHitsEl) awayHitsEl.textContent = data.match_data.away_hits;
                    }
                    if (data.match_data.home_errors !== undefined) {
                        const homeErrorsEl = document.querySelector('.home-errors');
                        if (homeErrorsEl) homeErrorsEl.textContent = data.match_data.home_errors;
                    }
                    if (data.match_data.away_errors !== undefined) {
                        const awayErrorsEl = document.querySelector('.away-errors');
                        if (awayErrorsEl) awayErrorsEl.textContent = data.match_data.away_errors;
                    }
                    
                    // 이닝별 점수 업데이트
                    if (data.match_data.innings) {
                        for (let i = 1; i <= 9; i++) {
                            const homeInningEl = document.querySelector(`.home-inning-${i}`);
                            const awayInningEl = document.querySelector(`.away-inning-${i}`);
                            
                            if (homeInningEl && data.match_data.innings[`home_${i}`] !== undefined) {
                                homeInningEl.textContent = data.match_data.innings[`home_${i}`];
                            }
                            if (awayInningEl && data.match_data.innings[`away_${i}`] !== undefined) {
                                awayInningEl.textContent = data.match_data.innings[`away_${i}`];
                            }
                        }
                    }
                }
            }
        });

        // 실시간 타이머 업데이트 이벤트 처리 (야구는 이닝 정보)
        socket.on('timer_updated', (data) => {
            console.log('=== 야구 실시간 타이머 업데이트 수신 ===');
            console.log('타이머 업데이트 데이터:', data);
            
            if (data.matchId === matchId) {
                // 야구에서는 이닝 정보를 업데이트할 수 있음
                // 필요에 따라 이닝 관련 업데이트 로직 추가
                console.log('야구 타이머 업데이트:', data);
            }
        });


        // CSV 파일 처리 및 타율, 출루율 계산 함수
        function processPlayerCSV(csvData) {
            // CSV 파일 파싱 (탭으로 구분된 CSV)
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split('\t').map(h => h.trim());
            const players = [];
            
            // 각 라인을 처리하여 선수 정보 추출
            for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue; // 빈 줄 건너뛰기
                
                const values = lines[i].split('\t').map(v => v.trim());
                const player = {};
                
                // 헤더에 따라 각 값 매핑
                headers.forEach((header, index) => {
                    player[header] = values[index] || '';
                });
                
                // 데이터 숫자 형식으로 변환
                const atBats = parseInt(player['타수'] || 0);
                const hits = parseInt(player['안타'] || 0);
                const homeRuns = parseInt(player['홈런'] || 0);
                const rbi = parseInt(player['타점'] || 0);
                const steals = parseInt(player['도루'] || 0);
                
                // 추가 통계 (CSV에는 없지만 계산에 필요)
                const walks = parseInt(player['볼넷'] || 0);  // 없으면 0으로 가정
                const hbp = parseInt(player['사구'] || 0);     // 없으면 0으로 가정
                const sf = parseInt(player['희생플라이'] || 0); // 없으면 0으로 가정
                
                // 타율 계산 (안타 / 타수)
                if (atBats > 0) {
                    player['타율'] = (hits / atBats).toFixed(3).substring(1);  // 앞의 0 제거, 소수점 3자리까지
                    if (!player['타율'].startsWith('.')) player['타율'] = '.' + player['타율'];  // 앞에 점 추가
                } else {
                    player['타율'] = '.000';
                }
                
                // 출루율 계산 (안타 + 볼넷 + 사구) / (타수 + 볼넷 + 사구 + 희생플라이)
                const onBaseNumerator = hits + walks + hbp;
                const onBaseDenominator = atBats + walks + hbp + sf;
                
                if (onBaseDenominator > 0) {
                    player['출루율'] = (onBaseNumerator / onBaseDenominator).toFixed(3).substring(1);
                    if (!player['출루율'].startsWith('.')) player['출루율'] = '.' + player['출루율'];
                } else {
                    player['출루율'] = '.000';
                }
                
                // 추가 값 확인
                if (!player['번호']) player['번호'] = i.toString();
                if (!player['이름']) player['이름'] = `선수${i}`;
                if (!player['포지션']) player['포지션'] = '미정';
                
                players.push(player);
            }
            
            return players;
        }
        
        

        // 디자인 설정 로드 및 적용 함수
        async function loadDesignSettings() {
            try {
                const response = await fetch('/api/sport-overlay-design/BASEBALL');
                const result = await response.json();
                
                if (result.success) {
                    const design = result.design;
                    
                    // 스코어보드 위치 적용 (우측 하단 고정 위치로 설정)
                    const scoreboard = document.querySelector('.scoreboard');
                    if (scoreboard) {
                        scoreboard.style.position = 'fixed';
                        scoreboard.style.bottom = '20px';
                        scoreboard.style.right = '250px';
                        scoreboard.style.top = 'auto';
                        scoreboard.style.left = 'auto';
                    }
                    
                    // 홈팀 로고 위치 적용 (야구는 team-info.home-team 사용)
                    const homeLogo = document.querySelector('.team-info.home-team');
                    if (homeLogo && design.homeLogo) {
                        homeLogo.style.top = `${design.homeLogo.top}px`;
                        if (design.homeLogo.left !== undefined) {
                            homeLogo.style.left = `${design.homeLogo.left}px`;
                        }
                        if (design.homeLogo.right !== undefined) {
                            homeLogo.style.right = `${design.homeLogo.right}px`;
                        }
                    }
                    
                    // 어웨이팀 로고 위치 적용 (야구는 team-info.away-team 사용)
                    const awayLogo = document.querySelector('.team-info.away-team');
                    if (awayLogo && design.awayLogo) {
                        awayLogo.style.top = `${design.awayLogo.top}px`;
                        if (design.awayLogo.left !== undefined) {
                            awayLogo.style.left = `${design.awayLogo.left}px`;
                        }
                        if (design.awayLogo.right !== undefined) {
                            awayLogo.style.right = `${design.awayLogo.right}px`;
                        }
                    }
                    
                    // 경기 상태 위치 적용
                    const matchState = document.querySelector('.current-inning');
                    if (matchState && design.matchState) {
                        matchState.style.top = `${design.matchState.top}px`;
                        if (design.matchState.left !== undefined) {
                            matchState.style.left = `${design.matchState.left}px`;
                        }
                        if (design.matchState.right !== undefined) {
                            matchState.style.right = `${design.matchState.right}px`;
                        }
                    }
                    
                    
                    // 오버레이 이미지 위치 적용
                    const overlayImage = document.getElementById('overlayImage');
                    if (overlayImage && design.overlayImage) {
                        overlayImage.style.top = `${design.overlayImage.top}px`;
                        if (design.overlayImage.left !== undefined) {
                            overlayImage.style.left = `${design.overlayImage.left}px`;
                        }
                        if (design.overlayImage.width !== undefined) {
                            overlayImage.style.width = `${design.overlayImage.width}px`;
                        }
                        if (design.overlayImage.height !== undefined) {
                            overlayImage.style.height = `${design.overlayImage.height}px`;
                        }
                    }
                    
                    // 타이머 위치 적용
                    const timer = document.querySelector('.match-time');
                    if (timer && design.timer) {
                        if (design.timer.marginLeft !== undefined) {
                            timer.style.marginLeft = `${design.timer.marginLeft}px`;
                        }
                    }
                    
                    console.log('야구 디자인 설정 적용 완료');
                }
            } catch (error) {
                console.error('야구 디자인 설정 로드 오류:', error);
            }
        }

        // 오버레이 이미지 로드 함수 (활성화된 모든 이미지 표시)
    // 한글 파일명 디코딩 함수 (브라우저 호환 버전)
    function decodeKoreanFilename(filename) {
        try {
            // 깨진 파일명인지 확인
            if (filename.includes('ì') || filename.includes('ë') || filename.includes('í') || 
                filename.includes('â') || filename.includes('ê') || filename.includes('ô')) {
                
                // 브라우저 환경에서 한글 파일명 디코딩
                let decoded = filename;
                try {
                    // URL 디코딩 시도
                    decoded = decodeURIComponent(filename);
                } catch (e) {
                    // URL 디코딩 실패 시 원본 반환
                    console.log(`🔧 URL 디코딩 실패, 원본 사용: ${filename}`);
                    return filename;
                }
                
                console.log(`🔧 클라이언트 파일명 디코딩: ${filename} -> ${decoded}`);
                return decoded;
            }
            return filename;
        } catch (error) {
            console.error('🔧 클라이언트 파일명 디코딩 실패:', error);
            return filename;
        }
    }

    // 오버레이 이미지 이벤트 리스너 재등록 함수 (야구용)
    function registerOverlayImageEventListeners() {
        console.log('🔧 야구 오버레이 이미지 이벤트 리스너 재등록');
        
        // 기존 이벤트 리스너 제거 (중복 방지)
        socket.off('overlay_image_status_changed');
        socket.off('overlay_page_refresh');
        
        // 오버레이 이미지 상태 변경 실시간 이벤트 처리 (재등록)
        socket.on('overlay_image_status_changed', function(data) {
            console.log('🔧 야구 오버레이 이미지 상태 변경 실시간 이벤트 (재등록):', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교 (window.matchData 사용)
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 야구 스포츠 타입 일치, 이미지 처리 시작 (재등록)');
                
                if (data.isActive && data.imageData) {
                    // 이미지 활성화 - 해당 이미지만 추가 표시
                    console.log('🔧 야구 오버레이 이미지 활성화 (재등록):', data.imageData);
                    addOverlayImage(data.imageData);
                } else if (!data.isActive && data.imageData) {
                    // 이미지 비활성화 - 해당 이미지만 제거
                    console.log('🔧 야구 오버레이 이미지 비활성화 (재등록):', data.imageData);
                    removeOverlayImage(data.imageData.id);
                }
            } else {
                console.log('🔧 야구 스포츠 타입 불일치, Room 재참여 시도 (재등록)');
                // 스포츠 타입이 일치하지 않으면 Room 재참여 시도
                if (window.matchData?.sport_type) {
                    console.log('🔧 야구 Room 재참여 요청 (재등록):', window.matchData.sport_type);
                    socket.emit('join_sport_room', window.matchData.sport_type);
                }
            }
        });

        // 오버레이 페이지 새로고침 이벤트 처리 (재등록)
        socket.on('overlay_page_refresh', function(data) {
            console.log('🔧 야구 오버레이 페이지 새로고침 신호 수신 (재등록):', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 야구 오버레이 페이지 새로고침 실행 (재등록):', data.reason);
                // 페이지 새로고침
                    location.reload();
            } else {
                console.log('🔧 야구 스포츠 타입 불일치로 새로고침 건너뜀 (재등록)');
                // 대안: window.matchData가 없을 때도 새로고침 (디버깅용)
                if (!window.matchData) {
                    console.log('🔧 야구 window.matchData가 없어서 강제 새로고침 실행 (재등록)');
                        location.reload();
                }
            }
        });
        
        console.log('🔧 야구 오버레이 이미지 이벤트 리스너 재등록 완료');
    }

    // 오버레이 이미지 추가 함수 (다중 이미지 지원) - 야구용
    function addOverlayImage(imageData) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 야구 오버레이 이미지 추가:', imageData);
        
        // 이미 존재하는 이미지인지 확인
        const existingImg = overlayImageContainer.querySelector(`[data-image-id="${imageData.id}"]`);
        if (existingImg) {
            console.log('🔧 야구 이미지가 이미 존재함:', imageData.id);
            return;
        }
        
        const img = document.createElement('img');
        img.setAttribute('data-image-id', imageData.id);
        
        // 파일 경로에서 파일명 추출 및 디코딩
        const pathParts = imageData.file_path.split('/');
        const filename = pathParts[pathParts.length - 1];
        const decodedFilename = decodeKoreanFilename(filename);
        const decodedPath = imageData.file_path.replace(filename, decodedFilename);
        
        img.src = decodedPath;
        img.alt = '오버레이 이미지';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.position = 'absolute';
        img.style.top = '0';
        img.style.left = '0';
        img.style.zIndex = '1';
        
        img.onload = () => {
            overlayImageContainer.appendChild(img);
            overlayImageContainer.classList.add('show');
            console.log('🔧 야구 오버레이 이미지 추가 완료:', imageData.id);
        };
        
        img.onerror = (error) => {
            console.error('🔧 야구 오버레이 이미지 로드 실패:', error);
        };
    }
    
    // 오버레이 이미지 제거 함수 (다중 이미지 지원) - 야구용
    function removeOverlayImage(imageId) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 야구 오버레이 이미지 제거:', imageId);
        
        const imgToRemove = overlayImageContainer.querySelector(`[data-image-id="${imageId}"]`);
        if (imgToRemove) {
            imgToRemove.remove();
            console.log('🔧 야구 오버레이 이미지 제거 완료:', imageId);
            
            // 모든 이미지가 제거되었으면 컨테이너 숨김
            const remainingImages = overlayImageContainer.querySelectorAll('img');
            if (remainingImages.length === 0) {
                overlayImageContainer.classList.remove('show');
            }
        }
    }
    
    // 오버레이 이미지 표시 함수 (실시간 업데이트용) - 야구용
    function displayOverlayImage(imageData) {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 야구 오버레이 이미지 표시:', imageData);
        
        // 기존 이미지 제거
        overlayImageContainer.innerHTML = '';
        
        const img = document.createElement('img');
        // 파일 경로에서 파일명 추출 및 디코딩
        const pathParts = imageData.file_path.split('/');
        const filename = pathParts[pathParts.length - 1];
        const decodedFilename = decodeKoreanFilename(filename);
        const decodedPath = imageData.file_path.replace(filename, decodedFilename);
        
        img.src = decodedPath;
        img.alt = '오버레이 이미지';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.position = 'absolute';
        img.style.top = '0';
        img.style.left = '0';
        img.style.zIndex = '1';
        
        img.onload = () => {
            overlayImageContainer.appendChild(img);
            overlayImageContainer.classList.add('show');
            console.log('🔧 야구 오버레이 이미지 로드 완료');
        };
        
        img.onerror = (error) => {
            console.error('🔧 야구 오버레이 이미지 로드 실패:', error);
            overlayImageContainer.classList.remove('show');
        };
    }
    
    // 오버레이 이미지 숨김 함수 (실시간 업데이트용) - 야구용
    function hideOverlayImage() {
        const overlayImageContainer = document.getElementById('overlayImage');
        if (!overlayImageContainer) return;
        
        console.log('🔧 야구 오버레이 이미지 숨김');
        overlayImageContainer.classList.remove('show');
        overlayImageContainer.innerHTML = '';
    }

    async function loadOverlayImage() {
        try {
            console.log('야구 오버레이 이미지 로드 시작...');
                
                // 경기 정보에서 종목 코드 가져오기
                const matchResponse = await fetch(`/api/matches/${matchId}`);
                if (!matchResponse.ok) {
                    console.error('경기 정보를 가져올 수 없습니다.');
                    return;
                }
                
                const matchData = await matchResponse.json();
                const sportCode = matchData.sport_type.toUpperCase();
                console.log('종목 코드:', sportCode);
                
                // 종목코드 그대로 사용 (종목명 대신)
                const sportCodeForPath = sportCode;
                console.log('종목코드:', sportCodeForPath);
                
                // 해당 종목의 활성화된 이미지 조회
                const response = await fetch(`/api/overlay-images/active/${sportCode}`);
                const result = await response.json();
                
                console.log('야구 활성화된 이미지 목록 조회 결과:', result);
                
                const overlayImageContainer = document.getElementById('overlayImage');
                
                if (result.success && result.images && result.images.length > 0) {
                    console.log('🔧 야구 활성화된 이미지들:', result.images);
                    
                    // 모든 활성화된 이미지를 표시
                    overlayImageContainer.innerHTML = '';
                    
                    result.images.forEach((image, index) => {
                        const img = document.createElement('img');
                        img.setAttribute('data-image-id', image.id);
                        
                        // 종목코드 기반 경로로 직접 구성
                        const filename = image.filename;
                        const decodedFilename = decodeKoreanFilename(filename);
                        const imagePath = `/overlay-images/${sportCodeForPath}/${decodedFilename}`;
                        
                        console.log(`🔧 야구 이미지 경로 구성: ${imagePath}`);
                        img.src = imagePath;
                        img.alt = `야구 오버레이 이미지 ${index + 1}`;
                        img.style.width = '100%';
                        img.style.height = '100%';
                        img.style.objectFit = 'cover';
                        img.style.position = 'absolute';
                        img.style.top = '0';
                        img.style.left = '0';
                        img.style.zIndex = 1000 + index;
                        
                        img.onload = () => {
                            overlayImageContainer.appendChild(img);
                            overlayImageContainer.style.display = 'block';
                            console.log(`야구 활성화된 오버레이 이미지 ${index + 1} 로드됨:`, image.file_path);
                        };
                        
                        img.onerror = (error) => {
                            console.error(`야구 활성화된 오버레이 이미지 ${index + 1} 로드 실패:`, error);
                        };
                    });
                } else {
                    overlayImageContainer.style.display = 'none';
                    console.log('야구 활성화된 오버레이 이미지가 없습니다.');
                }
        } catch (error) {
            console.error('야구 오버레이 이미지 로드 오류:', error);
            document.getElementById('overlayImage').style.display = 'none';
        }
    }

        // 초기 팀 색상 설정
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // 디자인 설정 로드 및 적용
                await loadDesignSettings();
                
                // 오버레이 이미지 로드
                await loadOverlayImage();
                
                // 팀 로고 정보 가져오기 (축구와 동일한 방식)
                const response = await fetch(`/api/matches/${matchId}/team-logos`);
                if (!response.ok) {
                    throw new Error(`팀 로고 정보 로드 실패: ${response.status}`);
                }
                const result = await response.json();
                console.log('팀 로고 정보 로드 성공:', result);
                
                // 홈팀 로고 설정
                const homeTeamName = '<%= match.home_team %>';
                if (result.success && result.teamLogos) {
                    const homeTeamInfo = result.teamLogos.find(team => team.team_type === 'home');
                    if (homeTeamInfo && homeTeamInfo.logo_path) {
                        const homeLogoContainer = document.querySelector('.team-info.home-team .team-logo-container');
                        if (homeLogoContainer) {
                            homeLogoContainer.style.backgroundColor = homeTeamInfo.logo_bg_color || '#ffffff';
                            homeLogoContainer.innerHTML = `
                                <img src="${homeTeamInfo.logo_path}" alt="${homeTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain;">
                            `;
                        }
                    }
                }
                
                // 원정팀 로고 설정
                const awayTeamName = '<%= match.away_team %>';
                if (result.success && result.teamLogos) {
                    const awayTeamInfo = result.teamLogos.find(team => team.team_type === 'away');
                    if (awayTeamInfo && awayTeamInfo.logo_path) {
                        const awayLogoContainer = document.querySelector('.team-info.away-team .team-logo-container');
                        if (awayLogoContainer) {
                            awayLogoContainer.style.backgroundColor = awayTeamInfo.logo_bg_color || '#ffffff';
                            awayLogoContainer.innerHTML = `
                                <img src="${awayTeamInfo.logo_path}" alt="${awayTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain;">
                            `;
                        }
                    }
                }

                // 팀 컬러 정보 로드 및 적용 (DB에서 직접 가져오기)
                const homeTeamSection = document.getElementById('home-team-section');
                const awayTeamSection = document.getElementById('away-team-section');
                
                if (result.success && result.teamLogos) {
                    // 홈팀 컬러 적용
                    const homeTeamInfo = result.teamLogos.find(team => team.team_type === 'home');
                    if (homeTeamInfo && homeTeamInfo.team_color && homeTeamSection) {
                        homeTeamSection.style.backgroundColor = homeTeamInfo.team_color;
                        console.log(`🔧 홈팀 컬러 적용 (초기 로드): ${homeTeamName} -> ${homeTeamInfo.team_color}`);
                    }
                    
                    // 원정팀 컬러 적용
                    const awayTeamInfo = result.teamLogos.find(team => team.team_type === 'away');
                    if (awayTeamInfo && awayTeamInfo.team_color && awayTeamSection) {
                        awayTeamSection.style.backgroundColor = awayTeamInfo.team_color;
                        console.log(`🔧 원정팀 컬러 적용 (초기 로드): ${awayTeamName} -> ${awayTeamInfo.team_color}`);
                    }
                    
                }
                
            } catch (error) {
                console.error('팀 로고 정보 로드 중 오류 발생:', error);
            }
        });


        // 색상을 투명도가 있는 색상으로 변환하는 헬퍼 함수
        function convertToTransparentColor(color, alpha) {
            // RGB 또는 RGBA 형식인 경우
            if (color.startsWith('rgb')) {
                const rgbValues = color.match(/\d+/g);
                if (rgbValues && rgbValues.length >= 3) {
                    return `rgba(${rgbValues[0]}, ${rgbValues[1]}, ${rgbValues[2]}, ${alpha})`;
                }
            }
            
            // HEX 형식인 경우
            if (color.startsWith('#')) {
                const r = parseInt(color.substr(1, 2), 16);
                const g = parseInt(color.substr(3, 2), 16);
                const b = parseInt(color.substr(5, 2), 16);
                return `rgba(${r}, ${g}, ${b}, ${alpha})`;
            }
            
            // 기본값으로 검은색 반투명 배경 반환
            return `rgba(0, 0, 0, ${alpha})`;
        }

        // 팀명 길이에 따른 폰트 크기 조절
        function adjustTeamNameSize() {
            try {
                const homeTeamHeader = document.querySelector('.team-section .team-info:first-child .team-header');
                const awayTeamHeader = document.querySelector('.team-section .team-info:last-child .team-header');
                
                if (!homeTeamHeader || !awayTeamHeader) {
                    console.error('팀 헤더 요소를 찾을 수 없음');
                    return;
                }
                
                function adjustSize(element) {
                    const text = element.textContent;
                    console.log('팀 이름 크기 조절:', {
                        team: element.closest('.team-info').classList.contains('home-team') ? '홈팀' : '원정팀',
                        text,
                        length: text.length
                    });
                    
                    // 기존 클래스 제거
                    element.classList.remove('long', 'very-long');
                    
                    // 텍스트 길이에 따라 클래스 추가
                    if (text.length > 10) {
                        element.classList.add('very-long');
                        console.log('매우 긴 텍스트 적용');
                    } else if (text.length > 8) {
                        element.classList.add('long');
                        console.log('긴 텍스트 적용');
                    }
                }
                
                adjustSize(homeTeamHeader);
                adjustSize(awayTeamHeader);
                
                console.log('팀 이름 크기 조절 완료');
            } catch (error) {
                console.error('팀 이름 크기 조절 중 오류 발생:', error);
            }
        }
        
        // 팀명 업데이트 시 크기 조절
        socket.on('teamHeaderChanged', function(data) {
            if (data.matchId === matchId) {
                const homeTeamHeader = document.querySelector('.team-section .team-info:first-child .team-header');
                const awayTeamHeader = document.querySelector('.team-section .team-info:last-child .team-header');
                
                if (homeTeamHeader) homeTeamHeader.textContent = data.homeHeader;
                if (awayTeamHeader) awayTeamHeader.textContent = data.awayHeader;
                
                adjustTeamNameSize();
            }
        });
        

        // 팀 로고 삭제 이벤트 처리
        socket.on('teamLogoRemoved', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType || data.team;
                
                console.log('팀 로고 삭제 이벤트 수신:', {
                    teamType,
                    matchId: data.matchId
                });
                
                const logoContainer = document.querySelector(`.team-info.${teamType}-team .team-logo-container`);
                if (logoContainer) {
                    logoContainer.innerHTML = `<div class="team-logo-placeholder"></div>`;
                    console.log(`${teamType}팀 로고 삭제 완료`);
                } else {
                    console.error(`${teamType}팀 로고 컨테이너를 찾을 수 없음`);
                }
            }
        });
        
        // 팀 색상 업데이트 이벤트 처리
        socket.on('teamColorUpdate', function(data) {
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                const teamColor = data.teamColor;
                
                console.log('팀 색상 업데이트 이벤트 수신:', {
                    teamType,
                    teamColor,
                    matchId: data.matchId
                });
                
                const teamSection = document.getElementById(`${teamType}-team-section`);
                if (teamSection) {
                    teamSection.style.backgroundColor = teamColor;
                    console.log(`${teamType}팀 섹션 색상 업데이트:`, {
                        section: teamSection,
                        color: teamColor,
                        appliedColor: teamSection.style.backgroundColor
                    });
                    
                        } else {
                    console.error(`${teamType}팀 섹션을 찾을 수 없음`);
                }
            }
        });


        // 팀 이름 업데이트 이벤트
        socket.on('teamNameUpdated', function(data) {
            console.log('팀명 업데이트 이벤트 수신 (첫 번째 리스너):', data);
            
            if (data.matchId === matchId) {
                const team = data.team;
                const teamName = data.teamName;
                
                // 팀 헤더 업데이트
                const teamHeader = document.querySelector(`.team-info.${team}-team .team-header`);
                if (teamHeader) {
                    teamHeader.textContent = teamName;
                }
                
                // 이닝 테이블의 팀명 업데이트
                const teamTableRows = document.querySelectorAll('.innings-table tbody tr');
                if (teamTableRows.length >= 2) {
                    if (team === 'home') {
                        // 홈팀은 첫 번째 행
                        const homeTeamName = teamTableRows[0].querySelector('.team-name');
                        if (homeTeamName) {
                            homeTeamName.textContent = teamName;
                        }
                    } else if (team === 'away') {
                        // 원정팀은 두 번째 행
                        const awayTeamName = teamTableRows[1].querySelector('.team-name');
                        if (awayTeamName) {
                            awayTeamName.textContent = teamName;
                        }
                    }
                }
                
                // 팀명 요소들 업데이트
                const teamNameElements = document.querySelectorAll(`.team-info.${team}-team .team-name`);
                teamNameElements.forEach(element => {
                    element.textContent = teamName;
                });
                
                // 팀 이름 크기 조절
                adjustTeamNameSize();
                
                
                console.log(`${team}팀명 업데이트 완료: ${teamName}`);
            }
        });

        // 팀 색상 업데이트 이벤트 처리
        socket.on('teamColorUpdated', function(data) {
            console.log('팀 색상 업데이트 이벤트 수신:', data);
            
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                const teamColor = data.teamColor;
                const headerText = data.headerText;
                
                // 팀 색상 업데이트
                const teamElements = document.querySelectorAll(`.team-info.${teamType}-team`);
                teamElements.forEach(element => {
                    element.style.backgroundColor = teamColor;
                });
                
                // 팀 헤더 텍스트 업데이트 (있는 경우)
                if (headerText) {
                    const headerElements = document.querySelectorAll(`.team-info.${teamType}-team .team-header`);
                    headerElements.forEach(element => {
                        element.textContent = headerText;
                    });
                }
                
                // 팀 섹션 색상 업데이트
                const teamSection = document.getElementById(`${teamType}-team-section`);
                if (teamSection) {
                    teamSection.style.backgroundColor = teamColor;
                    console.log(`${teamType}팀 섹션 색상 업데이트:`, {
                        section: teamSection,
                        color: teamColor,
                        teamType: teamType
                    });
                    
            } else {
                    console.error(`${teamType}팀 섹션을 찾을 수 없음`);
                }
                
                console.log(`${teamType}팀 색상 업데이트 완료: ${teamColor}`);
            }
        });

        // 팀로고 배경색 업데이트 이벤트 처리 (팀컬러와 동일한 방식)
        socket.on('teamLogoBgUpdated', function(data) {
            console.log('팀로고 배경색 업데이트 이벤트 수신:', data);
            
            if (data.matchId === matchId) {
                const teamType = data.teamType;
                const logoBgColor = data.logoBgColor;
                
                // 팀로고 배경색 업데이트
                const logoContainers = document.querySelectorAll(`.team-info.${teamType}-team .team-logo-container`);
                logoContainers.forEach(container => {
                    container.style.backgroundColor = logoBgColor || '#ffffff';
                });
                
                console.log(`${teamType}팀로고 배경색 업데이트 완료: ${logoBgColor}`);
            }
        });


        // 스코어 업데이트 이벤트 (배구에서는 match_updated 이벤트로 대체)
        socket.on('scoreUpdated', (data) => {
            console.log('스코어 업데이트:', data);
            
            // 배구에서는 match_updated 이벤트로 처리되므로 무시 (중복 업데이트 방지)
            console.log('🏐 배구에서는 scoreUpdated 이벤트 무시 (match_updated로 대체)');
            return;
            
            // 현재 세트 점수 업데이트 (배구용)
            const currentSet = data.match_data?.current_inning || 1;
            const homeCurrentSetScore = data.match_data?.innings?.home?.[currentSet] || '0';
            const awayCurrentSetScore = data.match_data?.innings?.away?.[currentSet] || '0';
            
            // 메인 스코어보드 업데이트 (현재 세트 점수)
            document.querySelector('.home-team-score').textContent = homeCurrentSetScore;
            document.querySelector('.away-team-score').textContent = awayCurrentSetScore;
            
            // 현재 세트 표시 업데이트
            const currentSetDisplay = document.getElementById('current-set-display');
            if (currentSetDisplay) {
                currentSetDisplay.textContent = currentSet;
            }
            
            // 세트 스코어보드 업데이트
            if (data.match_data?.innings) {
                for (let i = 1; i <= 5; i++) {
                    const homeSetElement = document.getElementById(`home-set-${i}`);
                    const awaySetElement = document.getElementById(`away-set-${i}`);
                    
                    if (homeSetElement) {
                        homeSetElement.textContent = data.match_data.innings.home?.[i] || '0';
                    }
                    if (awaySetElement) {
                        awaySetElement.textContent = data.match_data.innings.away?.[i] || '0';
                    }
                }
                console.log('🏐 세트 스코어보드 업데이트 완료');
            }
            
            console.log(`=== 배구 오버레이 현재 세트 점수 업데이트 ===`);
            console.log(`현재 세트: ${currentSet}세트`);
            console.log(`홈팀 현재 세트 점수: ${homeCurrentSetScore}`);
            console.log(`어웨이팀 현재 세트 점수: ${awayCurrentSetScore}`);
            
            
            // 이닝 표시 업데이트
            document.querySelector('.current-inning').innerHTML = `
                ${data.match_data?.current_inning || '1'}
                <div class="inning-indicator ${data.match_data?.inning_type === 'bottom' ? 'bottom' : 'top'}"></div>
            `;
            
            // 이닝 스코어 업데이트 (배구용 세트 스코어보드로 대체됨)
            
            // 총점(승리 세트 개수) 계산
            let homeWins = 0;
            let awayWins = 0;
            
            if (data.match_data?.innings) {
                // 현재 세트 이전까지만 승리 계산
                for (let i = 1; i < currentSet; i++) {
                    const homeScore = parseInt(data.match_data.innings.home?.[i]) || 0;
                    const awayScore = parseInt(data.match_data.innings.away?.[i]) || 0;
                    
                    if (homeScore > 0 || awayScore > 0) {
                        if (homeScore > awayScore) {
                            homeWins++;
                        } else if (awayScore > homeScore) {
                            awayWins++;
                        }
                    }
                }
            }
            
            // 세트 스코어보드의 총점 업데이트
            const homeTotalElement = document.getElementById('home-total');
            const awayTotalElement = document.getElementById('away-total');
            
            if (homeTotalElement) homeTotalElement.textContent = homeWins;
            if (awayTotalElement) awayTotalElement.textContent = awayWins;
            
            console.log(`총점(승리 세트 개수) 업데이트: 홈팀 ${homeWins}, 어웨이팀 ${awayWins}`);
            
        });

        // 야구 이닝 스코어 업데이트 이벤트 처리
        socket.on('baseball_inning_score_updated', (data) => {
            console.log('=== 야구 이닝 스코어 업데이트 수신 (오버레이) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);
            
            // 배구에서는 야구 이벤트를 세트별 점수 실시간 업데이트용으로 사용
            console.log('🏐 배구에서 세트별 점수 실시간 업데이트용으로 사용');
            
            if (data.matchId === matchId) {
                const { team, inning, score, innings, home_score, away_score } = data;
                
                // 이닝 스코어 테이블 업데이트
                const teamElementId = team === 'home' ? `teamA-inning-${inning}` : `teamB-inning-${inning}`;
                const inningElement = document.getElementById(teamElementId);
                
                if (inningElement) {
                    inningElement.textContent = score;
                    console.log(`이닝 스코어 업데이트: ${team}팀 ${inning}회 = ${score}`);
                }
                
                // 전체 이닝 스코어 업데이트 (배구용 세트 스코어보드로 대체됨)
                
                // 현재 세트 점수 업데이트 (배구용) - match_data가 제대로 전송된 경우에만
                if (data.match_data?.innings?.home && data.match_data?.innings?.away) {
                    const currentSet = data.match_data?.current_inning || 1;
                    const homeCurrentSetScore = data.match_data?.innings?.home?.[currentSet] || '0';
                    const awayCurrentSetScore = data.match_data?.innings?.away?.[currentSet] || '0';
                    
                    // 메인 스코어보드 업데이트 (현재 세트 점수)
                    const homeScoreElement = document.querySelector('.home-team-score');
                    const awayScoreElement = document.querySelector('.away-team-score');
                    
                    // 점수가 변경된 경우에만 업데이트 (깜빡임 방지)
                    if (homeScoreElement && homeScoreElement.textContent !== homeCurrentSetScore) {
                        homeScoreElement.textContent = homeCurrentSetScore;
                    }
                    if (awayScoreElement && awayScoreElement.textContent !== awayCurrentSetScore) {
                        awayScoreElement.textContent = awayCurrentSetScore;
                    }
                    
                    console.log('🏐 baseball_inning_score_updated에서 메인 스코어 업데이트:', { home: homeCurrentSetScore, away: awayCurrentSetScore });
                } else {
                    console.log('🏐 baseball_inning_score_updated에서 match_data가 없어서 메인 스코어 업데이트 건너뜀');
                }
                
                // 대회명 업데이트 (세트별 점수 실시간 업데이트 시)
                if (data.match_data?.tournament_name) {
                    const tournamentDisplay = document.getElementById('tournament-display');
                    if (tournamentDisplay) {
                        tournamentDisplay.textContent = data.match_data.tournament_name;
                        console.log('🏐 세트별 점수 업데이트 시 대회명 업데이트:', data.match_data.tournament_name);
                    }
                }
                
                // 세트 스코어보드 업데이트 (실시간 업데이트)
                if (innings) {
                    for (let i = 1; i <= 5; i++) {
                        const homeSetElement = document.getElementById(`home-set-${i}`);
                        const awaySetElement = document.getElementById(`away-set-${i}`);
                        
                        if (homeSetElement) {
                            homeSetElement.textContent = innings[`home_${i}`] || '0';
                        }
                        if (awaySetElement) {
                            awaySetElement.textContent = innings[`away_${i}`] || '0';
                        }
                    }
                    console.log('🏐 세트별 점수 실시간 업데이트 완료');
                }
                
                // 총점 실시간 업데이트
                if (home_score !== undefined && away_score !== undefined) {
                    const homeTotalElement = document.getElementById('home-total');
                    const awayTotalElement = document.getElementById('away-total');
                    
                    if (homeTotalElement) homeTotalElement.textContent = home_score;
                    if (awayTotalElement) awayTotalElement.textContent = away_score;
                    
                    console.log(`🏐 총점 실시간 업데이트: 홈팀 ${home_score}, 어웨이팀 ${away_score}`);
                }
                
                console.log(`=== 배구 오버레이 이닝 스코어 업데이트 ===`);
                console.log(`현재 세트: ${data.match_data?.current_inning || 1}세트`);
                
                // 현재 세트 점수 계산 (로깅용)
                const currentSet = data.match_data?.current_inning || 1;
                let homeCurrentSetScore = 'N/A';
                let awayCurrentSetScore = 'N/A';
                
                if (data.match_data?.innings?.home && data.match_data?.innings?.away) {
                    homeCurrentSetScore = data.match_data.innings.home[currentSet] || '0';
                    awayCurrentSetScore = data.match_data.innings.away[currentSet] || '0';
                }
                
                console.log(`홈팀 현재 세트 점수: ${homeCurrentSetScore}`);
                console.log(`어웨이팀 현재 세트 점수: ${awayCurrentSetScore}`);
                
                // 총점(승리 세트 개수) 계산 및 표시
                let homeWins = 0;
                let awayWins = 0;
                
                // 현재 세트 이전까지만 승리 계산
                for (let i = 1; i < currentSet; i++) {
                    const homeScore = parseInt(data.match_data?.innings?.home?.[i]) || 0;
                    const awayScore = parseInt(data.match_data?.innings?.away?.[i]) || 0;
                    
                    if (homeScore > 0 || awayScore > 0) {
                        if (homeScore > awayScore) {
                            homeWins++;
                        } else if (awayScore > homeScore) {
                            awayWins++;
                        }
                    }
                }
                
                // 세트 스코어보드의 총점 업데이트
                const homeTotalElement = document.getElementById('home-total');
                const awayTotalElement = document.getElementById('away-total');
                
                if (homeTotalElement) homeTotalElement.textContent = homeWins;
                if (awayTotalElement) awayTotalElement.textContent = awayWins;
                
                console.log(`총점(승리 세트 개수) 업데이트: 홈팀 ${homeWins}, 어웨이팀 ${awayWins}`);
                console.log('=== 야구 이닝 스코어 업데이트 처리 완료 (오버레이) ===');
                    } else {
                console.log('매치 ID가 일치하지 않음 - 이벤트 무시');
            }
        });

        // 야구 오버레이 표시/숨김 업데이트 이벤트 처리
        socket.on('baseball_overlay_visibility_updated', (data) => {
            console.log('야구 오버레이 표시 상태 업데이트 수신:', data);
            
            if (data.matchId === matchId) {
                const { overlayType, isVisible, overlay_visibility } = data;
                
                // 각 오버레이 요소의 표시/숨김 처리
                if (overlayType === 'innings') {
                    const inningsScoreboard = document.querySelector('.innings-scoreboard');
                    if (inningsScoreboard) {
                        inningsScoreboard.style.display = isVisible ? 'block' : 'none';
                        console.log(`이닝 스코어보드 오버레이 ${isVisible ? '표시' : '숨김'}`);
                    }
                }
                
                // 전체 오버레이 표시 상태 저장
                if (overlay_visibility) {
                    window.overlayVisibility = overlay_visibility;
                }
            }
        });

        // 야구 전용 팀 로고/컬러/배경색 실시간 반영

        // 팀 위치 변경 이벤트 처리
        socket.on('teamsSwapped', async function(data) {
            console.log('팀 위치 변경 이벤트 수신:', data);
            
            if (data.matchId === matchId) {
                // 팀명 업데이트
                const homeTeamElements = document.querySelectorAll('.team-info.home-team .team-header');
                const awayTeamElements = document.querySelectorAll('.team-info.away-team .team-header');
                
                homeTeamElements.forEach(element => {
                    element.textContent = data.home_team;
                });
                awayTeamElements.forEach(element => {
                    element.textContent = data.away_team;
                });
                
                // 점수 업데이트 (현재 세트 점수 사용)
                const currentSet = data.match_data?.current_inning || 1;
                const homeCurrentSetScore = data.match_data?.innings?.home?.[currentSet] || '0';
                const awayCurrentSetScore = data.match_data?.innings?.away?.[currentSet] || '0';
                
                const homeScoreElements = document.querySelectorAll('.home-team-score');
                const awayScoreElements = document.querySelectorAll('.away-team-score');
                
                homeScoreElements.forEach(element => {
                    if (element.textContent !== homeCurrentSetScore) {
                        element.textContent = homeCurrentSetScore;
                    }
                });
                awayScoreElements.forEach(element => {
                    if (element.textContent !== awayCurrentSetScore) {
                        element.textContent = awayCurrentSetScore;
                    }
                });
                
                // 이닝 테이블의 팀명도 업데이트
                const homeTableNameElements = document.querySelectorAll('.innings-table tbody tr:first-child .team-name');
                const awayTableNameElements = document.querySelectorAll('.innings-table tbody tr:last-child .team-name');
                
                homeTableNameElements.forEach(element => {
                    element.textContent = data.home_team;
                });
                awayTableNameElements.forEach(element => {
                    element.textContent = data.away_team;
                });
                
                // 배구용: 세트 승리 계산 및 총점 업데이트
                if (data.match_data?.innings) {
                    let homeWins = 0;
                    let awayWins = 0;
                    
                    // 현재 세트 이전까지만 승리 계산 (진행 중인 세트 제외)
                    for (let i = 1; i < currentSet; i++) {
                        let homeScore = 0;
                        let awayScore = 0;
                        
                        // 세트 점수 가져오기
                        if (data.match_data.innings.home && data.match_data.innings.away) {
                            // 새로운 구조: innings.home[1], innings.away[1]
                            homeScore = parseInt(data.match_data.innings.home[i] || '0');
                            awayScore = parseInt(data.match_data.innings.away[i] || '0');
                        } else {
                            // 기존 구조: innings.home_1, innings.away_1
                            homeScore = parseInt(data.match_data.innings[`home_${i}`] || '0');
                            awayScore = parseInt(data.match_data.innings[`away_${i}`] || '0');
                        }
                        
                        // 세트가 진행된 경우에만 승리 계산
                        if (homeScore > 0 || awayScore > 0) {
                            if (homeScore > awayScore) {
                                homeWins++;
                            } else if (awayScore > homeScore) {
                                awayWins++;
                            }
                            // 동점인 경우는 승리하지 않음
                        }
                    }
                    
                    // 세트 스코어보드의 총점 업데이트
                    const homeTotalElement = document.getElementById('home-total');
                    const awayTotalElement = document.getElementById('away-total');
                    
                    if (homeTotalElement) homeTotalElement.textContent = homeWins;
                    if (awayTotalElement) awayTotalElement.textContent = awayWins;
                    
                    console.log(`🏐 팀 위치 변경 시 세트 승리 계산 완료 (${currentSet}세트 진행 중): 홈팀 ${homeWins}, 어웨이팀 ${awayWins}`);
                }
                
                // 대회명 업데이트 (팀 위치 변경 시)
                if (data.match_data?.tournament_name) {
                    const tournamentDisplay = document.getElementById('tournament-display');
                    if (tournamentDisplay) {
                        tournamentDisplay.textContent = data.match_data.tournament_name;
                        console.log('🏐 팀 위치 변경 시 대회명 업데이트:', data.match_data.tournament_name);
                    }
                }
                
                // 세트 스코어보드 업데이트 (팀 위치 변경 시)
                if (data.match_data?.innings) {
                    for (let i = 1; i <= 5; i++) {
                        const homeSetElement = document.getElementById(`home-set-${i}`);
                        const awaySetElement = document.getElementById(`away-set-${i}`);
                        
                        if (homeSetElement) {
                            homeSetElement.textContent = data.match_data.innings.home?.[i] || '0';
                        }
                        if (awaySetElement) {
                            awaySetElement.textContent = data.match_data.innings.away?.[i] || '0';
                        }
                    }
                    console.log('🏐 팀 위치 변경 시 세트 스코어보드 업데이트 완료');
                }
                
                // 팀 로고 업데이트 (축구와 동일한 방식)
                try {
                    const response = await fetch(`/api/matches/${matchId}/team-logos`);
                    if (response.ok) {
                        const result = await response.json();
                        
                        // 홈팀 로고 업데이트 (축구와 동일한 방식)
                        if (result.success && result.teamLogos) {
                            const homeTeamInfo = result.teamLogos.find(team => team.team_type === 'home');
                            const homeLogoContainers = document.querySelectorAll('.team-info.home-team .team-logo-container');
                            homeLogoContainers.forEach(container => {
                                if (homeTeamInfo && homeTeamInfo.logo_path) {
                                    container.style.backgroundColor = homeTeamInfo.logo_bg_color || '#ffffff';
                                    container.innerHTML = `
                                        <img src="${homeTeamInfo.logo_path}" alt="${data.home_team} 로고" class="team-logo">
                                    `;
                } else {
                                    container.style.backgroundColor = '#f8f9fa';
                                    container.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                                }
                            });
                            
                            // 원정팀 로고 업데이트
                            const awayTeamInfo = result.teamLogos.find(team => team.team_type === 'away');
                            const awayLogoContainers = document.querySelectorAll('.team-info.away-team .team-logo-container');
                            awayLogoContainers.forEach(container => {
                                if (awayTeamInfo && awayTeamInfo.logo_path) {
                                    container.style.backgroundColor = awayTeamInfo.logo_bg_color || '#ffffff';
                                    container.innerHTML = `
                                        <img src="${awayTeamInfo.logo_path}" alt="${data.away_team} 로고" class="team-logo">
                                    `;
                } else {
                                    container.style.backgroundColor = '#f8f9fa';
                                    container.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                                }
                            });
                        }
                    }
                } catch (error) {
                    console.error('팀 로고 업데이트 중 오류 발생:', error);
                }
                
                console.log('팀 위치 변경 완료');
            }
        });

        // 스포츠 오버레이 이미지 변경 이벤트 처리 (야구용)
        socket.on('sport_overlay_image_updated', function(data) {
            console.log('야구 스포츠 오버레이 이미지 업데이트:', data);
            
            if (data.action === 'uploaded') {
                // 새 이미지가 업로드된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'deleted') {
                // 이미지가 삭제된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'activated') {
                // 이미지가 활성화된 경우 - 활성화된 이미지들 다시 로드
                loadOverlayImage();
            } else if (data.action === 'status_changed') {
                // 이미지 상태가 변경된 경우 - 활성화된 이미지들 다시 로드
                console.log('야구 이미지 상태 변경됨:', data);
                loadOverlayImage();
            }
        });

        // 오버레이 이미지 상태 변경 실시간 이벤트 처리 (동적 처리)
        socket.on('overlay_image_status_changed', function(data) {
            console.log('🔧 야구 오버레이 이미지 상태 변경 실시간 이벤트:', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교 (window.matchData 사용)
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 야구 스포츠 타입 일치, 이미지 처리 시작');
                
                if (data.isActive && data.imageData) {
                    // 이미지 활성화 - 해당 이미지만 추가 표시
                    console.log('🔧 야구 오버레이 이미지 활성화:', data.imageData);
                    addOverlayImage(data.imageData);
                } else if (!data.isActive && data.imageData) {
                    // 이미지 비활성화 - 해당 이미지만 제거
                    console.log('🔧 야구 오버레이 이미지 비활성화:', data.imageData);
                    removeOverlayImage(data.imageData.id);
                }
            } else {
                console.log('🔧 야구 스포츠 타입 불일치, Room 재참여 시도');
                // 스포츠 타입이 일치하지 않으면 Room 재참여 시도
                if (window.matchData?.sport_type) {
                    console.log('🔧 야구 Room 재참여 요청:', window.matchData.sport_type);
                    socket.emit('join_sport_room', window.matchData.sport_type);
                }
            }
        });

        // 오버레이 페이지 새로고침 이벤트 처리
        socket.on('overlay_page_refresh', function(data) {
            console.log('🔧 야구 오버레이 페이지 새로고침 신호 수신:', data);
            console.log('🔧 현재 window.matchData:', window.matchData);
            console.log('🔧 현재 경기 sport_type:', window.matchData?.sport_type);
            console.log('🔧 이벤트 sportCode:', data.sportCode);
            
            // 현재 경기의 스포츠 타입과 동적 비교
            if (data.sportCode === window.matchData?.sport_type) {
                console.log('🔧 야구 오버레이 페이지 새로고침 실행:', data.reason);
                // 페이지 새로고침
                    location.reload();
            } else {
                console.log('🔧 야구 스포츠 타입 불일치로 새로고침 건너뜀');
            }
        });

        // dataChanged 이벤트 처리 (실시간 업데이트)
        socket.on('dataChanged', async function(data) {
            console.log('🔧 dataChanged 이벤트 수신 (야구):', data);
            console.log('🔧 현재 경기 ID:', matchId);
            console.log('🔧 이벤트 경기 ID:', data.matchId);
            console.log('🔧 이벤트 타입:', data.type);
            console.log('🔧 팀 타입:', data.teamType);
            
            if (data.matchId === matchId) {
                console.log('🔧 동일 경기 dataChanged 이벤트 - 데이터 재로드 시작');
                setTimeout(async () => {
                    try {
                        console.log('🔧 500ms 지연 후 데이터 재로드 실행');
                        await loadMatchData();
                        
                        // 팀로고 정보도 함께 로드
                        if (data.type === 'teamLogo' || data.type === 'teamName' || data.type === 'teamColor') {
                            console.log('🔧 팀로고 정보 재로드 시작');
                            const response = await fetch(`/api/matches/${matchId}/team-logos`);
                            if (response.ok) {
                                const result = await response.json();
                                console.log('🔧 팀로고 정보 응답:', result);
                                
                                // 홈팀 로고 업데이트
                                if (result.teamLogos && result.teamLogos.length > 0) {
                                    const homeTeamInfo = result.teamLogos.find(team => team.team_type === 'home');
                                    const awayTeamInfo = result.teamLogos.find(team => team.team_type === 'away');
                                    
                                    console.log('🔧 홈팀 정보:', homeTeamInfo);
                                    console.log('🔧 어웨이팀 정보:', awayTeamInfo);
                                    
                                    if (homeTeamInfo) {
                                        const homeLogoContainers = document.querySelectorAll('.team-info.home-team .team-logo-container');
                                        console.log('🔧 홈팀 로고 컨테이너 개수:', homeLogoContainers.length);
                                        homeLogoContainers.forEach(container => {
                                            if (homeTeamInfo.logo_path) {
                                                container.innerHTML = `
                                                    <img src="${homeTeamInfo.logo_path}" alt="홈팀 로고" class="team-logo">
                                                `;
                                                container.style.backgroundColor = homeTeamInfo.logo_bg_color || '#ffffff';
                                                console.log('🔧 홈팀 로고 업데이트 완료:', homeTeamInfo.logo_path);
                    } else {
                                                container.innerHTML = `<div class="team-logo-placeholder"></div>`;
                                                console.log('🔧 홈팀 로고 없음 - 플레이스홀더 표시');
                                            }
                                        });
                                        
                                        // 홈팀 섹션 컬러 업데이트
                                        if (homeTeamInfo.team_color) {
                                            const homeTeamSection = document.getElementById('home-team-section');
                                            if (homeTeamSection) {
                                                homeTeamSection.style.backgroundColor = homeTeamInfo.team_color;
                                                console.log('🔧 홈팀 섹션 컬러 업데이트:', homeTeamInfo.team_color);
                                            }
                                        }
                                    }
                                    
                                    if (awayTeamInfo) {
                                        const awayLogoContainers = document.querySelectorAll('.team-info.away-team .team-logo-container');
                                        console.log('🔧 어웨이팀 로고 컨테이너 개수:', awayLogoContainers.length);
                                        awayLogoContainers.forEach(container => {
                                            if (awayTeamInfo.logo_path) {
                                                container.innerHTML = `
                                                    <img src="${awayTeamInfo.logo_path}" alt="원정팀 로고" class="team-logo">
                                                `;
                                                container.style.backgroundColor = awayTeamInfo.logo_bg_color || '#ffffff';
                                                console.log('🔧 어웨이팀 로고 업데이트 완료:', awayTeamInfo.logo_path);
                    } else {
                                                container.innerHTML = `<div class="team-logo-placeholder"></div>`;
                                                console.log('🔧 어웨이팀 로고 없음 - 플레이스홀더 표시');
                                            }
                                        });
                                        
                                        // 어웨이팀 섹션 컬러 업데이트
                                        if (awayTeamInfo.team_color) {
                                            const awayTeamSection = document.getElementById('away-team-section');
                                            if (awayTeamSection) {
                                                awayTeamSection.style.backgroundColor = awayTeamInfo.team_color;
                                                console.log('🔧 어웨이팀 섹션 컬러 업데이트:', awayTeamInfo.team_color);
                                            }
                                        }
                                    }
                                }
                                
                                
                                console.log('🔧 팀로고 정보 재로드 완료');
                } else {
                                console.error('🔧 팀로고 정보 로드 실패:', response.status);
                            }
                        }
                        
                        console.log('🔧 데이터 재로드 완료');
            } catch (error) {
                        console.error('🔧 데이터 재로드 오류:', error);
                    }
                }, 500);
                    } else {
                console.log('🔧 다른 경기의 dataChanged 이벤트로 무시');
            }
        });

        // 팀로고 업데이트 이벤트 처리 (통합된 방식)
        socket.on('teamLogoUpdated', function(data) {
            if (data.matchId !== matchId) return;
            
            console.log('팀로고 업데이트 수신:', data);
            
            const teamType = data.teamType;
            const logoPath = data.logoPath;
            const logoBgColor = data.logoBgColor || '#ffffff';
            
            // 해당 팀의 로고 컨테이너 찾기
            const logoContainer = document.querySelector(`.team-info.${teamType}-team .team-logo-container`);
            if (logoContainer) {
                // 배경색 업데이트
                logoContainer.style.backgroundColor = logoBgColor;
                
                // 로고 이미지 업데이트
                if (logoPath) {
                    logoContainer.innerHTML = `
                        <img src="${logoPath}" alt="${teamType === 'home' ? '홈' : '원정'}팀 로고" 
                             style="width: 100%; height: 100%; object-fit: contain;">
                    `;
                } else {
                    logoContainer.innerHTML = `<div class="team-logo-placeholder"></div>`;
                }
                
                console.log(`${teamType}팀 로고 업데이트 완료: ${logoPath}, 배경색: ${logoBgColor}`);
                } else {
                console.error(`${teamType}팀 로고 컨테이너를 찾을 수 없음`);
            }
        });

        // 리스트 기능 관련 변수
        let currentMatchIndex = 0;
        let totalMatches = 0;
        let listId = null;
        
        <% if (typeof listId !== 'undefined' && listId) { %>
        currentMatchIndex = <%- currentMatchIndex || 0 %>;
        totalMatches = <%- totalMatches || 0 %>;
        listId = '<%- listId %>';
        
        // 리스트 정보 표시
        function showListInfo() {
            const listInfo = document.getElementById('listInfo');
            const listName = document.getElementById('listName');
            const matchCounter = document.getElementById('matchCounter');
            
            if (listInfo && listName && matchCounter) {
                listName.textContent = '리스트: <%= typeof listName !== "undefined" ? listName : "경기 리스트" %>';
                matchCounter.textContent = `경기 ${currentMatchIndex + 1} / ${totalMatches}`;
                listInfo.classList.add('show');
                
                // 3초 후 자동 숨김
            setTimeout(() => {
                    listInfo.classList.remove('show');
                }, 3000);
            }
        }
        
        // 다음 경기로 이동
        async function nextMatch() {
            if (currentMatchIndex < totalMatches - 1) {
                currentMatchIndex++;
                await loadCurrentMatch();
            }
        }
        
        // 이전 경기로 이동
        async function prevMatch() {
            if (currentMatchIndex > 0) {
                currentMatchIndex--;
                await loadCurrentMatch();
            }
        }
        
        // 현재 경기 로드
        async function loadCurrentMatch() {
            try {
                const response = await fetch(`/api/list/${listId}/current-match?index=${currentMatchIndex}`);
                if (!response.ok) throw new Error('경기 정보 로드 실패');
                
                    const data = await response.json();
                
                // 페이지 새로고침으로 경기 변경
                window.location.href = `/list/${listId}/overlay?index=${currentMatchIndex}`;
            } catch (error) {
                console.error('경기 로드 오류:', error);
            }
        }
        
        // 키보드 이벤트 리스너 추가
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'ArrowLeft':
                    prevMatch();
                    break;
                case 'ArrowRight':
                    nextMatch();
                    break;
                case 'i':
                case 'I':
                    showListInfo();
                    break;
            }
        });
        
        
        // 페이지 로드 시 리스트 정보 표시
        window.addEventListener('load', function() {
            setTimeout(showListInfo, 1000);
            
            // 초기 경기방식에 따른 세트 표시 설정
            const initialFormat = <%= match.match_data?.match_format || 3 %>;
            console.log('🏐 오버레이 초기 경기방식:', initialFormat + '세트제');
            
            // DOM이 완전히 로드된 후 실행
            setTimeout(() => {
                updateOverlaySetDisplay(initialFormat);
            }, 100);
        });
        
        // DOMContentLoaded 이벤트로도 실행
        document.addEventListener('DOMContentLoaded', function() {
            const initialFormat = <%= match.match_data?.match_format || 3 %>;
            console.log('🏐 DOMContentLoaded - 초기 경기방식:', initialFormat + '세트제');
            
            // DOM이 완전히 로드된 후 실행
            setTimeout(() => {
                updateOverlaySetDisplay(initialFormat);
            }, 200);
        });
        
        // 즉시 실행도 추가
        (function() {
            const initialFormat = <%= match.match_data?.match_format || 3 %>;
            console.log('🏐 즉시 실행 - 초기 경기방식:', initialFormat + '세트제');
            console.log('🏐 match.match_data:', <%= JSON.stringify(match.match_data) %>);
            console.log('🏐 match_format 값:', <%= match.match_data?.match_format %>);
            
            // 즉시 실행
            updateOverlaySetDisplay(initialFormat);
            
            // 지연 실행도 추가
            setTimeout(() => {
                updateOverlaySetDisplay(initialFormat);
            }, 100);
            
            setTimeout(() => {
                updateOverlaySetDisplay(initialFormat);
            }, 500);
        })();
        <% } %>
        
        // 오버레이 세트 표시 업데이트 함수 (전역 스코프)
        function updateOverlaySetDisplay(matchFormat) {
            console.log('🏐 오버레이 세트 표시 업데이트:', matchFormat + '세트제');
            
            // 세트 스코어보드의 각 세트 표시/숨김
            for (let i = 1; i <= 5; i++) {
                // data-set 속성으로 찾기
                const setElements = document.querySelectorAll(`[data-set="${i}"]`);
                console.log(`🏐 ${i}세트 요소 개수 (data-set):`, setElements.length);
                
                // ID로도 찾기
                const homeSetElement = document.getElementById(`home-set-${i}`);
                const awaySetElement = document.getElementById(`away-set-${i}`);
                
                const allElements = [...setElements];
                if (homeSetElement) allElements.push(homeSetElement);
                if (awaySetElement) allElements.push(awaySetElement);
                
                console.log(`🏐 ${i}세트 총 요소 개수:`, allElements.length);
                
                allElements.forEach((element, index) => {
                    if (i <= matchFormat) {
                        element.style.display = 'table-cell';
                        element.style.visibility = 'visible';
                        element.style.opacity = '1';
                        element.removeAttribute('hidden');
                        console.log(`🏐 오버레이 ${i}세트 표시 (${index + 1}번째)`);
                    } else {
                        element.style.display = 'none';
                        element.style.visibility = 'hidden';
                        element.style.opacity = '0';
                        element.setAttribute('hidden', 'true');
                        console.log(`🏐 오버레이 ${i}세트 숨김 (${index + 1}번째)`);
                    }
                });
            }
            
            // 테이블 헤더의 세트 열도 함께 처리
            for (let i = 1; i <= 5; i++) {
                const headerCells = document.querySelectorAll(`th:nth-child(${i + 1})`);
                console.log(`🏐 ${i}세트 헤더 개수:`, headerCells.length);
                
                headerCells.forEach((cell, index) => {
                    if (i <= matchFormat) {
                        cell.style.display = 'table-cell';
                        cell.style.visibility = 'visible';
                        cell.style.opacity = '1';
                        cell.removeAttribute('hidden');
                        console.log(`🏐 오버레이 ${i}세트 헤더 표시 (${index + 1}번째)`);
                    } else {
                        cell.style.display = 'none';
                        cell.style.visibility = 'hidden';
                        cell.style.opacity = '0';
                        cell.setAttribute('hidden', 'true');
                        console.log(`🏐 오버레이 ${i}세트 헤더 숨김 (${index + 1}번째)`);
                    }
                });
            }
            
            // CSS 클래스로도 처리
            const setScoreboard = document.querySelector('.set-scoreboard');
            if (setScoreboard) {
                // 기존 클래스 제거
                setScoreboard.classList.remove('format-3', 'format-5');
                // 새 클래스 추가
                setScoreboard.classList.add(`format-${matchFormat}`);
                console.log(`🏐 세트 스코어보드 클래스 변경: format-${matchFormat}`);
            }
            
            console.log('🏐 오버레이 세트 표시 업데이트 완료');
        }
        
        // 야구는 타이머가 필요없으므로 하이브리드 타이머 시스템을 사용하지 않습니다.
        
    </script>
</body>
</html> 
</html> 