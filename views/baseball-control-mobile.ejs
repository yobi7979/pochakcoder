<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>야구 경기 컨트롤 패널 (모바일)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 10px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .control-panel {
            max-width: 400px;
            margin: 0 auto;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .score-section {
            margin: 15px 0;
        }
        .score-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .score-input {
            width: 70px;
            height: 35px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #ddd;
            padding: 5px;
        }
        .score-controls {
            display: flex;
            gap: 5px;
        }
        .score-btn {
            width: 35px;
            height: 35px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            font-size: 18px;
        }
        .game-status-section {
            margin: 20px 0 10px 0;
        }
        .status-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .status-btn {
            min-width: 60px;
            border-radius: 8px;
            font-weight: 500;
            padding: 8px 12px;
            font-size: 0.9rem;
        }
        .count-display {
            font-size: 1.5rem;
            font-weight: bold;
            text-align: center;
            margin: 10px 0;
            font-family: monospace;
            color: #007bff;
        }
        .inning-display {
            font-size: 1.2rem;
            font-weight: bold;
            text-align: center;
            margin: 10px 0;
            color: #28a745;
        }
        
        .team-name-edit-section {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
        }
        
        .team-name-edit-section input {
            flex: 1;
            font-size: 0.8rem;
        }
        
        .team-name-edit-section .btn {
            padding: 4px 8px;
            font-size: 0.8rem;
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mb-2">
            <div id="list-info-box" class="col-12 text-center" style="background-color: #e9ecef; padding: 8px; border-radius: 8px; margin-bottom: 10px;">
                <div style="font-weight: 600; font-size: 0.9rem; color: #495057;">
                    <%= listName %> (경기 <%= currentMatchIndex + 1 %> / <%= totalMatches %>)
                </div>
            </div>
        </div>
        <% } %>
        
        <!-- 팀명 표시 및 수정 -->
        <div class="row mb-2">
            <div class="col-6 text-center">
                <div style="font-weight:700; font-size:1.1rem; margin-bottom: 5px;" id="home-team-display">
                    <%= match.home_team || 'HOME' %>
                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="openTeamNameModal('home')">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
            <div class="col-6 text-center">
                <div style="font-weight:700; font-size:1.1rem; margin-bottom: 5px;" id="away-team-display">
                    <%= match.away_team || 'AWAY' %>
                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="openTeamNameModal('away')">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
        </div>
        <!-- 팀 위치 변경 버튼 -->
        <div class="row mb-2">
            <div class="col-12 text-center">
                <button class="btn btn-warning btn-sm" onclick="swapTeams()">
                    <i class="bi bi-arrow-left-right"></i> 위치변경
                </button>
            </div>
        </div>
        
        <!-- 스코어 영역 -->
        <div class="row mb-3">
            <div class="col-6">
                <div class="score-section">
                    <div class="score-input-group">
                        <input type="number" id="home-score" class="score-input" value="<%= match.home_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('home', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="score-section">
                    <div class="score-input-group">
                        <input type="number" id="away-score" class="score-input" value="<%= match.away_score || 0 %>" min="0">
                        <div class="score-controls">
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', -1)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary score-btn" onclick="updateScore('away', 1)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 이닝 표시 -->
        <div class="inning-display">
            <div class="row">
                <div class="col-12 text-center">
                    <span id="inning-display">
                        <%= match.match_data?.current_inning || 1 %>회 
                        <span id="inning-type"><%= match.match_data?.inning_type === 'bottom' ? '말' : '초' %></span>
                    </span>
                </div>
            </div>
        </div>
        
        <!-- 볼/스트라이크/아웃 카운트 -->
        <div class="count-display">
            <div class="row">
                <div class="col-4 text-center">
                    <div>B: <span id="balls-count"><%= match.match_data?.balls || 0 %></span></div>
                </div>
                <div class="col-4 text-center">
                    <div>S: <span id="strikes-count"><%= match.match_data?.strikes || 0 %></span></div>
                </div>
                <div class="col-4 text-center">
                    <div>O: <span id="outs-count"><%= match.match_data?.outs || 0 %></span></div>
                </div>
            </div>
        </div>
        
        <!-- 볼 카운트 컨트롤 -->
        <div class="game-status-section">
            <div class="row mb-2">
                <div class="col-4 text-center">
                    <button class="btn btn-outline-warning status-btn" onclick="updateCount('balls', -1)">B-</button>
                    <button class="btn btn-outline-warning status-btn" onclick="updateCount('balls', 1)">B+</button>
                </div>
                <div class="col-4 text-center">
                    <button class="btn btn-outline-danger status-btn" onclick="updateCount('strikes', -1)">S-</button>
                    <button class="btn btn-outline-danger status-btn" onclick="updateCount('strikes', 1)">S+</button>
                </div>
                <div class="col-4 text-center">
                    <button class="btn btn-outline-secondary status-btn" onclick="updateCount('outs', -1)">O-</button>
                    <button class="btn btn-outline-secondary status-btn" onclick="updateCount('outs', 1)">O+</button>
                </div>
            </div>
        </div>
        
        <!-- 이닝 컨트롤 -->
        <div class="game-status-section">
            <div class="row mb-2">
                <div class="col-6 text-center">
                    <button class="btn btn-outline-success status-btn" onclick="updateInning(-1)">이닝-</button>
                    <button class="btn btn-outline-success status-btn" onclick="updateInning(1)">이닝+</button>
                </div>
                <div class="col-6 text-center">
                    <button class="btn btn-outline-info status-btn" onclick="toggleInningType()">초/말</button>
                </div>
            </div>
        </div>
        
        <!-- 베이스 상태 -->
        <div class="game-status-section">
            <div class="row mb-2">
                <div class="col-4 text-center">
                    <button class="btn btn-outline-primary status-btn" onclick="toggleBase('first')">1루</button>
                </div>
                <div class="col-4 text-center">
                    <button class="btn btn-outline-primary status-btn" onclick="toggleBase('second')">2루</button>
                </div>
                <div class="col-4 text-center">
                    <button class="btn btn-outline-primary status-btn" onclick="toggleBase('third')">3루</button>
                </div>
            </div>
        </div>
        
        <!-- 리셋 버튼 -->
        <div class="game-status-section">
            <div class="row">
                <div class="col-12 text-center">
                    <button class="btn btn-outline-secondary status-btn" onclick="resetCounts()">카운트 리셋</button>
                    <button class="btn btn-outline-secondary status-btn" onclick="clearBases()">베이스 클리어</button>
                </div>
            </div>
        </div>
        
        <!-- 리스트 네비게이션 버튼 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mt-3">
            <div class="col-12">
                <div class="d-flex justify-content-between gap-2 mb-2">
                    <button class="btn btn-outline-secondary" onclick="prevMatch()" style="flex: 1;">
                        <i class="bi bi-chevron-left"></i> 이전경기
                    </button>
                    <button class="btn btn-outline-secondary" onclick="nextMatch()" style="flex: 1;">
                        다음경기 <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-center gap-2">
                    <button class="btn btn-success" onclick="pushToIntegratedOverlay()" style="flex: 1;">
                        <i class="bi bi-display"></i> 통합 URL에 푸시
                    </button>
                    <button class="btn btn-warning" onclick="forceRefreshOverlay()" style="flex: 1;">
                        <i class="bi bi-arrow-clockwise"></i> 강제 새로고침
                    </button>
                </div>
            </div>
        </div>
        <% } %>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // 점수 변경 이벤트
        function updateScore(team, change) {
            const scoreInput = document.getElementById(`${team}-score`);
            const currentScore = parseInt(scoreInput.value) || 0;
            const newScore = Math.max(0, currentScore + change);
            scoreInput.value = newScore;
            updateMatchInfo();
        }
        
        // 카운트 변경 이벤트
        function updateCount(type, change) {
            const countElement = document.getElementById(`${type}-count`);
            const currentCount = parseInt(countElement.textContent) || 0;
            const newCount = Math.max(0, Math.min(currentCount + change, type === 'balls' ? 3 : type === 'strikes' ? 2 : 2));
            countElement.textContent = newCount;
            updateMatchInfo();
        }
        
        // 이닝 변경 이벤트
        function updateInning(change) {
            const inningDisplay = document.getElementById('inning-display');
            const currentInning = parseInt(inningDisplay.textContent) || 1;
            const newInning = Math.max(1, currentInning + change);
            inningDisplay.textContent = newInning + '회 ' + document.getElementById('inning-type').textContent;
            updateMatchInfo();
        }
        
        // 이닝 타입 토글
        function toggleInningType() {
            const inningType = document.getElementById('inning-type');
            const currentType = inningType.textContent;
            inningType.textContent = currentType === '초' ? '말' : '초';
            updateMatchInfo();
        }
        
        // 베이스 토글
        function toggleBase(base) {
            // 베이스 상태는 서버에서 관리되므로 여기서는 시각적 피드백만 제공
            const button = event.target;
            button.classList.toggle('btn-primary');
            button.classList.toggle('btn-outline-primary');
            updateMatchInfo();
        }
        
        // 카운트 리셋
        function resetCounts() {
            document.getElementById('balls-count').textContent = '0';
            document.getElementById('strikes-count').textContent = '0';
            updateMatchInfo();
        }
        
        // 베이스 클리어
        function clearBases() {
            document.querySelectorAll('[onclick*="toggleBase"]').forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-primary');
            });
            updateMatchInfo();
        }
        
        // 서버와 소켓 연결
        socket.on('connect', () => {
            socket.emit('join', matchId);
        });
        
        // 점수/카운트/이닝 변경 시 서버에 업데이트
        async function updateMatchInfo() {
            const formData = {
                home_score: parseInt(document.getElementById('home-score').value) || 0,
                away_score: parseInt(document.getElementById('away-score').value) || 0,
                match_data: {
                    balls: parseInt(document.getElementById('balls-count').textContent) || 0,
                    strikes: parseInt(document.getElementById('strikes-count').textContent) || 0,
                    outs: parseInt(document.getElementById('outs-count').textContent) || 0,
                    current_inning: parseInt(document.getElementById('inning-display').textContent) || 1,
                    inning_type: document.getElementById('inning-type').textContent === '말' ? 'bottom' : 'top'
                }
            };
            try {
                await fetch(`/api/match/${matchId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                // 실시간 업데이트를 위한 WebSocket 이벤트 발생
                socket.emit('match_updated', {
                    matchId: matchId,
                    home_score: formData.home_score,
                    away_score: formData.away_score,
                    match_data: formData.match_data
                });
                
                console.log('야구 경기 데이터 업데이트 완료:', formData);
            } catch (error) {
                console.error('업데이트 중 오류:', error);
            }
        }
        
        // 리스트 기능 관련 변수
        let currentMatchIndex = 0;
        let totalMatches = 0;
        let listId = null;
        let listName = null;
        
        // 현재 경기가 푸시되어 있는지 확인하고 리스트 박스 색상 업데이트
        async function checkPushedMatchStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/pushed-match/${listId}`);
                const result = await response.json();
                
                const listInfoBox = document.getElementById('list-info-box');
                if (listInfoBox) {
                    if (result.success && result.data && result.data.matchId === matchId) {
                        // 현재 경기가 푸시되어 있음 - 빨간색
                        listInfoBox.style.backgroundColor = '#dc3545';
                        listInfoBox.querySelector('div').style.color = '#ffffff';
                    } else {
                        // 현재 경기가 푸시되어 있지 않음 - 회색
                        listInfoBox.style.backgroundColor = '#e9ecef';
                        listInfoBox.querySelector('div').style.color = '#495057';
                    }
                }
            } catch (error) {
                console.error('푸시된 경기 상태 확인 실패:', error);
            }
        }
        
        <% if (typeof listId !== 'undefined' && listId) { %>
        // EJS 템플릿 변수 할당
        currentMatchIndex = <%- currentMatchIndex || 0 %>;
        totalMatches = <%- totalMatches || 0 %>;
        listId = '<%- listId %>';
        listName = '<%- listName %>';
        
        // 페이지 로드 시 푸시된 경기 상태 확인
        document.addEventListener('DOMContentLoaded', function() {
            checkPushedMatchStatus();
        });
        
        // 다음 경기로 이동
        async function nextMatch() {
            if (currentMatchIndex < totalMatches - 1) {
                currentMatchIndex++;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 이전 경기로 이동
        async function prevMatch() {
            if (currentMatchIndex > 0) {
                currentMatchIndex--;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 경기 리스트 페이지로 이동
        function goToList() {
            window.location.href = '/match-list-manager';
        }
        
        // URL 상태 확인
        async function checkOverlayStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/overlay-status/${listId}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.isActive) {
                        console.log('오버레이 URL 활성 상태:', result);
                        return result;
                    } else {
                        console.log('오버레이 URL 비활성 상태:', result.message);
                        return null;
                    }
                }
            } catch (error) {
                console.error('URL 상태 확인 실패:', error);
                return null;
            }
        }

        // 강제 새로고침
        async function forceRefreshOverlay() {
            if (!listId) {
                alert('리스트 정보가 없습니다.');
                return;
            }
            
            try {
                const response = await fetch(`/api/overlay-refresh/${listId}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('오버레이 URL이 강제 새로고침되었습니다.');
                    console.log('강제 새로고침 완료:', result.message);
                } else {
                    alert('강제 새로고침 실패: ' + result.message);
                }
            } catch (error) {
                console.error('강제 새로고침 실패:', error);
                alert('강제 새로고침 중 오류가 발생했습니다.');
            }
        }

        // 통합 URL에 현재 경기 푸시 (강제 새로고침 옵션 포함)
        async function pushToIntegratedOverlay(forceRefresh = false) {
            console.log('=== 통합 URL 푸시 시작 ===');
            console.log('현재 matchId:', matchId);
            console.log('현재 listId:', listId);
            console.log('현재 matchIndex:', currentMatchIndex);
            console.log('강제 새로고침:', forceRefresh);
            
            // listId가 없으면 경고
            if (!listId) {
                alert('리스트 정보가 없습니다. 리스트 모드에서만 사용 가능합니다.');
                return;
            }
            
            // URL 상태 확인
            const status = await checkOverlayStatus();
            if (status && !forceRefresh) {
                const confirmRefresh = confirm(
                    `현재 오버레이 URL이 활성 상태입니다.\n` +
                    `경기: ${status.match.home_team} vs ${status.match.away_team}\n` +
                    `강제 새로고침하시겠습니까?`
                );
                
                if (!confirmRefresh) {
                    return;
                }
                forceRefresh = true;
            }
            
            // WebSocket을 통해 리스트 오버레이에 경기 변경 알림
            const pushData = {
                listId: listId,
                matchIndex: currentMatchIndex,
                matchId: matchId,  // 현재 선택된 경기의 ID 추가
                forceRefresh: forceRefresh
            };
            
            console.log('전송할 데이터:', pushData);
            socket.emit('push_to_list_overlay', pushData);
            
            console.log('통합 오버레이에 경기 푸시 완료');
        }

        // 서버 응답 처리
        socket.on('push_to_list_overlay_response', (response) => {
            console.log('푸시 응답 수신:', response);
            if (response.success) {
                alert('통합 URL에 경기가 성공적으로 푸시되었습니다!');
                // 푸시 성공 후 색상 업데이트
                checkPushedMatchStatus();
            } else {
                alert('푸시 실패: ' + (response.error || '알 수 없는 오류'));
            }
        });

        // 팀명 수정 모달 열기
        function openTeamNameModal(team) {
            // 현재 화면에 표시된 팀명을 가져오기
            const teamDisplay = document.getElementById(`${team}-team-display`);
            const currentName = teamDisplay ? teamDisplay.textContent.trim() : '';
            
            document.getElementById('modal-team-name').value = currentName;
            document.getElementById('teamNameModal').setAttribute('data-team', team);
            new bootstrap.Modal(document.getElementById('teamNameModal')).show();
        }

        // 팀명 변경 확인
        async function confirmTeamNameChange() {
            const team = document.getElementById('teamNameModal').getAttribute('data-team');
            const newTeamName = document.getElementById('modal-team-name').value.trim();
            
            if (newTeamName) {
                await updateTeamName(team, newTeamName);
                bootstrap.Modal.getInstance(document.getElementById('teamNameModal')).hide();
            } else {
                alert('팀명을 입력해주세요.');
            }
        }

        // 팀 위치 변경 함수
        async function swapTeams() {
            if (!confirm('홈팀과 어웨이팀의 정보를 서로 바꾸시겠습니까?')) {
                return;
            }
            
            try {
                // 현재 팀 정보 가져오기
                const homeTeamName = document.getElementById('home-team-display').textContent;
                const awayTeamName = document.getElementById('away-team-display').textContent;
                const homeScore = document.getElementById('home-score').value;
                const awayScore = document.getElementById('away-score').value;
                
                // 서버에 위치 변경 요청
                const response = await fetch(`/api/match/${matchId}/swap-teams`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    throw new Error('팀 위치 변경 실패');
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀 위치 변경 실패');
                }
                
                // 성공 메시지
                alert('팀 위치가 성공적으로 변경되었습니다.');
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('swapTeams', { matchId: matchId });
                
            } catch (error) {
                console.error('팀 위치 변경 중 오류 발생:', error);
                alert('팀 위치 변경 중 오류가 발생했습니다.');
            }
        }

        // 팀명 업데이트 함수
        async function updateTeamName(team, newTeamName) {
            try {
                const response = await fetch(`/api/match/${matchId}/team-name`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamName: newTeamName
                    })
                });

                if (!response.ok) {
                    throw new Error('팀명 업데이트 실패');
                }

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀명 업데이트 실패');
                }

                // 성공 메시지 표시
                alert(`${team === 'home' ? '홈팀' : '원정팀'}명이 '${newTeamName}'으로 변경되었습니다.`);
                
                // 팀명 표시 업데이트
                const teamNameDisplay = document.getElementById(`${team}-team-display`);
                if (teamNameDisplay) {
                    teamNameDisplay.textContent = newTeamName;
                }
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('updateTeamName', {
                    matchId: matchId,
                    team: team,
                    teamName: newTeamName
                });

            } catch (error) {
                console.error('팀명 업데이트 중 오류 발생:', error);
                alert('팀명 업데이트 중 오류가 발생했습니다.');
            }
        }

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    console.log('종목 변경됨:', currentSportType);
                }
                
                // 경기 정보 업데이트
                updateMatchDisplay(data);
            }
        });

        // 팀 위치 변경 이벤트
        socket.on('teamsSwapped', (data) => {
            if (data.matchId === matchId) {
                console.log('팀 위치 변경 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 점수 업데이트
                const homeScoreInput = document.getElementById('home-score');
                const awayScoreInput = document.getElementById('away-score');
                
                if (homeScoreInput) {
                    homeScoreInput.value = data.home_score;
                }
                if (awayScoreInput) {
                    awayScoreInput.value = data.away_score;
                }
                
                console.log('팀 위치 변경 완료');
            }
        });
        }
    </script>
    
    <!-- 팀명 수정 모달 -->
    <div class="modal fade" id="teamNameModal" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">팀명 수정</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">팀명</label>
                        <input type="text" id="modal-team-name" class="form-control" placeholder="팀명 입력">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" onclick="confirmTeamNameChange()">확인</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html> 