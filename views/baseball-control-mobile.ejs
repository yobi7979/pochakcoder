<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>야구 경기 컨트롤 패널 (모바일)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 5px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        

        .control-panel {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 10px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        /* 태블릿 가로모드 레이아웃 */
        .game-controls-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        
        .left-panel {
            flex: 1;
            max-width: 400px;
        }
        
        .right-panel {
            flex: 1;
            max-width: 400px;
        }
        .score-section {
            margin: 15px 0;
        }
        .score-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .score-input {
            width: 70px;
            height: 35px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #ddd;
            padding: 5px;
        }
        .score-controls {
            display: flex;
            gap: 5px;
        }
        .score-btn {
            width: 35px;
            height: 35px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            font-size: 18px;
        }
        .game-status-section {
            margin: 20px 0 10px 0;
        }
        .status-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .status-btn {
            min-width: 60px;
            border-radius: 8px;
            font-weight: 500;
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .inning-display {
            font-size: 1.2rem;
            font-weight: bold;
            text-align: center;
            margin: 10px 0;
            color: #28a745;
        }
        
        .team-name-edit-section {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
        }
        
        .team-name-edit-section input {
            flex: 1;
            font-size: 0.8rem;
        }
        
        .team-name-edit-section .btn {
            padding: 4px 8px;
            font-size: 0.8rem;
        }
        
        /* 베이스 컨트롤 영역 */
        .base-controls {
            width: 120px;
            height: 120px;
            position: relative;
            margin: 0 auto;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transform: rotate(-45deg);
        }
        
        .diamond {
            width: 80px;
            height: 80px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
        }
        
        .base {
            width: 40px;
            height: 40px;
            position: absolute;
            background-color: #666;
            cursor: pointer;
            transition: background-color 0.3s ease;
            border-radius: 4px;
        }
        
        .base.active {
            background-color: #f59e0b !important;
        }
        
        .base.first {
            right: 0;
            bottom: 50%;
            transform: translate(50%, 50%) rotate(45deg);
        }
        
        .base.second {
            top: 0;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
        }
        
        .base.third {
            left: 0;
            bottom: 50%;
            transform: translate(-50%, 50%) rotate(45deg);
        }
        
        .base.home {
            bottom: 0;
            left: 50%;
            transform: translate(-50%, 50%) rotate(45deg);
            background-color: #fff;
            border: 2px solid #666;
        }
        
        .count-section {
            display: flex;
            flex-direction: column;
            gap: 15px;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .count-row {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .count-label {
            font-size: 18px;
            font-weight: bold;
            width: 30px;
            text-align: center;
        }
        
        .count-dots {
            display: flex;
            gap: 12px;
        }
        
        .count-dot {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #666;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .count-dot.ball.active {
            background-color: #22c55e;
        }
        
        .count-dot.strike.active {
            background-color: #eab308;
        }
        
        .count-dot.out.active {
            background-color: #ef4444;
        }
        
        .count-controls {
            display: flex;
            gap: 5px;
        }
        
        .count-btn {
            width: 30px;
            height: 30px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            font-size: 16px;
        }
        
        .reset-button {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 8px;
            background-color: #f0f0f0;
            color: #333;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }
        
        .reset-button:hover {
            background-color: #e0e0e0;
        }
        
        /* 태블릿 가로모드 최적화 */
        @media (min-width: 768px) {
            .game-controls-container {
                flex-direction: row;
            }
            
            .left-panel, .right-panel {
                flex: 1;
            }
        }
        

    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 리스트 정보 표시 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mb-1">
            <div id="list-info-box" class="col-12 text-center" style="background-color: #e9ecef; padding: 5px; border-radius: 8px; margin-bottom: 5px;">
                <div style="font-weight: 600; font-size: 0.9rem; color: #495057;">
                    <%= listName %> (경기 <%= currentMatchIndex + 1 %> / <%= totalMatches %>)
                </div>
            </div>
        </div>
        <% } %>
        
        
        <!-- 팀로고 사용 체크박스 -->
        <div class="row mb-2">
            <div class="col-12 text-center">
                <div class="form-check d-inline-block">
                    <input type="checkbox" class="form-check-input" id="use-team-logos" <%= match.match_data && match.match_data.use_team_logos ? 'checked' : '' %> style="transform: scale(0.8);">
                    <label class="form-check-label" for="use-team-logos" style="font-size: 0.85em;">
                        팀로고 사용
                    </label>
                </div>
            </div>
        </div>
        
        
        <!-- 팀명 표시 및 수정 -->
        <div class="row mb-1" style="align-items: center;">
            <!-- 홈팀 섹션 -->
            <div class="col-4 text-center">
                <div class="team-logo-container mb-1" id="home-team-logo-container" style="width: 63px; height: 63px; margin: 0 auto; background-color: #f8f9fa; border-radius: 8px; display: flex; align-items: center; justify-content: center; border: 2px solid #dee2e6;">
                    <span style="font-size: 0.9rem; color: #6c757d;">로고</span>
                </div>
                <div style="font-weight:700; font-size:1.4rem; margin-bottom: 5px;" id="home-team-display">
                    <%= match.home_team || 'HOME' %>
                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="openTeamNameModal('home')" style="font-size: 1rem; padding: 6px 12px;">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
            
            <!-- 이닝 섹션 (중앙) -->
            <div class="col-4 text-center">
                <div class="inning-display" style="background-color: #f8f9fa; border-radius: 12px; padding: 10px; border: 2px solid #dee2e6;">
                    <!-- 이닝 컨트롤 -->
                    <div class="d-flex justify-content-center align-items-center gap-2 mb-3">
                        <button class="btn btn-outline-success" onclick="updateInning(-1)" style="width: 40px; height: 40px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 8px; font-size: 16px;">
                            <i class="bi bi-dash"></i>
                        </button>
                        <div class="inning-number" style="font-size: 1.5rem; font-weight: bold; color: #333; min-width: 80px;">
                            <span id="current-inning"><%= match.match_data?.current_inning || 1 %></span>회<span id="inning-type"><%= match.match_data?.inning_type === 'bottom' ? '말' : '초' %></span>
                        </div>
                        <button class="btn btn-outline-success" onclick="updateInning(1)" style="width: 40px; height: 40px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 8px; font-size: 16px;">
                            <i class="bi bi-plus"></i>
                        </button>
                    </div>
                    
                    <!-- 점수 컨트롤 -->
                    <div class="score-controls-section mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div style="font-size: 1rem; color: #6c757d; font-weight: 600;">점수</div>
                            <button class="btn btn-outline-warning btn-sm" onclick="resetAllScores()" title="모든 점수 초기화">
                                <i class="bi bi-arrow-clockwise"></i> 초기화
                            </button>
                        </div>
                        <div class="row g-1">
                            <div class="col-6">
                                <div class="text-center mb-2" style="font-size: 1rem; color: #6c757d; font-weight: 600;">홈</div>
                                <div class="d-flex justify-content-center align-items-center gap-2">
                                    <button class="btn btn-outline-danger" onclick="updateScore('home', -1)" style="width: 36px; height: 36px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 6px; font-size: 16px;">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="updateScore('home', 1)" style="width: 36px; height: 36px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 6px; font-size: 16px;">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                    <input type="number" id="home-score" class="score-input" value="<%= match.home_score || 0 %>" min="0" style="width: 60px; height: 36px; text-align: center; font-size: 18px; font-weight: bold; border-radius: 6px; border: 2px solid #007bff; padding: 4px;">
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="text-center mb-2" style="font-size: 1rem; color: #6c757d; font-weight: 600;">원정</div>
                                <div class="d-flex justify-content-center align-items-center gap-2">
                                    <input type="number" id="away-score" class="score-input" value="<%= match.away_score || 0 %>" min="0" style="width: 60px; height: 36px; text-align: center; font-size: 18px; font-weight: bold; border-radius: 6px; border: 2px solid #007bff; padding: 4px;">
                                    <button class="btn btn-outline-danger" onclick="updateScore('away', -1)" style="width: 36px; height: 36px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 6px; font-size: 16px;">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="updateScore('away', 1)" style="width: 36px; height: 36px; padding: 0; display: flex; align-items: center; justify-content: center; border-radius: 6px; font-size: 16px;">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 이닝별 점수 입력 필드 (숨김 처리) -->
                        <div style="display: none;">
                            <% for(let i = 1; i <= 9; i++) { %>
                                <input type="number" id="home-inning-<%= i %>" value="<%= match.match_data?.innings?.[`home_${i}`] || '0' %>" min="0">
                                <input type="number" id="away-inning-<%= i %>" value="<%= match.match_data?.innings?.[`away_${i}`] || '0' %>" min="0">
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- 팀 위치 변경 버튼 -->
                    <div class="text-center">
                        <button class="btn btn-warning btn-sm" onclick="swapTeams()" style="width: 100%; padding: 8px; font-size: 0.9rem;">
                            <i class="bi bi-arrow-left-right"></i> 위치변경
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- 원정팀 섹션 -->
            <div class="col-4 text-center">
                <div class="team-logo-container mb-1" id="away-team-logo-container" style="width: 63px; height: 63px; margin: 0 auto; background-color: #f8f9fa; border-radius: 8px; display: flex; align-items: center; justify-content: center; border: 2px solid #dee2e6;">
                    <span style="font-size: 0.9rem; color: #6c757d;">로고</span>
                </div>
                <div style="font-weight:700; font-size:1.4rem; margin-bottom: 5px;" id="away-team-display">
                    <%= match.away_team || 'AWAY' %>
                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="openTeamNameModal('away')" style="font-size: 1rem; padding: 6px 12px;">
                    <i class="bi bi-pencil"></i> 수정
                </button>
            </div>
        </div>

        

        

        

        
        <!-- 게임 컨트롤 영역 -->
        <div class="game-controls-container" style="display: flex; justify-content: center; align-items: center; margin-top: 0px;">
            <div class="row justify-content-center" style="width: 100%; max-width: 800px;">
                <!-- 베이스 컨트롤 -->
                <div class="col-md-6 col-lg-5 mb-2">
                    <div class="game-status-section" style="background-color: #f8f9fa; border-radius: 12px; padding: 45px 15px 25px 15px; border: 2px solid #dee2e6; text-align: center;">

                        <div class="base-controls d-flex justify-content-center mb-3" style="margin-top: -15px;">
                            <div class="diamond">
                                <div class="base first" id="first-base" onclick="toggleBase('first')"></div>
                                <div class="base second" id="second-base" onclick="toggleBase('second')"></div>
                                <div class="base third" id="third-base" onclick="toggleBase('third')"></div>
                                <div class="base home"></div>
                            </div>
                        </div>
                        <button class="reset-button" onclick="clearBases()" style="width: 100%; padding: 8px; font-size: 0.9rem; margin-top: 20px; margin-bottom: 1px;">
                            <i class="bi bi-arrow-counterclockwise"></i> 베이스 클리어
                        </button>
                    </div>
                </div>
                
                <!-- 볼카운트 컨트롤 -->
                <div class="col-md-6 col-lg-5 mb-2">
                    <div class="game-status-section" style="background-color: #f8f9fa; border-radius: 12px; padding: 30px 15px 22px 15px; border: 2px solid #dee2e6; text-align: center;">

                        <div class="count-section" style="margin-top: -15px;">
                            <div class="count-row" style="margin-bottom: 0.1rem; display: flex; align-items: center; justify-content: space-between;">
                                <div style="display: flex; align-items: center;">
                                    <span class="count-label" style="font-size: 1rem; font-weight: 600; color: #495057; margin-right: 10px;">B</span>
                                    <div class="count-dots" style="display: inline-flex; gap: 8px; margin-right: 10px;">
                                        <div class="count-dot ball" id="ball-1" onclick="toggleCount('ball', 0)" style="width: 25px; height: 25px;"></div>
                                        <div class="count-dot ball" id="ball-2" onclick="toggleCount('ball', 1)" style="width: 25px; height: 25px;"></div>
                                        <div class="count-dot ball" id="ball-3" onclick="toggleCount('ball', 2)" style="width: 25px; height: 25px;"></div>
                                    </div>
                                </div>
                                <div class="count-controls" style="display: inline-flex; gap: 5px;">
                                    <button class="btn btn-sm btn-outline-warning" onclick="decrementCount('ball')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning" onclick="incrementCount('ball')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="count-row" style="margin-bottom: 0.1rem; display: flex; align-items: center; justify-content: space-between;">
                                <div style="display: flex; align-items: center;">
                                    <span class="count-label" style="font-size: 1rem; font-weight: 600; color: #495057; margin-right: 10px;">S</span>
                                    <div class="count-dots" style="display: inline-flex; gap: 8px; margin-right: 10px;">
                                        <div class="count-dot strike" id="strike-1" onclick="toggleCount('strike', 0)" style="width: 25px; height: 25px;"></div>
                                        <div class="count-dot strike" id="strike-2" onclick="toggleCount('strike', 1)" style="width: 25px; height: 25px;"></div>
                                    </div>
                                </div>
                                <div class="count-controls" style="display: inline-flex; gap: 5px;">
                                    <button class="btn btn-sm btn-outline-danger" onclick="decrementCount('strike')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="incrementCount('strike')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="count-row" style="margin-bottom: 0.1rem; display: flex; align-items: center; justify-content: space-between;">
                                <div style="display: flex; align-items: center;">
                                    <span class="count-label" style="font-size: 1rem; font-weight: 600; color: #495057; margin-right: 10px;">O</span>
                                    <div class="count-dots" style="display: inline-flex; gap: 8px; margin-right: 10px;">
                                        <div class="count-dot out" id="out-1" onclick="toggleCount('out', 0)" style="width: 25px; height: 25px;"></div>
                                        <div class="count-dot out" id="out-2" onclick="toggleCount('out', 1)" style="width: 25px; height: 25px;"></div>
                                        <div class="count-dot out" id="out-3" onclick="toggleCount('out', 2)" style="width: 25px; height: 25px;"></div>
                                    </div>
                                </div>
                                <div class="count-controls" style="display: inline-flex; gap: 5px;">
                                    <button class="btn btn-sm btn-outline-secondary" onclick="decrementCount('out')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" onclick="incrementCount('out')" style="width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <button class="reset-button" onclick="resetCounts()" style="width: 100%; padding: 8px; font-size: 0.9rem; margin-top: 5px;">
                                <i class="bi bi-arrow-counterclockwise"></i> 카운트 리셋
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 리스트 네비게이션 버튼 -->
        <% if (typeof listId !== 'undefined' && listId) { %>
        <div class="row mt-3">
            <div class="col-12">
                <div class="d-flex justify-content-between gap-2 mb-2">
                    <button class="btn btn-outline-secondary" onclick="prevMatch()" style="flex: 1;">
                        <i class="bi bi-chevron-left"></i> 이전경기
                    </button>
                    <button class="btn btn-outline-secondary" onclick="nextMatch()" style="flex: 1;">
                        다음경기 <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-center gap-2">
                    <button class="btn btn-success" onclick="pushToIntegratedOverlay()" style="flex: 1;">
                        <i class="bi bi-display"></i> 통합 URL에 푸시
                    </button>
                    <button class="btn btn-warning" onclick="forceRefreshOverlay()" style="flex: 1;">
                        <i class="bi bi-arrow-clockwise"></i> 강제 새로고침
                    </button>
                </div>
            </div>
        </div>
        <% } %>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // Socket.IO 연결 상태 확인
        socket.on('connect', () => {
            console.log('=== Socket.IO 연결됨 (모바일) ===');
            console.log('Socket ID:', socket.id);
            console.log('Match ID:', matchId);
        });
        
        socket.on('disconnect', () => {
            console.log('=== Socket.IO 연결 끊어짐 (모바일) ===');
        });
        
        socket.on('connect_error', (error) => {
            console.error('=== Socket.IO 연결 오류 (모바일) ===', error);
        });
        
        // 점수 변경 이벤트 (서버 상태 확인 후 업데이트)
        async function updateScore(team, change) {
            if (change < 0) {
                // - 버튼: 역순으로 점수 삭제
                await decreaseScoreReverse(team, Math.abs(change));
            } else {
                // + 버튼: 기존 방식
                await increaseScore(team, change);
            }
        }
        
        // + 버튼 동작 (일반 컨트롤 패널과 완전히 동일)
        async function increaseScore(team, change) {
            try {
                console.log(`=== 점수 증가 시작: ${team}팀 +${change} ===`);
                
                // 1. 서버에서 최신 경기 데이터 가져오기
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    throw new Error('서버에서 경기 데이터를 가져올 수 없습니다.');
                }
                
                const matchData = await response.json();
                console.log('서버에서 받은 최신 데이터:', matchData);
                
                // 2. 서버 상태로 UI 동기화 (다른 클라이언트에서 변경된 경우만)
                // 모바일에서는 즉시 UI 업데이트하지 않고 서버 응답을 기다림
                
                // 3. 현재 이닝 정보 가져오기
                const currentInning = parseInt(document.getElementById('current-inning').textContent) || 1;
                const inningType = document.getElementById('inning-type').textContent === '말' ? 'bottom' : 'top';
                
                // 4. 현재 이닝의 점수 가져오기 (UI에서)
                const currentInningElement = document.getElementById(`${team}-inning-${currentInning}`);
                const currentInningScore = parseInt(currentInningElement?.value) || 0;
                const newInningScore = Math.max(0, currentInningScore + change);
                
                console.log(`이닝 점수 변경: ${team}팀 ${currentInning}회 ${currentInningScore} + ${change} = ${newInningScore}`);
                
                // 5. UI 업데이트 (이닝 점수)
                if (currentInningElement) {
                    currentInningElement.value = newInningScore;
                }
                
                // 6. 총 점수 자동 계산
                updateTotalScores();
                
                // 7. 서버에 이닝 스코어 업데이트 전송
                socket.emit('baseball_inning_score_update', {
                    matchId: matchId,
                    team: team,
                    inning: currentInning,
                    inningType: inningType,
                    score: newInningScore,
                    change: change
                });
                
                updateMatchInfo();
                
                // 6. 로컬 계산값으로 최종 점수 확정 (서버 데이터보다 로컬 계산 우선)
                setTimeout(() => {
                    // 로컬에서 계산한 점수로 최종 업데이트
                    updateTotalScores();
                    console.log('로컬 계산값으로 최종 점수 확정 완료');
                }, 1000); // 1초 후 로컬 계산값으로 최종 확정
                
                console.log(`=== 점수 증가 완료: ${team}팀 ${currentInning}회 ${newInningScore} ===`);
                
            } catch (error) {
                console.error('점수 증가 중 오류 발생:', error);
                alert('점수 증가 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
            }
        }
        
        // 양팀 총 점수 자동 계산 함수 (일반 컨트롤 페이지와 동일)
        function updateTotalScores() {
            let homeTotal = 0;
            let awayTotal = 0;
            
            // 홈팀 이닝별 스코어 합계
            for (let i = 1; i <= 9; i++) {
                const homeInningElement = document.getElementById(`home-inning-${i}`);
                if (homeInningElement) {
                    homeTotal += parseInt(homeInningElement.value) || 0;
                }
            }
            
            // 원정팀 이닝별 스코어 합계
            for (let i = 1; i <= 9; i++) {
                const awayInningElement = document.getElementById(`away-inning-${i}`);
                if (awayInningElement) {
                    awayTotal += parseInt(awayInningElement.value) || 0;
                }
            }
            
            // 총 점수 UI 업데이트
            const homeScoreElement = document.getElementById('home-score');
            const awayScoreElement = document.getElementById('away-score');
            
            if (homeScoreElement) {
                homeScoreElement.value = homeTotal;
            }
            if (awayScoreElement) {
                awayScoreElement.value = awayTotal;
            }
            
            console.log(`총 점수 계산 완료: 홈팀 ${homeTotal}, 원정팀 ${awayTotal}`);
        }
        
        // - 버튼 동작 (역순으로 점수 삭제) - 일반 컨트롤 패널과 완전히 동일
        async function decreaseScoreReverse(team, amount) {
            try {
                console.log(`=== 점수 감소 시작: ${team}팀 -${amount} (역순 삭제) ===`);
                
                // 1. 서버에서 최신 경기 데이터 가져오기
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    throw new Error('서버에서 경기 데이터를 가져올 수 없습니다.');
                }
                
                const matchData = await response.json();
                const innings = matchData.match_data?.innings || {};
                
                // 2. 서버 상태로 UI 동기화 (다른 클라이언트에서 변경된 경우만)
                // 모바일에서는 즉시 UI 업데이트하지 않고 서버 응답을 기다림
                
                // 3. 역순으로 점수 삭제
                let remainingAmount = amount;
                const currentInning = parseInt(document.getElementById('current-inning').textContent) || 1;
                
                // 현재 이닝부터 역순으로 점수 삭제
                for (let i = currentInning; i >= 1 && remainingAmount > 0; i--) {
                    const currentInningElement = document.getElementById(`${team}-inning-${i}`);
                    const currentInningScore = parseInt(currentInningElement?.value) || 0;
                    const decreaseAmount = Math.min(remainingAmount, currentInningScore);
                    
                    if (decreaseAmount > 0) {
                        const newInningScore = currentInningScore - decreaseAmount;
                        remainingAmount -= decreaseAmount;
                        
                        console.log(`${team}팀 ${i}회: ${currentInningScore} - ${decreaseAmount} = ${newInningScore}`);
                        
                        // UI 업데이트 (이닝 점수)
                        if (currentInningElement) {
                            currentInningElement.value = newInningScore;
                        }
                        
                        // 서버에 이닝 스코어 업데이트 전송
                        const inningType = i === currentInning ? 
                            (document.getElementById('inning-type').textContent === '말' ? 'bottom' : 'top') : 
                            (i % 2 === 0 ? 'bottom' : 'top');
                        
                        socket.emit('baseball_inning_score_update', {
                            matchId: matchId,
                            team: team,
                            inning: i,
                            inningType: inningType,
                            score: newInningScore,
                            change: -decreaseAmount
                        });
                    }
                }
                
                // 총 점수 자동 계산
                updateTotalScores();
                
                updateMatchInfo();
                
                // 로컬 계산값으로 최종 점수 확정 (서버 데이터보다 로컬 계산 우선)
                setTimeout(() => {
                    // 로컬에서 계산한 점수로 최종 업데이트
                    updateTotalScores();
                    console.log('로컬 계산값으로 최종 점수 확정 완료 (감소)');
                }, 1000); // 1초 후 로컬 계산값으로 최종 확정
                
                console.log(`=== 점수 감소 완료: ${team}팀 -${amount} ===`);
                
            } catch (error) {
                console.error('점수 감소 중 오류 발생:', error);
                alert('점수 감소 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
            }
        }
        
        // 모든 점수 초기화 함수
        async function resetAllScores() {
            if (!confirm('모든 점수를 0으로 초기화하시겠습니까?\n(이닝별 점수와 총 점수가 모두 초기화됩니다)')) {
                return;
            }
            
            try {
                console.log('=== 모든 점수 초기화 시작 ===');
                
                // 1. 서버에서 최신 경기 데이터 가져오기
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    throw new Error('서버에서 경기 데이터를 가져올 수 없습니다.');
                }
                
                const matchData = await response.json();
                console.log('서버에서 받은 최신 데이터:', matchData);
                
                // 2. 서버 상태로 UI 동기화
                const serverHomeScore = matchData.home_score || 0;
                const serverAwayScore = matchData.away_score || 0;
                
                const homeScoreElement = document.getElementById('home-score');
                const awayScoreElement = document.getElementById('away-score');
                
                if (homeScoreElement) {
                    homeScoreElement.value = serverHomeScore;
                }
                if (awayScoreElement) {
                    awayScoreElement.value = serverAwayScore;
                }
                
                // 3. 모든 이닝 스코어 초기화
                for (let i = 1; i <= 9; i++) {
                    const homeInningElement = document.getElementById(`home-inning-${i}`);
                    const awayInningElement = document.getElementById(`away-inning-${i}`);
                    
                    if (homeInningElement) {
                        homeInningElement.value = '0';
                    }
                    if (awayInningElement) {
                        awayInningElement.value = '0';
                    }
                }
                
                // 4. 총 점수 초기화
                if (homeScoreElement) {
                    homeScoreElement.value = '0';
                }
                if (awayScoreElement) {
                    awayScoreElement.value = '0';
                }
                
                // 4. 서버에 모든 이닝 스코어 초기화 전송 (순차적으로 처리)
                for (let i = 1; i <= 9; i++) {
                    // 홈팀 이닝 초기화
                    socket.emit('baseball_inning_score_update', {
                        matchId: matchId,
                        team: 'home',
                        inning: i,
                        inningType: 'top',
                        score: 0,
                        change: 0
                    });
                    
                    // 원정팀 이닝 초기화
                    socket.emit('baseball_inning_score_update', {
                        matchId: matchId,
                        team: 'away',
                        inning: i,
                        inningType: 'bottom',
                        score: 0,
                        change: 0
                    });
                    
                    console.log(`이닝 ${i} 초기화 전송: 홈팀=0, 원정팀=0`);
                }
                
                // 5. API를 통해서도 업데이트 (모든 이닝 초기화)
                updateMatchInfo(true);
                
                console.log('=== 모든 점수 초기화 완료 ===');
                alert('모든 점수가 초기화되었습니다.');
                
            } catch (error) {
                console.error('점수 초기화 중 오류 발생:', error);
                alert('점수 초기화 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
            }
        }
        
        // 베이스 토글 함수
        function toggleBase(baseId) {
            const base = document.querySelector(`.base.${baseId}`);
            base.classList.toggle('active');
            console.log(`${baseId} 베이스 토글:`, base.classList.contains('active'));
            updateMatchInfo();
        }
        
        // 카운트 토글 함수
        function toggleCount(type, index) {
            const dots = document.querySelectorAll(`.count-dot.${type}`);
            const currentActive = document.querySelectorAll(`.count-dot.${type}.active`).length;
            
            // 클릭한 인덱스까지 활성화
            dots.forEach((dot, i) => {
                if (i <= index) {
                    dot.classList.add('active');
                } else {
                    dot.classList.remove('active');
                }
            });
            
            updateMatchInfo();
        }
        
        // 카운트 증가 함수
        function incrementCount(type) {
            const dots = document.querySelectorAll(`.count-dot.${type}`);
            const currentActive = document.querySelectorAll(`.count-dot.${type}.active`).length;
            const maxCount = type === 'ball' ? 3 : type === 'strike' ? 2 : 3;
            
            if (currentActive < maxCount) {
                dots[currentActive].classList.add('active');
            }
            updateMatchInfo();
        }
        
        // 카운트 감소 함수
        function decrementCount(type) {
            const dots = document.querySelectorAll(`.count-dot.${type}`);
            const currentActive = document.querySelectorAll(`.count-dot.${type}.active`).length;
            
            if (currentActive > 0) {
                dots[currentActive - 1].classList.remove('active');
            }
            updateMatchInfo();
        }
        
        // 이닝 업데이트 함수
        function updateInning(change) {
            const inningSpan = document.getElementById('current-inning');
            const typeSpan = document.getElementById('inning-type');
            let currentInning = parseInt(inningSpan.textContent);
            let isBottom = typeSpan.textContent === '말';
            
            if (change > 0) {
                if (isBottom) {
                    currentInning++;
                    isBottom = false;
                } else {
                    isBottom = true;
                }
            } else {
                if (!isBottom) {
                    currentInning--;
                    isBottom = true;
                } else {
                    isBottom = false;
                }
            }
            
            if (currentInning < 1) currentInning = 1;
            
            inningSpan.textContent = currentInning;
            typeSpan.textContent = isBottom ? '말' : '초';
            
            // 이닝 변경 시 베이스 상태와 볼카운트 초기화
            resetBases();
            resetCounts();
            
            updateMatchInfo();
        }
        
        // 이닝 타입 토글
        function toggleInningType() {
            const inningType = document.getElementById('inning-type');
            const currentType = inningType.textContent;
            inningType.textContent = currentType === '초' ? '말' : '초';
            
            // 이닝 타입 변경 시 베이스 상태와 볼카운트 초기화
            clearBases();
            resetCounts();
            
            updateMatchInfo();
        }
        

        

        
        // 카운트 리셋
        function resetCounts() {
            document.querySelectorAll('.count-dot').forEach(dot => {
                dot.classList.remove('active');
            });
            updateMatchInfo();
        }
        
        // 베이스 초기화 함수
        function resetBases() {
            document.getElementById('first-base').classList.remove('active');
            document.getElementById('second-base').classList.remove('active');
            document.getElementById('third-base').classList.remove('active');
        }
        
        // 베이스 클리어
        function clearBases() {
            resetBases();
            updateMatchInfo();
        }
        
        // 서버와 소켓 연결
        socket.on('connect', () => {
            socket.emit('join', matchId);
            
            // 야구 종목별 Room 참여
            socket.emit('join_sport_room', 'BASEBALL');
            console.log('🔧 야구 모바일 종목별 Room 참여 요청: sport_BASEBALL');
        });
        
        // 팀로고 사용 상태 저장
        async function saveTeamLogoVisibility() {
            const useLogos = document.getElementById('use-team-logos').checked;
            try {
                const response = await fetch('/api/baseball-team-logo-visibility', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ matchId: matchId, useLogos: useLogos })
                });
                if (!response.ok) throw new Error('팀로고 사용 상태 저장 실패');
                console.log('팀로고 사용 상태 저장 완료:', useLogos);
            } catch (error) {
                console.error('팀로고 사용 상태 저장 오류:', error);
            }
        }

        // 팀로고 사용 상태 불러오기
        async function loadTeamLogoVisibility() {
            try {
                const response = await fetch(`/api/baseball-team-logo-visibility/${matchId}`);
                if (response.ok) {
                    const data = await response.json();
                    const useLogos = data.useLogos;
                    console.log('팀로고 사용 상태 불러오기:', useLogos);
                    const checkbox = document.getElementById('use-team-logos');
                    if (checkbox) {
                        checkbox.checked = useLogos;
                    }
                } else {
                    console.log('팀로고 사용 상태 불러오기 실패, 기본값 사용');
                }
            } catch (error) {
                console.error('팀로고 사용 상태 불러오기 오류:', error);
            }
        }

        // 서버에서 최신 경기 데이터 로딩 (match_data 기반)
        async function loadCurrentMatchData() {
            try {
                console.log('=== 서버에서 최신 경기 데이터 로딩 시작 ===');
                
                // 1. Match 테이블에서 경기 데이터 조회
                const response = await fetch(`/api/matches/${matchId}`);
                
                if (response.ok) {
                    const matchData = await response.json();
                    console.log('Match 테이블에서 받은 데이터:', matchData);
                    
                    // Match 테이블의 총 점수 사용
                    const homeScore = matchData.home_score || 0;
                    const awayScore = matchData.away_score || 0;
                    
                    console.log('Match 총 점수:', { homeScore, awayScore });
                    
                    // UI 업데이트
                    const homeScoreElement = document.getElementById('home-score');
                    const awayScoreElement = document.getElementById('away-score');
                    
                    if (homeScoreElement) {
                        homeScoreElement.value = homeScore;
                        console.log(`홈팀 점수 설정: ${homeScore}`);
                    }
                    if (awayScoreElement) {
                        awayScoreElement.value = awayScore;
                        console.log(`원정팀 점수 설정: ${awayScore}`);
                    }
                    
                    // 이닝별 스코어 데이터 확인 (match_data의 innings)
                    const innings = matchData.match_data?.innings || {};
                    console.log('Match 이닝별 스코어:', innings);
                    
                    // 숨겨진 이닝별 점수 입력 필드 업데이트
                    for (let i = 1; i <= 9; i++) {
                        const homeInningElement = document.getElementById(`home-inning-${i}`);
                        const awayInningElement = document.getElementById(`away-inning-${i}`);
                        
                        if (homeInningElement && innings.home && innings.home[i] !== undefined) {
                            homeInningElement.value = innings.home[i];
                        }
                        if (awayInningElement && innings.away && innings.away[i] !== undefined) {
                            awayInningElement.value = innings.away[i];
                        }
                    }
                    
                    console.log('=== Match 테이블에서 최신 경기 데이터 로딩 완료 ===');
                } else {
                    console.error('Match 데이터 가져오기 실패:', response.status);
                }
            } catch (error) {
                console.error('현재 경기 데이터 가져오기 오류:', error);
            }
        }

        // 팀로고 정보 로드 함수 (오버레이와 동일한 로직)
        async function loadTeamLogos() {
            try {
                console.log('팀로고 정보 로드 시작...');
                
                // 1. DB에서 팀로고 정보 로드 (최우선순위) - 오버레이와 동일한 방식
                try {
                    const response = await fetch(`/api/matches/${matchId}/team-logos`);
                    
                    if (response.ok) {
                        const result = await response.json();
                        console.log('팀로고 정보 로드 성공:', result.teamLogos);
                        
                        if (result.teamLogos && result.teamLogos.length > 0) {
                            // 각 팀의 로고 정보 업데이트 (오버레이와 동일한 방식)
                            result.teamLogos.forEach(teamInfo => {
                                const teamType = teamInfo.team_type;
                                console.log(`${teamType}팀 로고 정보 업데이트:`, teamInfo);
                                
                                // 로고 미리보기 업데이트 (오버레이와 동일한 방식)
                                const logoContainer = document.getElementById(`${teamType}-team-logo-container`);
                                if (logoContainer && teamInfo.logo_path) {
                                    logoContainer.style.backgroundColor = teamInfo.logo_bg_color || '#ffffff';
                                    logoContainer.innerHTML = `
                                        <img src="${teamInfo.logo_path}" alt="${teamInfo.team_name} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                    `;
                                }
                                
                                // 배경색 선택기 업데이트
                                const colorInput = document.querySelector(`.${teamType}-team-colorbg`);
                                if (colorInput && teamInfo.logo_bg_color) {
                                    colorInput.value = teamInfo.logo_bg_color;
                                }
                            });
                            return; // 성공적으로 로드했으면 종료
                        }
                    }
                } catch (dbError) {
                    console.error('팀로고 DB 조회 오류:', dbError);
                }
                
                // 2. 팀 로고 맵 정보 로드 (백업) - 오버레이와 동일한 방식
                try {
                    const response = await fetch('/api/overlay-images/TEAMLOGO/BASEBALL/');
                    if (response.ok) {
                        const data = await response.json();
                        if (data && data.teamLogoMap) {
                            const homeTeamName = '<%= match.home_team %>';
                            const awayTeamName = '<%= match.away_team %>';
                            
                            console.log('사용 가능한 팀들:', Object.keys(data.teamLogoMap));
                            console.log('현재 경기 팀명:', { homeTeamName, awayTeamName });
                            
                            // 홈팀 로고 설정 (오버레이와 동일한 방식)
                            if (data.teamLogoMap[homeTeamName]) {
                                const homeLogoContainer = document.getElementById('home-team-logo-container');
                                if (homeLogoContainer) {
                                    homeLogoContainer.style.backgroundColor = data.teamLogoMap[homeTeamName].bgColor || '#ffffff';
                                    homeLogoContainer.innerHTML = `
                                        <img src="${data.teamLogoMap[homeTeamName].path}" alt="${homeTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                    `;
                                }
                                
                                console.log('홈팀 로고 정보 로드 (팀 맵):', data.teamLogoMap[homeTeamName]);
                            }
                            
                            // 어웨이팀 로고 설정 (오버레이와 동일한 방식)
                            if (data.teamLogoMap[awayTeamName]) {
                                const awayLogoContainer = document.getElementById('away-team-logo-container');
                                if (awayLogoContainer) {
                                    awayLogoContainer.style.backgroundColor = data.teamLogoMap[awayTeamName].bgColor || '#ffffff';
                                    awayLogoContainer.innerHTML = `
                                        <img src="${data.teamLogoMap[awayTeamName].path}" alt="${awayTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                    `;
                                }
                                
                                console.log('어웨이팀 로고 정보 로드 (팀 맵):', data.teamLogoMap[awayTeamName]);
                            }
                        }
                    }
                } catch (mapError) {
                    console.error('팀 로고 맵 조회 오류:', mapError);
                }
                
            } catch (error) {
                console.error('팀로고 정보 로드 오류:', error);
            }
        }

        // 페이지 로드 시 현재 상태 초기화
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('=== 모바일 컨트롤 페이지 로드 완료 ===');
            console.log('현재 matchId:', matchId);
            
            // 서버에서 최신 경기 데이터 로딩
            await loadCurrentMatchData();
            
            // 팀로고 사용 상태 불러오기
            await loadTeamLogoVisibility();
            
            // 팀로고 사용 체크박스 이벤트 리스너
            const useTeamLogosCheckbox = document.getElementById('use-team-logos');
            if (useTeamLogosCheckbox) {
                useTeamLogosCheckbox.addEventListener('change', async function() {
                    console.log('=== 야구 모바일 컨트롤 패널: 팀로고 사용 상태 변경 ===');
                    console.log('새로운 상태:', this.checked);
                    await saveTeamLogoVisibility();
                    
                    // 소켓을 통해 오버레이에 실시간 업데이트 전송
                    socket.emit('teamLogoVisibilityChanged', {
                        matchId: matchId,
                        useLogos: this.checked
                    });
                });
            }
            
            // 팀로고 정보 로드 (오버레이와 동일한 방식)
            await loadTeamLogos();
            
            // 현재 베이스 상태 표시
            const matchData = <%- JSON.stringify(match.match_data || {}) %>;
            console.log('초기 베이스 상태:', matchData);
            
            if (matchData.first_base) {
                const firstBase = document.querySelector('.base.first');
                if (firstBase) firstBase.classList.add('active');
            }
            if (matchData.second_base) {
                const secondBase = document.querySelector('.base.second');
                if (secondBase) secondBase.classList.add('active');
            }
            if (matchData.third_base) {
                const thirdBase = document.querySelector('.base.third');
                if (thirdBase) thirdBase.classList.add('active');
            }
            
            // 현재 볼카운트 표시
            const balls = matchData.balls || 0;
            const strikes = matchData.strikes || 0;
            const outs = matchData.outs || 0;
            
            // 볼 표시
            for (let i = 0; i < balls; i++) {
                const ballDot = document.getElementById(`ball-${i + 1}`);
                if (ballDot) ballDot.classList.add('active');
            }
            
            // 스트라이크 표시
            for (let i = 0; i < strikes; i++) {
                const strikeDot = document.getElementById(`strike-${i + 1}`);
                if (strikeDot) strikeDot.classList.add('active');
            }
            
            // 아웃 표시
            for (let i = 0; i < outs; i++) {
                const outDot = document.getElementById(`out-${i + 1}`);
                if (outDot) outDot.classList.add('active');
            }
        });
        
        // 점수/카운트/이닝 변경 시 서버에 업데이트 (일반 컨트롤 패널과 동일)
        async function updateMatchInfo(resetInnings = false) {
            // 베이스 상태 가져오기
            const firstBase = document.getElementById('first-base').classList.contains('active');
            const secondBase = document.getElementById('second-base').classList.contains('active');
            const thirdBase = document.getElementById('third-base').classList.contains('active');
            
            // 볼카운트 가져오기
            const balls = document.querySelectorAll('.count-dot.ball.active').length;
            const strikes = document.querySelectorAll('.count-dot.strike.active').length;
            const outs = document.querySelectorAll('.count-dot.out.active').length;
            
            const formData = {
                // 총 점수는 전송하지 않음 (서버에서 이닝별 점수로 자동 계산)
                match_data: {
                    balls: balls,
                    strikes: strikes,
                    outs: outs,
                    first_base: firstBase,
                    second_base: secondBase,
                    third_base: thirdBase,
                    current_inning: parseInt(document.getElementById('current-inning').textContent) || 1,
                    inning_type: document.getElementById('inning-type').textContent === '말' ? 'bottom' : 'top'
                }
            };
            
            // 점수 초기화인 경우 모든 이닝을 0으로 설정
            if (resetInnings) {
                formData.match_data.innings = {};
                for (let i = 1; i <= 9; i++) {
                    formData.match_data.innings[`home_${i}`] = 0;
                    formData.match_data.innings[`away_${i}`] = 0;
                }
                console.log('모든 이닝 점수를 0으로 초기화:', formData.match_data.innings);
            }
            try {
                await fetch(`/api/matches/${matchId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                // 실시간 업데이트를 위한 WebSocket 이벤트 발생 (match_updated로 통일)
                socket.emit('match_updated', {
                    matchId: matchId,
                    match_data: formData.match_data
                });
                
                console.log('야구 경기 데이터 업데이트 완료:', formData);
            } catch (error) {
                console.error('업데이트 중 오류:', error);
            }
        }
        
        // 리스트 기능 관련 변수
        let currentMatchIndex = 0;
        let totalMatches = 0;
        let listId = null;
        let listName = null;
        
        // 현재 경기가 푸시되어 있는지 확인하고 리스트 박스 색상 업데이트
        async function checkPushedMatchStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/pushed-match/${listId}`);
                const result = await response.json();
                
                const listInfoBox = document.getElementById('list-info-box');
                if (listInfoBox) {
                    if (result.success && result.data && result.data.matchId === matchId) {
                        // 현재 경기가 푸시되어 있음 - 빨간색
                        listInfoBox.style.backgroundColor = '#dc3545';
                        listInfoBox.querySelector('div').style.color = '#ffffff';
                    } else {
                        // 현재 경기가 푸시되어 있지 않음 - 회색
                        listInfoBox.style.backgroundColor = '#e9ecef';
                        listInfoBox.querySelector('div').style.color = '#495057';
                    }
                }
            } catch (error) {
                console.error('푸시된 경기 상태 확인 실패:', error);
            }
        }
        
        <% if (typeof listId !== 'undefined' && listId) { %>
        // EJS 템플릿 변수 할당
        currentMatchIndex = <%- currentMatchIndex || 0 %>;
        totalMatches = <%- totalMatches || 0 %>;
        listId = '<%- listId %>';
        listName = '<%- listName %>';
        
        // 페이지 로드 시 푸시된 경기 상태 확인
        document.addEventListener('DOMContentLoaded', function() {
            checkPushedMatchStatus();
        });
        
        // 다음 경기로 이동
        async function nextMatch() {
            if (currentMatchIndex < totalMatches - 1) {
                currentMatchIndex++;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 이전 경기로 이동
        async function prevMatch() {
            if (currentMatchIndex > 0) {
                currentMatchIndex--;
                window.location.href = `/list/${listId}/control-mobile?index=${currentMatchIndex}`;
            }
        }
        
        // 경기 리스트 페이지로 이동
        function goToList() {
            window.location.href = '/match-list-manager';
        }
        
        // URL 상태 확인
        async function checkOverlayStatus() {
            if (!listId) return;
            
            try {
                const response = await fetch(`/api/overlay-status/${listId}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.isActive) {
                        console.log('오버레이 URL 활성 상태:', result);
                        return result;
                    } else {
                        console.log('오버레이 URL 비활성 상태:', result.message);
                        return null;
                    }
                }
            } catch (error) {
                console.error('URL 상태 확인 실패:', error);
                return null;
            }
        }

        // 강제 새로고침
        async function forceRefreshOverlay() {
            if (!listId) {
                alert('리스트 정보가 없습니다.');
                return;
            }
            
            try {
                const response = await fetch(`/api/overlay-refresh/${listId}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('오버레이 URL이 강제 새로고침되었습니다.');
                    console.log('강제 새로고침 완료:', result.message);
                } else {
                    alert('강제 새로고침 실패: ' + result.message);
                }
            } catch (error) {
                console.error('강제 새로고침 실패:', error);
                alert('강제 새로고침 중 오류가 발생했습니다.');
            }
        }

        // 통합 URL에 현재 경기 푸시 (강제 새로고침 옵션 포함)
        async function pushToIntegratedOverlay(forceRefresh = false) {
            console.log('=== 통합 URL 푸시 시작 ===');
            console.log('현재 matchId:', matchId);
            console.log('현재 listId:', listId);
            console.log('현재 matchIndex:', currentMatchIndex);
            console.log('강제 새로고침:', forceRefresh);
            
            // listId가 없으면 경고
            if (!listId) {
                alert('리스트 정보가 없습니다. 리스트 모드에서만 사용 가능합니다.');
                return;
            }
            
            // URL 상태 확인 및 통합 확인
            const status = await checkOverlayStatus();
            
            // 현재 경기 정보 가져오기
            const homeTeam = document.getElementById('home-team-display').textContent.trim();
            const awayTeam = document.getElementById('away-team-display').textContent.trim();
            const homeScore = document.getElementById('home-score').value;
            const awayScore = document.getElementById('away-score').value;
            
            let confirmMessage = `통합 URL에 현재 경기를 푸시하시겠습니까?\n\n` +
                `경기: ${homeTeam} vs ${awayTeam}\n` +
                `점수: ${homeScore} - ${awayScore}\n` +
                `리스트: ${listName} (${currentMatchIndex + 1}/${totalMatches})`;
            
            if (status && !forceRefresh) {
                confirmMessage += `\n\n⚠️ 현재 오버레이에 다른 경기가 표시 중입니다.\n강제 새로고침이 필요합니다.`;
            }
            
            const confirmPush = confirm(confirmMessage);
            if (!confirmPush) {
                return;
            }
            
            if (status && !forceRefresh) {
                forceRefresh = true;
            }
            
            // WebSocket을 통해 리스트 오버레이에 경기 변경 알림
            const pushData = {
                listId: listId,
                matchIndex: currentMatchIndex,
                matchId: matchId,  // 현재 선택된 경기의 ID 추가
                forceRefresh: forceRefresh
            };
            
            console.log('전송할 데이터:', pushData);
            socket.emit('push_to_list_overlay', pushData);
            
            console.log('통합 오버레이에 경기 푸시 완료');
        }

        // 서버 응답 처리
        socket.on('push_to_list_overlay_response', (response) => {
            console.log('푸시 응답 수신:', response);
            if (response.success) {
                alert('통합 URL에 경기가 성공적으로 푸시되었습니다!');
                // 푸시 성공 후 색상 업데이트
                checkPushedMatchStatus();
            } else {
                alert('푸시 실패: ' + (response.error || '알 수 없는 오류'));
            }
        });

        // 팀명 수정 모달 열기
        function openTeamNameModal(team) {
            // 현재 화면에 표시된 팀명을 가져오기
            const teamDisplay = document.getElementById(`${team}-team-display`);
            const currentName = teamDisplay ? teamDisplay.textContent.trim() : '';
            
            document.getElementById('modal-team-name').value = currentName;
            document.getElementById('teamNameModal').setAttribute('data-team', team);
            new bootstrap.Modal(document.getElementById('teamNameModal')).show();
        }

        // 팀명 변경 확인
        async function confirmTeamNameChange() {
            const team = document.getElementById('teamNameModal').getAttribute('data-team');
            const newTeamName = document.getElementById('modal-team-name').value.trim();
            
            if (newTeamName) {
                await updateTeamName(team, newTeamName);
                bootstrap.Modal.getInstance(document.getElementById('teamNameModal')).hide();
            } else {
                alert('팀명을 입력해주세요.');
            }
        }

        // 팀 위치 변경 함수
        async function swapTeams() {
            if (!confirm('홈팀과 어웨이팀의 정보를 서로 바꾸시겠습니까?')) {
                return;
            }
            
            try {
                // 현재 팀 정보 가져오기
                const homeTeamName = document.getElementById('home-team-display').textContent;
                const awayTeamName = document.getElementById('away-team-display').textContent;
                const homeScore = document.getElementById('home-score').value;
                const awayScore = document.getElementById('away-score').value;
                
                // 서버에 위치 변경 요청
                const response = await fetch(`/api/match/${matchId}/swap-teams`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    throw new Error('팀 위치 변경 실패');
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀 위치 변경 실패');
                }
                
                // 성공 메시지
                alert('팀 위치가 성공적으로 변경되었습니다.');
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('swapTeams', { matchId: matchId });
                
                // 팀 로고 업데이트 이벤트도 전송
                try {
                    const response = await fetch('/api/team-logo-map/BASEBALL');
                    if (response.ok) {
                        const logoData = await response.json();
                        
                        // 홈팀 로고 업데이트 이벤트
                        const homeLogoInfo = logoData.teamLogoMap?.[data.home_team];
                        socket.emit('baseballTeamLogoUpdated', {
                            matchId: matchId,
                            teamType: 'home',
                            path: homeLogoInfo?.path,
                            bgColor: homeLogoInfo?.bgColor,
                            teamColor: null
                        });
                        
                        // 원정팀 로고 업데이트 이벤트
                        const awayLogoInfo = logoData.teamLogoMap?.[data.away_team];
                        socket.emit('baseballTeamLogoUpdated', {
                            matchId: matchId,
                            teamType: 'away',
                            path: awayLogoInfo?.path,
                            bgColor: awayLogoInfo?.bgColor,
                            teamColor: null
                        });
                    }
                } catch (error) {
                    console.error('팀 로고 업데이트 이벤트 전송 중 오류 발생:', error);
                }
                
            } catch (error) {
                console.error('팀 위치 변경 중 오류 발생:', error);
                alert('팀 위치 변경 중 오류가 발생했습니다.');
            }
        }

        // 팀명 업데이트 함수
        async function updateTeamName(team, newTeamName) {
            try {
                const response = await fetch(`/api/matches/${matchId}/team-name`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamName: newTeamName
                    })
                });

                if (!response.ok) {
                    throw new Error('팀명 업데이트 실패');
                }

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀명 업데이트 실패');
                }

                // 성공 메시지 표시
                alert(`${team === 'home' ? '홈팀' : '원정팀'}명이 '${newTeamName}'으로 변경되었습니다.`);
                
                // 팀명 표시 업데이트
                const teamNameDisplay = document.getElementById(`${team}-team-display`);
                if (teamNameDisplay) {
                    teamNameDisplay.textContent = newTeamName;
                }
                
                // 팀 로고 업데이트
                try {
                    const response = await fetch('/api/team-logo-map/BASEBALL');
                    if (response.ok) {
                        const data = await response.json();
                        const logoInfo = data.teamLogoMap?.[newTeamName];
                        
                        if (logoInfo) {
                            const logoContainer = document.getElementById(`${team}-team-logo-container`);
                            if (logoContainer) {
                                logoContainer.style.backgroundColor = logoInfo.bgColor || '#ffffff';
                                logoContainer.innerHTML = `
                                    <img src="${logoInfo.path}" alt="${newTeamName} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                `;
                            }
                        } else {
                            // 로고가 없는 경우 기본 상태로 복원
                            const logoContainer = document.getElementById(`${team}-team-logo-container`);
                            if (logoContainer) {
                                logoContainer.style.backgroundColor = '#f8f9fa';
                                logoContainer.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                            }
                        }
                    }
                } catch (error) {
                    console.error('팀 로고 업데이트 중 오류 발생:', error);
                }
                
                // 소켓을 통해 오버레이에 실시간 업데이트 전송
                socket.emit('updateTeamName', {
                    matchId: matchId,
                    team: team,
                    teamName: newTeamName
                });
                
                // 팀 로고 업데이트 이벤트도 전송
                socket.emit('baseballTeamLogoUpdated', {
                    matchId: matchId,
                    teamType: team,
                    path: logoInfo?.path,
                    bgColor: logoInfo?.bgColor,
                    teamColor: null
                });

            } catch (error) {
                console.error('팀명 업데이트 중 오류 발생:', error);
                alert('팀명 업데이트 중 오류가 발생했습니다.');
            }
        }

        // 경기 수정 이벤트
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                console.log('경기 수정 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 종목 업데이트 (필요한 경우)
                if (data.sport_type && data.sport_type !== currentSportType) {
                    currentSportType = data.sport_type;
                    console.log('종목 변경됨:', currentSportType);
                }
                
                // 경기 정보 업데이트
                updateMatchDisplay(data);
            }
        });

        // 야구 이닝 스코어 업데이트 이벤트 처리 (모바일)
        socket.on('baseball_inning_score_updated', (data) => {
            console.log('=== 야구 이닝 스코어 업데이트 수신 (모바일) ===');
            console.log('수신된 데이터:', data);
            console.log('현재 matchId:', matchId);
            console.log('데이터 matchId:', data.matchId);
            
            if (data.matchId === matchId) {
                // 1. 먼저 서버에서 받은 이닝별 점수로 숨겨진 입력 필드 업데이트
                if (data.innings) {
                    console.log('서버에서 받은 이닝별 점수:', data.innings);
                    
                    for (let i = 1; i <= 9; i++) {
                        const homeInningElement = document.getElementById(`home-inning-${i}`);
                        const awayInningElement = document.getElementById(`away-inning-${i}`);
                        
                        if (homeInningElement && data.innings[`home_${i}`] !== undefined) {
                            homeInningElement.value = data.innings[`home_${i}`] || 0;
                            console.log(`홈팀 ${i}회 점수 업데이트: ${data.innings[`home_${i}`]}`);
                        }
                        if (awayInningElement && data.innings[`away_${i}`] !== undefined) {
                            awayInningElement.value = data.innings[`away_${i}`] || 0;
                            console.log(`원정팀 ${i}회 점수 업데이트: ${data.innings[`away_${i}`]}`);
                        }
                    }
                }
                
                // 2. 서버에서 계산된 총 점수 사용
                const serverHomeTotal = data.home_score;
                const serverAwayTotal = data.away_score;
                
                console.log(`서버에서 받은 총 점수: 홈팀 ${serverHomeTotal}, 원정팀 ${serverAwayTotal}`);
                
                // 3. 서버 점수가 유효한 경우 사용, 그렇지 않으면 로컬 재계산
                let homeTotal = serverHomeTotal;
                let awayTotal = serverAwayTotal;
                
                if (serverHomeTotal === 0 || serverHomeTotal === undefined || serverAwayTotal === 0 || serverAwayTotal === undefined) {
                    console.log('서버 총 점수가 유효하지 않음. 로컬 재계산 수행...');
                    
                    // 로컬에서 이닝별 점수 합계 재계산
                    let localHomeTotal = 0;
                    let localAwayTotal = 0;
                    
                    for (let i = 1; i <= 9; i++) {
                        const homeInningElement = document.getElementById(`home-inning-${i}`);
                        const awayInningElement = document.getElementById(`away-inning-${i}`);
                        
                        if (homeInningElement) {
                            localHomeTotal += parseInt(homeInningElement.value) || 0;
                        }
                        if (awayInningElement) {
                            localAwayTotal += parseInt(awayInningElement.value) || 0;
                        }
                    }
                    
                    homeTotal = localHomeTotal;
                    awayTotal = localAwayTotal;
                    
                    console.log(`로컬 재계산 결과: 홈팀 ${homeTotal}, 원정팀 ${awayTotal}`);
                }
                
                // 총 점수 표시 업데이트
                const homeScoreElement = document.getElementById('home-score');
                const awayScoreElement = document.getElementById('away-score');
                
                console.log('업데이트 전 점수:', {
                    home: homeScoreElement?.value,
                    away: awayScoreElement?.value
                });
                
                if (homeScoreElement) {
                    homeScoreElement.value = homeTotal;
                    console.log(`홈팀 점수 최종 업데이트: ${homeTotal}`);
                }
                if (awayScoreElement) {
                    awayScoreElement.value = awayTotal;
                    console.log(`원정팀 점수 최종 업데이트: ${awayTotal}`);
                }
                
                console.log('업데이트 후 점수:', {
                    home: homeScoreElement?.value,
                    away: awayScoreElement?.value
                });
                
                console.log('=== 야구 이닝 스코어 업데이트 처리 완료 (모바일) ===');
            } else {
                console.log('매치 ID가 일치하지 않음 - 이벤트 무시');
            }
        });

        // 경기 업데이트 이벤트 처리 (다른 클라이언트에서 변경된 경우만)
        socket.on('match_update', (data) => {
            console.log('=== 경기 업데이트 수신 (모바일) ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                // 점수 업데이트 (다른 클라이언트에서 변경된 경우만)
                if (data.data && (data.data.home_score !== undefined || data.data.away_score !== undefined)) {
                    const homeScoreElement = document.getElementById('home-score');
                    const awayScoreElement = document.getElementById('away-score');
                    
                    if (homeScoreElement && data.data.home_score !== undefined) {
                        homeScoreElement.value = data.data.home_score;
                        console.log(`홈팀 점수 업데이트: ${data.data.home_score}`);
                    }
                    if (awayScoreElement && data.data.away_score !== undefined) {
                        awayScoreElement.value = data.data.away_score;
                        console.log(`원정팀 점수 업데이트: ${data.data.away_score}`);
                    }
                }
                console.log('=== 경기 업데이트 처리 완료 (모바일) ===');
            }
        });

        // 점수 동기화 완료 이벤트 처리
        socket.on('match_scores_synced', (data) => {
            console.log('점수 동기화 완료 수신:', data);
            
            if (data.matchId === matchId) {
                const { home_score, away_score } = data;
                
                // UI 업데이트
                const homeScoreElement = document.getElementById('home-score');
                const awayScoreElement = document.getElementById('away-score');
                
                if (homeScoreElement) {
                    homeScoreElement.value = home_score;
                    console.log(`홈팀 점수 동기화: ${home_score}`);
                }
                if (awayScoreElement) {
                    awayScoreElement.value = away_score;
                    console.log(`원정팀 점수 동기화: ${away_score}`);
                }
                
                console.log('점수 동기화 완료: 홈팀', home_score, '원정팀', away_score);
            }
        });

        // 팀 위치 변경 이벤트
        socket.on('teamsSwapped', async (data) => {
            if (data.matchId === matchId) {
                console.log('팀 위치 변경 이벤트 수신:', data);
                
                // 팀명 업데이트
                const homeTeamDisplay = document.getElementById('home-team-display');
                const awayTeamDisplay = document.getElementById('away-team-display');
                
                if (homeTeamDisplay) {
                    homeTeamDisplay.textContent = data.home_team;
                }
                if (awayTeamDisplay) {
                    awayTeamDisplay.textContent = data.away_team;
                }
                
                // 점수 업데이트
                const homeScoreInput = document.getElementById('home-score');
                const awayScoreInput = document.getElementById('away-score');
                
                if (homeScoreInput) {
                    homeScoreInput.value = data.home_score;
                }
                if (awayScoreInput) {
                    awayScoreInput.value = data.away_score;
                }
                
                // 팀 로고 업데이트
                try {
                    const response = await fetch('/api/team-logo-map/BASEBALL');
                    if (response.ok) {
                        const logoData = await response.json();
                        
                        // 홈팀 로고 업데이트
                        const homeLogoInfo = logoData.teamLogoMap?.[data.home_team];
                        const homeLogoContainer = document.getElementById('home-team-logo-container');
                        if (homeLogoContainer) {
                            if (homeLogoInfo) {
                                homeLogoContainer.style.backgroundColor = homeLogoInfo.bgColor || '#ffffff';
                                homeLogoContainer.innerHTML = `
                                    <img src="${homeLogoInfo.path}" alt="${data.home_team} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                `;
                            } else {
                                homeLogoContainer.style.backgroundColor = '#f8f9fa';
                                homeLogoContainer.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                            }
                        }
                        
                        // 원정팀 로고 업데이트
                        const awayLogoInfo = logoData.teamLogoMap?.[data.away_team];
                        const awayLogoContainer = document.getElementById('away-team-logo-container');
                        if (awayLogoContainer) {
                            if (awayLogoInfo) {
                                awayLogoContainer.style.backgroundColor = awayLogoInfo.bgColor || '#ffffff';
                                awayLogoContainer.innerHTML = `
                                    <img src="${awayLogoInfo.path}" alt="${data.away_team} 로고" style="width: 100%; height: 100%; object-fit: contain; border-radius: 6px;">
                                `;
                            } else {
                                awayLogoContainer.style.backgroundColor = '#f8f9fa';
                                awayLogoContainer.innerHTML = '<span style="font-size: 0.8rem; color: #6c757d;">로고</span>';
                            }
                        }
                    }
                } catch (error) {
                    console.error('팀 로고 업데이트 중 오류 발생:', error);
                }
                
                console.log('팀 위치 변경 완료');
            }
        });
        <% } %>
        

    </script>
    
    <!-- 팀명 수정 모달 -->
    <div class="modal fade" id="teamNameModal" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">팀명 수정</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">팀명</label>
                        <input type="text" id="modal-team-name" class="form-control" placeholder="팀명 입력">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" onclick="confirmTeamNameChange()">확인</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html> 