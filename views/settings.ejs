<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>설정 - SportsCoder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .settings-container {
            max-width: 1400px;
            margin: 2rem auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .settings-column {
            padding: 1.5rem;
        }
        
        .settings-column-left {
            border-right: 1px solid #e9ecef;
        }
        
        .settings-column-right {
            border-left: 1px solid #e9ecef;
        }
        
        @media (max-width: 768px) {
            .settings-column-left,
            .settings-column-right {
                border: none;
            }
        }
        .settings-header {
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        .settings-body {
            padding: 2rem;
        }
        
        .db-management-section {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 1.5rem;
            border-bottom: 1px solid #dee2e6;
        }
        
        .db-management-section .btn {
            padding: 0.75rem 2rem;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .db-management-section .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .setting-item {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            background: #f8f9fa;
        }
        .setting-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #495057;
        }
        .setting-description {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }
        .color-picker-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .color-preview {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        .btn-save {
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            border: none;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(30, 64, 175, 0.3);
            color: white;
        }
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border-left: 4px solid #1e40af;
            margin-bottom: 10px;
        }
        .toast.success {
            border-left-color: #10b981;
        }
        .toast.error {
            border-left-color: #ef4444;
        }

        /* 오버레이 이미지 목록 테이블 스타일 */
        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }
        
        .table-primary {
            background-color: rgba(0, 123, 255, 0.2) !important;
        }
        
        .btn-group-sm .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        
        .form-check-input:checked {
            background-color: #198754;
            border-color: #198754;
        }

        /* 축구 오버레이 디자인 설정 스타일 */
        .soccer-overlay-preview-small {
            width: 320px;
            height: 180px;
            background-color: #000;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            border: 2px solid #dee2e6;
            margin: 0 auto;
        }

        .soccer-overlay-preview-small:hover {
            border-color: #007bff;
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }

        .soccer-overlay-preview-full {
            width: 640px;
            height: 360px;
            background-color: #000;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            margin: 0 auto;
        }

        .preview-element {
            position: absolute;
            border: 2px solid;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 8px;
            font-weight: bold;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            padding: 2px;
            word-break: break-word;
        }

        .preview-element:hover {
            opacity: 0.8;
        }

        .preview-element.selected {
            border-width: 3px;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .preview-scoreboard {
            background-color: rgba(0, 204, 51, 0.8);
            border-color: #00cc33;
            width: 280px;
            height: 60px;
        }

        .preview-home-logo {
            background-color: rgba(0, 204, 51, 0.6);
            border-color: #00cc33;
            width: 30px;
            height: 30px;
        }

        .preview-away-logo {
            background-color: rgba(255, 255, 255, 0.6);
            border-color: #ffffff;
            width: 30px;
            height: 30px;
        }

        .preview-match-state {
            background-color: rgba(0, 0, 0, 0.8);
            border-color: #333;
            width: 100px;
            height: 25px;
        }

        .preview-lineup {
            background-color: rgba(0, 0, 0, 0.6);
            border-color: #666;
            width: 200px;
            height: 120px;
        }

        .preview-overlay-image {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: #fff;
            width: 150px;
            height: 100px;
        }

        .preview-timer {
            background-color: rgba(0, 0, 0, 0.8);
            border-color: #333;
            width: 90px;
            height: 42px;
        }


    </style>
</head>
<body>
    <div class="settings-container">
        <div class="settings-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1><i class="bi bi-gear-fill"></i> 시스템 설정</h1>
                    <p class="mb-0">기본 팀 컬러 및 시스템 설정을 관리합니다.</p>
                </div>
                <a href="/matches" class="btn btn-outline-light">
                    <i class="bi bi-arrow-left"></i> 경기 목록으로 돌아가기
                </a>
            </div>
        </div>
        
        <!-- DB 관리 버튼 섹션 -->
        <div class="db-management-section">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex justify-content-start">
                            <button class="btn" onclick="openDBManagement()" style="background-color: #ffeb3b; color: #000; border: none; border-radius: 10px; padding: 8px 20px; text-shadow: none; box-shadow: none;">
                                <i class="bi bi-database-gear"></i> DB 관리
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="settings-body">
            <div class="row">
                <!-- 왼쪽 컬럼: 기본 설정 및 로그 관리 (관리자만) -->
                <% if (typeof userRole !== 'undefined' && userRole === 'admin') { %>
                <div class="col-md-6">
                    <div class="settings-column settings-column-left">
                        <div class="setting-item">
                            <div class="setting-label">기본 팀 컬러 설정</div>
                            <div class="setting-description">
                                새로운 경기 생성 시 적용될 기본 팀 컬러를 설정합니다. 
                                이 설정은 축구와 야구 경기 모두에 적용됩니다.
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">홈팀 기본 컬러</label>
                                    <div class="color-picker-container">
                                        <input type="color" id="default-home-color" class="form-control form-control-color" value="#1e40af">
                                        <div class="color-preview" id="home-color-preview" style="background-color: #1e40af;">#1e40af</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">원정팀 기본 컬러</label>
                                    <div class="color-picker-container">
                                        <input type="color" id="default-away-color" class="form-control form-control-color" value="#1e40af">
                                        <div class="color-preview" id="away-color-preview" style="background-color: #1e40af;">#1e40af</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="setting-item">
                            <div class="setting-label">설정 저장</div>
                            <div class="setting-description">
                                변경된 설정을 저장합니다. 저장 후 새로운 경기부터 적용됩니다.
                            </div>
                            <button id="save-settings" class="btn btn-save">
                                <i class="bi bi-save"></i> 설정 저장
                            </button>
                        </div>

                        <!-- 로그 관리 섹션 -->
                        <div class="setting-item">
                            <div class="setting-label">
                                <i class="bi bi-file-text"></i> 로그 관리
                            </div>
                            <div class="setting-description">시스템 로그 파일을 확인하고 관리할 수 있습니다. 로그 삭제는 파일을 삭제하는 것이 아니라 로그 내용을 초기화합니다. 자동 백업은 1일마다 실행되며, 로그 크기가 제한을 초과하면 자동으로 백업 후 초기화됩니다.</div>
                
                <!-- 자동 로그 관리 상태 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0"><i class="bi bi-robot"></i> 자동 로그 관리 상태</h6>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-primary mb-1" id="autoBackupStatus">활성화</h6>
                                            <small class="text-muted">자동 백업</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-info mb-1" id="backupCount">-</h6>
                                            <small class="text-muted">백업 개수</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-success mb-1" id="currentLogSize">-</h6>
                                            <small class="text-muted">현재 로그 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-warning mb-1" id="totalBackupSize">-</h6>
                                            <small class="text-muted">백업 총 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-secondary mb-1" id="maxLogSize">50MB</h6>
                                            <small class="text-muted">최대 로그 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <h6 class="text-dark mb-1" id="retentionDays">30일</h6>
                                        <small class="text-muted">보관 기간</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 로그 상태 요약 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="totalLogFiles" class="text-primary mb-1">-</h5>
                                            <small class="text-muted">총 로그 파일</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="totalLogSize" class="text-info mb-1">-</h5>
                                            <small class="text-muted">총 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="oldestLog" class="text-warning mb-1">-</h5>
                                            <small class="text-muted">가장 오래된 로그</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <h5 id="newestLog" class="text-success mb-1">-</h5>
                                        <small class="text-muted">최신 로그</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">로그 파일 목록</h6>
                                <div>
                                    <button class="btn btn-outline-primary btn-sm" onclick="refreshLogData()">
                                        <i class="bi bi-arrow-clockwise"></i> 새로고침
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="viewLogContent()">
                                        <i class="bi bi-eye"></i> 로그 내용 보기
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="logFilesList" class="mb-3">
                                    <div class="text-center text-muted">
                                        <i class="bi bi-hourglass-split"></i> 로그 파일 목록을 불러오는 중...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">빠른 작업</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-success btn-sm" onclick="backupLogs()">
                                        <i class="bi bi-download"></i> 로그 백업
                                    </button>
                                    <button class="btn btn-warning btn-sm" onclick="cleanupLogs()">
                                        <i class="bi bi-trash"></i> 오래된 로그 정리
                                    </button>
                                    <button class="btn btn-info btn-sm" onclick="downloadAllLogs()">
                                        <i class="bi bi-file-earmark-zip"></i> 모든 로그 다운로드
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="clearAllLogs()">
                                        <i class="bi bi-trash-fill"></i> 모든 로그 초기화
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                <% } %>
            </div>
        </div>

        <!-- 오른쪽 컬럼: 종목별 오버레이 이미지 관리 및 디자인 설정 -->
        <div class="col-md-6">
            <div class="settings-column settings-column-right">
                <!-- 종목별 오버레이 이미지 관리 섹션 -->
                <div class="setting-item">
                    <div class="setting-label">
                        <i class="bi bi-image"></i> 종목별 오버레이 이미지 관리
                    </div>
                    <div class="setting-description">
                        각 종목별로 오버레이 페이지에 표시할 이미지를 업로드하고 관리할 수 있습니다. 
                        업로드된 이미지는 해당 종목의 오버레이 페이지에 표시되며, 변경사항은 실시간으로 반영됩니다.
                    </div>
                
                <!-- 종목 선택 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0"><i class="bi bi-trophy"></i> 종목 선택</h6>
                            </div>
                            <div class="card-body">
                                <select id="sportSelect" class="form-select" onchange="loadSportOverlayImages()">
                                    <option value="">종목을 선택하세요</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 선택된 종목의 이미지 관리 -->
                <div id="sportImageManagement" style="display: none;">

                    <!-- 이미지 업로드 -->
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <div class="card border-success">
                                <div class="card-header bg-success text-white">
                                    <h6 class="mb-0"><i class="bi bi-cloud-upload"></i> <span id="selectedSportName3"></span> 이미지 업로드</h6>
                                </div>
                                <div class="card-body">
                                    <form id="sportOverlayImageForm" enctype="multipart/form-data">
                                        <input type="hidden" id="selectedSportCode" name="sportCode">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="mb-3">
                                                    <label for="sportOverlayImage" class="form-label">이미지 파일 선택</label>
                                                    <input type="file" class="form-control" id="sportOverlayImage" name="image" accept="image/*" required>
                                                    <div class="form-text">지원 형식: JPEG, PNG, GIF, WEBP (최대 10MB)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label class="form-label">&nbsp;</label>
                                                    <button type="submit" class="btn btn-success w-100">
                                                        <i class="bi bi-upload"></i> 업로드
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 업로드된 이미지 목록 -->
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0"><span id="selectedSportName2"></span> 이미지 목록 및 선택</h6>
                                    <button class="btn btn-outline-success btn-sm" onclick="loadSportOverlayImagesWithActive()">
                                        <i class="bi bi-arrow-clockwise"></i> 새로고침
                                    </button>
                                </div>
                                <div class="card-body">
                                    <div id="sportOverlayImagesList" class="row">
                                        <div class="col-12 text-center text-muted">
                                            <i class="bi bi-hourglass-split"></i> 이미지 목록을 불러오는 중...
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

                </div>

                        <!-- 백업/복원 관리 섹션 (관리자만) -->
                        <% if (typeof userRole !== 'undefined' && userRole === 'admin') { %>
                        <div class="setting-item">
                            <div class="setting-label">
                                <i class="bi bi-database-gear"></i> 백업/복원 관리
                            </div>
                            <div class="setting-description">
                                전체 시스템 데이터를 백업하고 복원할 수 있습니다. 
                                백업에는 사용자 생성 템플릿, 경기 정보, 종목별 이미지, 팀 로고 등이 포함됩니다. 
                                기본 템플릿과 기본 종목은 백업에서 제외되며 복원 시에도 유지됩니다.
                            </div>

                            <!-- 백업 생성 -->
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <div class="card border-success">
                                        <div class="card-header bg-success text-white">
                                            <h6 class="mb-0"><i class="bi bi-download"></i> 백업 생성</h6>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-3">현재 시스템의 모든 데이터를 백업 파일로 생성합니다.</p>
                                            
                                            <!-- 백업 파일 이름 입력 -->
                                            <div class="mb-3">
                                                <label for="backup-name-input" class="form-label">백업 파일 이름:</label>
                                                <div class="input-group">
                                                    <span class="input-group-text" id="backup-name-prefix">sportscoder-backup-</span>
                                                    <input type="text" id="backup-name-input" class="form-control" 
                                                           placeholder="백업이름" maxlength="50" 
                                                           aria-describedby="backup-name-prefix backup-name-help">
                                                </div>
                                                <div id="backup-name-help" class="form-text">
                                                    날짜와 시간이 자동으로 앞에 추가됩니다. (예: sportscoder-backup-2025-09-16T00-19-41-241Z-백업이름.zip)
                                                </div>
                                            </div>
                                            
                                            <button id="create-backup-btn" class="btn btn-success">
                                                <i class="bi bi-download"></i> 백업 생성
                                            </button>
                                            <div id="backup-progress" class="mt-3" style="display: none;">
                                                <div class="progress">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                         role="progressbar" style="width: 0%"></div>
                                                </div>
                                                <small class="text-muted">백업 생성 중...</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 백업 목록 -->
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <div class="card border-info">
                                        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0"><i class="bi bi-list-ul"></i> 백업 목록</h6>
                                            <button id="refresh-backup-list" class="btn btn-outline-light btn-sm">
                                                <i class="bi bi-arrow-clockwise"></i> 새로고침
                                            </button>
                                        </div>
                                        <div class="card-body">
                                            <div id="backup-list-container">
                                                <div class="text-center text-muted">
                                                    <i class="bi bi-hourglass-split"></i> 백업 목록을 불러오는 중...
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 복원 -->
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <div class="card border-warning">
                                        <div class="card-header bg-warning text-dark">
                                            <h6 class="mb-0"><i class="bi bi-upload"></i> 백업 복원</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="alert alert-warning">
                                                <i class="bi bi-exclamation-triangle"></i>
                                                <strong>주의:</strong> 백업 복원 시 현재의 모든 사용자 데이터가 삭제되고 백업된 데이터로 교체됩니다. 
                                                기본 템플릿과 기본 종목은 유지됩니다.
                                            </div>
                                            
                                            <!-- 파일 업로드 방식 -->
                                            <div class="mb-3">
                                                <label for="backup-file-input" class="form-label">백업 파일 업로드:</label>
                                                <input type="file" id="backup-file-input" class="form-control" accept=".zip" />
                                                <div class="form-text">백업 파일(.zip)을 선택하세요</div>
                                            </div>
                                            
                                            <!-- 또는 서버 백업 선택 방식 -->
                                            <div class="mb-3">
                                                <label for="restore-backup-select" class="form-label">또는 서버의 백업 선택:</label>
                                                <select id="restore-backup-select" class="form-select">
                                                    <option value="">백업을 선택하세요</option>
                                                </select>
                                            </div>
                                            
                                            <button id="restore-backup-btn" class="btn btn-warning" disabled>
                                                <i class="bi bi-upload"></i> 백업 복원
                                            </button>
                                            <div id="restore-progress" class="mt-3" style="display: none;">
                                                <div class="progress">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                                         role="progressbar" style="width: 0%"></div>
                                                </div>
                                                <small class="text-muted">백업 복원 중...</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- DB 초기화 -->
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <div class="card border-danger">
                                        <div class="card-header bg-danger text-white">
                                            <h6 class="mb-0"><i class="bi bi-trash3"></i> 데이터베이스 초기화</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="alert alert-danger">
                                                <i class="bi bi-exclamation-triangle-fill"></i>
                                                <strong>경고:</strong> 이 작업은 기본 종목(축구, 야구)을 제외한 모든 사용자 데이터를 삭제합니다. 
                                                삭제되는 데이터: 사용자 정의 종목, 경기 정보, 오버레이 이미지, 팀 로고, 경기 목록 등
                                            </div>
                                            
                                            <div class="mb-3">
                                                <label class="form-label">초기화 확인</label>
                                                <div class="form-check">
                                                    <input type="checkbox" id="reset-confirm-1" class="form-check-input">
                                                    <label class="form-check-label" for="reset-confirm-1">
                                                        기본 종목(축구, 야구)은 유지됩니다
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input type="checkbox" id="reset-confirm-2" class="form-check-input">
                                                    <label class="form-check-label" for="reset-confirm-2">
                                                        사용자 정의 종목과 관련 데이터가 모두 삭제됩니다
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input type="checkbox" id="reset-confirm-3" class="form-check-input">
                                                    <label class="form-check-label" for="reset-confirm-3">
                                                        이 작업은 되돌릴 수 없습니다
                                                    </label>
                                                </div>
                                            </div>
                                            
                                            <button id="reset-database-btn" class="btn btn-danger" disabled>
                                                <i class="bi bi-trash3"></i> 데이터베이스 초기화
                                            </button>
                                            <div id="reset-progress" class="mt-3" style="display: none;">
                                                <div class="progress">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-danger" 
                                                         role="progressbar" style="width: 0%"></div>
                                                </div>
                                                <small class="text-muted">데이터베이스 초기화 중...</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <% } %>

                <!-- 종목별 오버레이 디자인 설정 섹션 (관리자만) -->
                <% if (typeof userRole !== 'undefined' && userRole === 'admin') { %>
                <div class="setting-item">
                    <div class="setting-label">
                        <i class="bi bi-layout-text-window"></i> <span id="overlayDesignTitle">축구 오버레이 디자인 설정</span>
                    </div>
                    <div class="setting-description">
                        <span id="overlayDesignDescription">축구 오버레이 페이지의 각 요소들의 위치를 조정할 수 있습니다. 
                        설정 후 오버레이 페이지에서 변경사항을 확인할 수 있습니다.</span>
                    </div>
                
                <!-- 경기 상태 표시 설정 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">경기 상태 표시 설정</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="showMatchState" checked>
                                    <label class="form-check-label" for="showMatchState">
                                        전반, 후반, 경기종료 등 경기 상태 표시
                                    </label>
                                </div>
                                <small class="text-muted">
                                    이 설정을 변경하면 모든 축구 오버레이 페이지에 실시간으로 반영됩니다.
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-12">
                        <!-- 위치 조정 컨트롤 -->
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">위치 조정</h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">요소 선택</label>
                                            <select class="form-select" id="elementSelect" onchange="selectElement()">
                                                <option value="scoreboard">스코어보드</option>
                                                <option value="homeLogo">홈팀 로고</option>
                                                <option value="awayLogo">어웨이팀 로고</option>
                                                <option value="matchState">경기 상태</option>
                                                <option value="homeLineup">홈팀 라인업</option>
                                                <option value="awayLineup">어웨이팀 라인업</option>
                                                <option value="overlayImage">오버레이 이미지</option>
                                                <option value="timer">타이머</option>
                                            </select>
                                        </div>
                                        

                                    </div>
                                    
                                </div>
                                
                                <div class="d-grid gap-2 mt-3">
                                    <button class="btn btn-primary btn-sm" onclick="saveDesignSettings()">
                                        <i class="bi bi-save"></i> 설정 저장
                                    </button>
                                    <button class="btn btn-warning btn-sm" onclick="resetDesignSettings()">
                                        <i class="bi bi-arrow-clockwise"></i> 기본값으로 초기화
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
                <% } %>
    </div>


            <!-- 이미지 미리보기 모달 -->
            <div class="modal fade" id="imagePreviewModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="imagePreviewTitle">이미지 미리보기</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center">
                            <img id="imagePreviewImg" src="" alt="이미지 미리보기" class="img-fluid" style="max-height: 70vh; object-fit: contain;">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 로그 내용 모달 -->
            <div class="modal fade" id="logContentModal" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">로그 내용</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <select id="logFileSelect" class="form-select" onchange="loadLogContent()">
                                    <option value="">로그 파일을 선택하세요</option>
                                </select>
                            </div>
                                                         <div class="mb-3">
                                 <div class="input-group">
                                     <input type="text" id="logSearchInput" class="form-control" placeholder="로그 내용 검색..." oninput="searchLogContent()">
                                     <button class="btn btn-outline-secondary" onclick="searchLogContent()">
                                         <i class="bi bi-search"></i> 검색
                                     </button>
                                     <button class="btn btn-outline-danger" onclick="clearSearch()" title="검색 초기화">
                                         <i class="bi bi-x-circle"></i>
                                     </button>
                                 </div>
                                 <small class="text-muted">검색어와 일치하는 라인만 표시됩니다. 실시간으로 필터링됩니다.</small>
                             </div>
                            <div class="border rounded p-3" style="height: 400px; overflow-y: auto; background-color: #f8f9fa; font-family: monospace; font-size: 0.9rem;">
                                <pre id="logContent" class="mb-0"></pre>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                            <button type="button" class="btn btn-primary" onclick="downloadCurrentLog()">다운로드</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="toast-container" id="toastContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 현재 설정 로드
        async function loadSettings() {
            try {
                const response = await fetch('/api/settings');
                if (response.ok) {
                    const settings = await response.json();
                    
                    // 기본 컬러 설정 로드
                    const homeColor = settings.default_home_color || '#1e40af';
                    const awayColor = settings.default_away_color || '#1e40af';
                    
                    const homeColorInput = document.getElementById('default-home-color');
                    const awayColorInput = document.getElementById('default-away-color');
                    
                    if (homeColorInput) {
                        homeColorInput.value = homeColor;
                    updateColorPreview('home', homeColor);
                    }
                    if (awayColorInput) {
                        awayColorInput.value = awayColor;
                    updateColorPreview('away', awayColor);
                    }
                }
            } catch (error) {
                console.error('설정 로드 실패:', error);
                showToast('설정 로드에 실패했습니다.', 'error');
            }
        }
        
        // 컬러 미리보기 업데이트
        function updateColorPreview(type, color) {
            const preview = document.getElementById(`${type}-color-preview`);
            preview.style.backgroundColor = color;
            preview.textContent = color.toUpperCase();
        }
        
        // 설정 저장
        async function saveSettings() {
            const homeColor = document.getElementById('default-home-color').value;
            const awayColor = document.getElementById('default-away-color').value;
            
            try {
                const response = await fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        default_home_color: homeColor,
                        default_away_color: awayColor
                    })
                });
                
                if (response.ok) {
                    showToast('설정이 성공적으로 저장되었습니다.', 'success');
                } else {
                    throw new Error('설정 저장 실패');
                }
            } catch (error) {
                console.error('설정 저장 실패:', error);
                showToast('설정 저장에 실패했습니다.', 'error');
            }
        }
        
        // 토스트 메시지 표시
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-body">
                    ${message}
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // 3초 후 제거
            setTimeout(() => {
                toast.style.animation = 'fadeOut 0.3s ease-in-out';
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }
        
        // 로그 데이터 새로고침 (로그 파일 목록 + 자동 관리 상태)
        async function refreshLogData() {
            await loadLogFiles();
            await loadAutoManagementStatus();
        }

        // 자동 로그 관리 상태 로드
        async function loadAutoManagementStatus() {
            try {
                const response = await fetch('/api/logs/auto-management-status');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.data) {
                        const status = data.data;
                        
                        // 자동 백업 상태 업데이트
                        const backupCountEl = document.getElementById('backupCount');
                        const currentLogSizeEl = document.getElementById('currentLogSize');
                        const totalBackupSizeEl = document.getElementById('totalBackupSize');
                        const maxLogSizeEl = document.getElementById('maxLogSize');
                        const retentionDaysEl = document.getElementById('retentionDays');
                        
                        if (backupCountEl) backupCountEl.textContent = status.current.backupCount;
                        if (currentLogSizeEl) currentLogSizeEl.textContent = `${status.current.currentLogSizeMB} MB`;
                        if (totalBackupSizeEl) totalBackupSizeEl.textContent = `${status.current.totalBackupSizeMB} MB`;
                        if (maxLogSizeEl) maxLogSizeEl.textContent = `${status.config.maxLogSizeMB} MB`;
                        if (retentionDaysEl) retentionDaysEl.textContent = `${status.config.backupRetentionDays}일`;
                        
                        // 자동 백업 상태 표시
                        const autoBackupStatus = document.getElementById('autoBackupStatus');
                        if (autoBackupStatus) {
                            if (status.current.backupCount > 0) {
                                autoBackupStatus.textContent = '활성화';
                                autoBackupStatus.className = 'text-success mb-1';
                            } else {
                                autoBackupStatus.textContent = '대기 중';
                                autoBackupStatus.className = 'text-warning mb-1';
                            }
                        }
                    }
                } else {
                    console.warn('자동 로그 관리 상태 API 응답 오류:', response.status);
                }
            } catch (error) {
                console.warn('자동 로그 관리 상태 로드 실패 (무시됨):', error);
                // 에러가 발생해도 페이지는 정상 작동하도록 무시
            }
        }

        // 로그 파일 목록 로드
        async function loadLogFiles() {
            try {
                const response = await fetch('/api/logs');
                if (response.ok) {
                    const data = await response.json();
                    const logFilesList = document.getElementById('logFilesList');
                    
                    // 관리자만 로그 파일 목록 표시
                    if (!isAdmin || !logFilesList) {
                        return;
                    }
                    
                    if (data.logs && data.logs.length > 0) {
                        let html = '<div class="list-group">';
                        data.logs.forEach(log => {
                            html += `
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>${log.name}</strong>
                                        <br><small class="text-muted">${log.sizeMB} MB • ${new Date(log.modified).toLocaleString()}</small>
                                    </div>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="downloadLog('${log.name}')">
                                            <i class="bi bi-download"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" onclick="clearLog('${log.name}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                        logFilesList.innerHTML = html;
                        
                        // 로그 상태 요약 업데이트
                        updateLogSummary(data.logs);
                        
                        // 로그 파일 선택 옵션 업데이트
                        updateLogFileSelect(data.logs);
                    } else {
                        logFilesList.innerHTML = '<div class="text-center text-muted">로그 파일이 없습니다.</div>';
                        updateLogSummary([]);
                        updateLogFileSelect([]);
                    }
                } else {
                    throw new Error('로그 파일 목록 로드 실패');
                }
            } catch (error) {
                console.error('로그 파일 목록 로드 실패:', error);
                showToast('로그 파일 목록 로드에 실패했습니다.', 'error');
            }
        }

        // 로그 상태 요약 업데이트
        function updateLogSummary(logs) {
            if (logs.length === 0) {
                document.getElementById('totalLogFiles').textContent = '0';
                document.getElementById('totalLogSize').textContent = '0 MB';
                document.getElementById('oldestLog').textContent = '-';
                document.getElementById('newestLog').textContent = '-';
                return;
            }

            const totalSize = logs.reduce((sum, log) => sum + parseFloat(log.sizeMB), 0);
            const dates = logs.map(log => new Date(log.modified)).sort((a, b) => a - b);
            
            document.getElementById('totalLogFiles').textContent = logs.length;
            document.getElementById('totalLogSize').textContent = `${totalSize.toFixed(2)} MB`;
            document.getElementById('oldestLog').textContent = dates[0].toLocaleDateString();
            document.getElementById('newestLog').textContent = dates[dates.length - 1].toLocaleDateString();
        }

        // 로그 파일 선택 옵션 업데이트
        function updateLogFileSelect(logs) {
            const select = document.getElementById('logFileSelect');
            select.innerHTML = '<option value="">로그 파일을 선택하세요</option>';
            
            logs.forEach(log => {
                const option = document.createElement('option');
                option.value = log.name;
                option.textContent = `${log.name} (${log.sizeMB} MB)`;
                select.appendChild(option);
            });
        }

        // 로그 파일 다운로드
        async function downloadLog(filename) {
            try {
                window.open(`/api/logs/${filename}`, '_blank');
                showToast(`${filename} 다운로드가 시작되었습니다.`, 'success');
            } catch (error) {
                console.error('로그 다운로드 실패:', error);
                showToast('로그 다운로드에 실패했습니다.', 'error');
            }
        }

        // 로그 파일 초기화
        async function clearLog(filename) {
            if (!confirm(`정말로 ${filename} 파일의 내용을 초기화하시겠습니까?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/logs/${filename}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showToast(`${filename} 파일의 내용이 초기화되었습니다.`, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('로그 파일 초기화 실패');
                }
            } catch (error) {
                console.error('로그 파일 초기화 실패:', error);
                showToast('로그 파일 초기화에 실패했습니다.', 'error');
            }
        }

        // 로그 백업
        async function backupLogs() {
            try {
                const response = await fetch('/api/logs/backup', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                } else {
                    throw new Error('로그 백업 실패');
                }
            } catch (error) {
                console.error('로그 백업 실패:', error);
                showToast('로그 백업에 실패했습니다.', 'error');
            }
        }

        // 오래된 로그 정리
        async function cleanupLogs() {
            const days = prompt('몇 일 이전의 로그를 삭제하시겠습니까? (기본값: 30일)', '30');
            if (!days) return;
            
            try {
                const response = await fetch('/api/logs/cleanup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ days: parseInt(days) })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('로그 정리 실패');
                }
            } catch (error) {
                console.error('로그 정리 실패:', error);
                showToast('로그 정리에 실패했습니다.', 'error');
            }
        }

        // 모든 로그 다운로드
        async function downloadAllLogs() {
            try {
                const response = await fetch('/api/logs');
                if (response.ok) {
                    const data = await response.json();
                    if (data.logs && data.logs.length > 0) {
                        data.logs.forEach(log => {
                            setTimeout(() => {
                                downloadLog(log.name);
                            }, 500); // 0.5초 간격으로 다운로드
                        });
                        showToast('모든 로그 파일 다운로드가 시작되었습니다.', 'success');
                    } else {
                        showToast('다운로드할 로그 파일이 없습니다.', 'warning');
                    }
                } else {
                    throw new Error('로그 파일 목록 로드 실패');
                }
            } catch (error) {
                console.error('모든 로그 다운로드 실패:', error);
                showToast('모든 로그 다운로드에 실패했습니다.', 'error');
            }
        }

        // 모든 로그 초기화
        async function clearAllLogs() {
            if (!confirm('정말로 모든 로그 파일의 내용을 초기화하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/logs/clear-all', {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('모든 로그 초기화 실패');
                }
            } catch (error) {
                console.error('모든 로그 초기화 실패:', error);
                showToast('모든 로그 초기화에 실패했습니다.', 'error');
            }
        }

        // 로그 내용 보기 모달 열기
        function viewLogContent() {
            const modal = new bootstrap.Modal(document.getElementById('logContentModal'));
            modal.show();
        }

        // 원본 로그 내용 저장 변수
        let originalLogContent = '';

        // 로그 내용 로드
        async function loadLogContent() {
            const filename = document.getElementById('logFileSelect').value;
            if (!filename) {
                document.getElementById('logContent').textContent = '로그 파일을 선택하세요.';
                originalLogContent = '';
                return;
            }
            
            try {
                const response = await fetch(`/api/logs/${filename}/content`);
                if (response.ok) {
                    const data = await response.json();
                    originalLogContent = data.content;
                    document.getElementById('logContent').textContent = originalLogContent;
                    
                    // 검색어가 있으면 필터링 적용
                    const searchTerm = document.getElementById('logSearchInput').value;
                    if (searchTerm) {
                        filterLogContent();
                    }
                } else {
                    document.getElementById('logContent').textContent = '로그 내용을 불러올 수 없습니다.';
                    originalLogContent = '';
                }
            } catch (error) {
                console.error('로그 내용 로드 실패:', error);
                document.getElementById('logContent').textContent = '로그 내용을 불러오는 중 오류가 발생했습니다.';
                originalLogContent = '';
            }
        }

        // 로그 내용 필터링 (검색어와 일치하는 라인만 표시)
        function filterLogContent() {
            const searchTerm = document.getElementById('logSearchInput').value.toLowerCase();
            const logContent = document.getElementById('logContent');
            
            if (!searchTerm) {
                // 검색어가 없으면 전체 내용 표시
                logContent.textContent = originalLogContent;
                return;
            }
            
            if (!originalLogContent) {
                return;
            }
            
            // 라인별로 분리하여 검색어가 포함된 라인만 필터링
            const lines = originalLogContent.split('\n');
            const filteredLines = lines.filter(line => 
                line.toLowerCase().includes(searchTerm)
            );
            
            if (filteredLines.length > 0) {
                // 검색어가 포함된 라인들을 하이라이트하여 표시
                const highlightedLines = filteredLines.map(line => {
                    const regex = new RegExp(`(${searchTerm})`, 'gi');
                    return line.replace(regex, '<mark>$1</mark>');
                });
                
                logContent.innerHTML = highlightedLines.join('\n');
            } else {
                logContent.innerHTML = '<span class="text-muted">검색어와 일치하는 내용이 없습니다.</span>';
            }
        }

        // 로그 내용 검색 (실시간 필터링)
        function searchLogContent() {
            filterLogContent();
        }

        // 검색 초기화
        function clearSearch() {
            document.getElementById('logSearchInput').value = '';
            filterLogContent();
        }

        // 현재 로그 파일 다운로드
        function downloadCurrentLog() {
            const filename = document.getElementById('logFileSelect').value;
            if (filename) {
                downloadLog(filename);
            } else {
                showToast('다운로드할 로그 파일을 선택하세요.', 'warning');
            }
        }

        // 기존 공통 오버레이 이미지 업로드 이벤트 리스너는 제거됨 (종목별 이미지로 대체)

        // 기존 공통 오버레이 이미지 관련 함수들은 제거됨 (종목별 이미지로 대체)

        // 종목별 오버레이 디자인 설정 관련 변수
        let currentDesign = {};
        let defaultDesign = {};
        let selectedElement = 'scoreboard';
        let currentSportCode = 'SOCCER'; // 기본값

        // 종목별 오버레이 디자인 설정 로드
        async function loadSportOverlayDesign(sportCode = 'SOCCER') {
            try {
                currentSportCode = sportCode;
                const response = await fetch(`/api/sport-overlay-design/${sportCode}`);
                const result = await response.json();
                
                if (result.success) {
                    currentDesign = result.design;
                    defaultDesign = result.default;
                    selectElement();
                    updateOverlayDesignTitle(sportCode);
                }
            } catch (error) {
                console.error(`${sportCode} 오버레이 디자인 설정 로드 오류:`, error);
                showToast('디자인 설정을 불러올 수 없습니다.', 'error');
            }
        }

        // 축구 오버레이 디자인 설정 로드 (기존 호환성 유지)
        async function loadSoccerOverlayDesign() {
            await loadSportOverlayDesign('SOCCER');
        }

        // 오버레이 디자인 제목 업데이트
        function updateOverlayDesignTitle(sportCode) {
            const titleElement = document.getElementById('overlayDesignTitle');
            const descriptionElement = document.getElementById('overlayDesignDescription');
            
            if (titleElement) {
                titleElement.textContent = `${sportCode} 오버레이 디자인 설정`;
            }
            
            if (descriptionElement) {
                descriptionElement.textContent = `${sportCode} 오버레이 페이지의 각 요소들의 위치를 조정할 수 있습니다. 설정 후 오버레이 페이지에서 변경사항을 확인할 수 있습니다.`;
            }
        }



        // 요소 선택
        function selectElement() {
            const elementSelect = document.getElementById('elementSelect');
            if (!elementSelect) {
                return; // 관리자가 아닌 경우 요소가 없으므로 함수 종료
            }
            selectedElement = elementSelect.value;
            
            // 모든 요소의 선택 상태 제거
            document.querySelectorAll('.preview-element').forEach(el => {
                el.classList.remove('selected');
            });
            
            // 선택된 요소 하이라이트 (작은 미리보기)
            const selectedPreviewSmall = document.getElementById(`soccerOverlayPreviewSmall-${selectedElement}`);
            if (selectedPreviewSmall) {
                selectedPreviewSmall.classList.add('selected');
            }
            
            // 선택된 요소 하이라이트 (큰 미리보기)
            const selectedPreviewFull = document.getElementById(`soccerOverlayPreviewFull-${selectedElement}`);
            if (selectedPreviewFull) {
                selectedPreviewFull.classList.add('selected');
            }
        }





        // 디자인 설정 저장
        async function saveDesignSettings() {
            try {
                const response = await fetch(`/api/sport-overlay-design/${currentSportCode}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ design: currentDesign })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || '저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('디자인 설정 저장 오류:', error);
                showToast('저장 중 오류가 발생했습니다.', 'error');
            }
        }


        // 이미지 미리보기 함수
        function previewImage(imagePath, filename) {
            const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
            const titleElement = document.getElementById('imagePreviewTitle');
            const imgElement = document.getElementById('imagePreviewImg');
            
            titleElement.textContent = `이미지 미리보기 - ${filename}`;
            imgElement.src = imagePath;
            imgElement.alt = filename;
            
            modal.show();
        }

        // 디자인 설정 초기화
        async function resetDesignSettings() {
            if (!confirm('정말로 기본값으로 초기화하시겠습니까?')) {
                return;
            }
            
            try {
                const response = await fetch('/api/soccer-overlay-design/reset', {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    loadSoccerOverlayDesign(); // 설정 다시 로드
                } else {
                    showToast(result.message || '초기화에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('디자인 설정 초기화 오류:', error);
                showToast('초기화 중 오류가 발생했습니다.', 'error');
            }
        }

        // 경기 상태 표시 설정 로드
        async function loadMatchStateSettings() {
            try {
                const response = await fetch('/api/soccer-match-state-visibility');
                const result = await response.json();
                
                if (result.success) {
                    const showMatchState = document.getElementById('showMatchState');
                    if (showMatchState) {
                    showMatchState.checked = result.showMatchState;
                    }
                }
            } catch (error) {
                console.error('경기 상태 표시 설정 로드 오류:', error);
            }
        }

        // 경기 상태 표시 설정 저장
        async function saveMatchStateSettings() {
            try {
                const showMatchState = document.getElementById('showMatchState').checked;
                
                const response = await fetch('/api/soccer-match-state-visibility', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ showMatchState: showMatchState })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('경기 상태 표시 설정이 저장되었습니다.', 'success');
                } else {
                    showToast(result.message || '저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('경기 상태 표시 설정 저장 오류:', error);
                showToast('저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 종목 목록 로드
        async function loadSports() {
            try {
                const response = await fetch('/api/sport');
                const sports = await response.json();
                
                const sportSelect = document.getElementById('sportSelect');
                sportSelect.innerHTML = '<option value="">종목을 선택하세요</option>';
                
                // 기본 종목 코드 (일반 사용자는 선택할 수 없음)
                const defaultSports = ['SOCCER', 'VOLLEYBALL', 'BASEBALL'];
                
                // 사용자 권한 확인 (전역 변수 사용)
                
                sports.forEach(sport => {
                    // 관리자가 아니고 기본 종목인 경우 제외
                    if (!isAdmin && defaultSports.includes(sport.code)) {
                        return;
                    }
                    
                    const option = document.createElement('option');
                    option.value = sport.code;
                    option.textContent = sport.name;
                    sportSelect.appendChild(option);
                });
            } catch (error) {
                console.error('종목 목록 로드 오류:', error);
            }
        }

        // 종목별 오버레이 이미지 목록 로드
        async function loadSportOverlayImagesWithActive() {
            const sportSelect = document.getElementById('sportSelect');
            const sportCode = sportSelect.value;
            
            console.log('🔍 종목 선택됨:', sportCode);
            
            if (!sportCode) {
                console.log('❌ 종목이 선택되지 않음');
                document.getElementById('sportImageManagement').style.display = 'none';
                return;
            }
            
            try {
                // 캐시 우회를 위해 타임스탬프 추가
                const timestamp = new Date().getTime();
                const response = await fetch(`/api/overlay-images/list/${sportCode}?t=${timestamp}`);
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ API 응답 성공:', result);
                    
                    // 종목 이름 업데이트
                    document.getElementById('selectedSportName2').textContent = result.sportName;
                    document.getElementById('selectedSportName3').textContent = result.sportName;
                    document.getElementById('selectedSportCode').value = sportCode;
                    
                    // 이미지 관리 섹션 표시
                    console.log('🔧 이미지 관리 섹션 표시');
                    document.getElementById('sportImageManagement').style.display = 'block';
                    
                    
                    // 이미지 목록 렌더링
                    const imagesList = document.getElementById('sportOverlayImagesList');
                    
                    if (result.images.length === 0) {
                        imagesList.innerHTML = `
                            <div class="col-12 text-center text-muted">
                                <i class="bi bi-image"></i> 업로드된 이미지가 없습니다.
                            </div>
                        `;
                    } else {
                        imagesList.innerHTML = `
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>파일명</th>
                                            <th>상태</th>
                                            <th>업로드 시간</th>
                                            <th>활성화</th>
                                            <th>액션</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${result.images.map(image => `
                                            <tr class="${image.id == result.activeImageId ? 'table-primary' : ''}">
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <i class="bi bi-file-image me-2 text-muted"></i>
                                                        <span class="fw-medium">${decodeKoreanFilename(image.filename)}</span>
                                                        ${image.id == result.activeImageId ? '<span class="badge bg-primary ms-2">현재 사용 중</span>' : ''}
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge ${image.is_active ? 'bg-success' : 'bg-secondary'}">
                                                        ${image.is_active ? '활성화' : '비활성화'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <small class="text-muted">${new Date(image.upload_time).toLocaleString()}</small>
                                                </td>
                                                <td>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" 
                                                               ${image.is_active ? 'checked' : ''} 
                                                               onchange="toggleImageStatus('${sportCode}', '${image.filename}', this.checked)">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button class="btn btn-outline-info" onclick="previewImage('${image.file_path}', '${image.filename}')" title="미리보기">
                                                            <i class="bi bi-eye"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" onclick="deleteSportOverlayImage('${sportCode}', '${image.filename}')" title="삭제">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                    }
                } else {
                    console.log('❌ API 응답 실패:', result);
                    showToast(result.message || '이미지 목록을 불러오는데 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('💥 종목별 오버레이 이미지 목록 로드 오류:', error);
                showToast('이미지 목록을 불러오는데 실패했습니다.', 'error');
            }
        }


        // 종목별 오버레이 이미지 목록 로드 (기존 함수 유지)
        async function loadSportOverlayImages() {
            await loadSportOverlayImagesWithActive();
            
            // 선택된 종목의 디자인 설정도 함께 로드
            const sportSelect = document.getElementById('sportSelect');
            const selectedSportCode = sportSelect.value;
            if (selectedSportCode) {
                await loadSportOverlayDesign(selectedSportCode);
            }
        }

        // 한글 파일명 디코딩 함수 (브라우저 호환 버전)
        function decodeKoreanFilename(filename) {
            try {
                // 깨진 파일명인지 확인
                if (filename.includes('ì') || filename.includes('ë') || filename.includes('í') || 
                    filename.includes('â') || filename.includes('ê') || filename.includes('ô')) {
                    
                    // 브라우저 환경에서 한글 파일명 디코딩
                    let decoded = filename;
                    try {
                        // URL 디코딩 시도
                        decoded = decodeURIComponent(filename);
                    } catch (e) {
                        // URL 디코딩 실패 시 원본 반환
                        console.log(`🔧 URL 디코딩 실패, 원본 사용: ${filename}`);
                        return filename;
                    }
                    
                    console.log(`🔧 클라이언트 파일명 디코딩: ${filename} -> ${decoded}`);
                    return decoded;
                }
                return filename;
            } catch (error) {
                console.error('🔧 클라이언트 파일명 디코딩 실패:', error);
                return filename;
            }
        }

        // 중복 파일명 확인 함수
        async function checkDuplicateFile(sportCode, filename) {
            try {
                const response = await fetch(`/api/overlay-images/status/${sportCode}/${filename}`);
                const result = await response.json();
                
                if (result.success) {
                    return {
                        exists: result.exists || false,
                        isActive: result.isActive || false,
                        filename: filename
                    };
                } else {
                    return { exists: false };
                }
            } catch (error) {
                console.error('중복 파일명 확인 오류:', error);
                return { exists: false };
            }
        }

        // 종목별 오버레이 이미지 업로드
        document.getElementById('sportOverlayImageForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const sportCode = formData.get('sportCode');
            const fileInput = document.getElementById('sportOverlayImage');
            const file = fileInput.files[0];
            
            console.log('🔧 FormData에서 추출된 sportCode:', sportCode);
            console.log('🔧 selectedSportCode input 값:', document.getElementById('selectedSportCode').value);
            
            // selectedSportCode input에서 직접 가져오기
            const directSportCode = document.getElementById('selectedSportCode').value;
            
            if (!sportCode && !directSportCode) {
                showToast('종목을 선택해주세요.', 'error');
                return;
            }
            
            // sportCode가 없으면 직접 가져온 값 사용
            const finalSportCode = sportCode || directSportCode;
            
            if (!file) {
                showToast('파일을 선택해주세요.', 'error');
                return;
            }
            
            // 언더바가 포함된 파일명 체크
            if (file.name.includes('_')) {
                alert('❌ 파일 업로드 불가\n\n파일명에 언더바(_)가 포함된 파일은 업로드할 수 없습니다.\n\n파일명을 변경한 후 다시 시도해주세요.\n\n예시:\n❌ 잘못된 파일명: 충청북도생활체육_bg.png\n✅ 올바른 파일명: 충청북도생활체육bg.png');
                return;
            }
            
            // FormData에 sportCode 명시적으로 추가
            formData.set('sportCode', finalSportCode);
            
            // 중복 파일명 확인
            const duplicateCheck = await checkDuplicateFile(finalSportCode, file.name);
            
            if (duplicateCheck.exists) {
                // 중복 파일이 있는 경우 덮어쓰기 확인
                const isActive = duplicateCheck.isActive;
                const message = isActive 
                    ? `"${file.name}" 파일이 이미 존재하고 현재 사용 중입니다.\n기존 파일을 삭제하고 새 파일로 덮어쓰시겠습니까?`
                    : `"${file.name}" 파일이 이미 존재합니다.\n기존 파일을 삭제하고 새 파일로 덮어쓰시겠습니까?`;
                
                if (!confirm(message)) {
                    showToast('업로드가 취소되었습니다.', 'info');
                    return;
                }
            }
            
            try {
                console.log('🔧 업로드 요청 데이터:', {
                    sportCode: finalSportCode,
                    fileName: file.name,
                    fileSize: file.size
                });
                
                const response = await fetch(`/api/overlay-images/upload/${finalSportCode}`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    this.reset();
                    loadSportOverlayImagesWithActive(); // 목록 새로고침
                } else {
                    showToast(result.message || '업로드에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('종목별 오버레이 이미지 업로드 오류:', error);
                showToast('업로드 중 오류가 발생했습니다.', 'error');
            }
        });

        // 종목별 오버레이 이미지 삭제
        async function deleteSportOverlayImage(sportCode, filename) {
            if (!confirm('정말로 이 이미지를 삭제하시겠습니까?')) {
                return;
            }
            
            try {
                // 파일명을 URL 인코딩하여 전달
                const encodedFilename = encodeURIComponent(filename);
                const response = await fetch(`/api/overlay-images/delete/${sportCode}/${encodedFilename}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    loadSportOverlayImagesWithActive(); // 목록 새로고침 (활성 이미지 포함)
                } else {
                    showToast(result.message || '삭제에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('종목별 오버레이 이미지 삭제 오류:', error);
                showToast('삭제 중 오류가 발생했습니다.', 'error');
            }
        }

        // 종목별 오버레이 이미지 활성화/비활성화 (디바운싱 적용)
        let toggleTimeout = null;
        async function toggleImageStatus(sportCode, filename, isActive) {
            console.log('🔧 슬라이드 버튼 클릭됨:', { sportCode, filename, isActive });
            
            // 이전 타이머가 있으면 취소
            if (toggleTimeout) {
                clearTimeout(toggleTimeout);
                console.log('⏰ 이전 타이머 취소됨');
            }
            
            // 500ms 후에 API 호출 (디바운싱)
            toggleTimeout = setTimeout(async () => {
                console.log('🚀 API 호출 시작:', `/api/overlay-images/status/${sportCode}/${filename}`);
                try {
                    const response = await fetch(`/api/overlay-images/status/${sportCode}/${filename}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isActive: isActive })
                    });
                    
                    console.log('📡 API 응답 상태:', response.status);
                    const result = await response.json();
                    console.log('📄 API 응답 데이터:', result);
                    
                    if (result.success) {
                        console.log('✅ 상태 변경 성공:', result.message);
                        showToast(result.message, 'success');
                        // 목록 새로고침
                        console.log('🔄 목록 새로고침 시작');
                        loadSportOverlayImagesWithActive();
                    } else {
                        console.log('❌ 상태 변경 실패:', result.message);
                        showToast(result.message || '상태 변경에 실패했습니다.', 'error');
                    }
                } catch (error) {
                    console.error('💥 종목별 오버레이 이미지 상태 변경 오류:', error);
                    showToast('상태 변경 중 오류가 발생했습니다.', 'error');
                }
            }, 500);
        }



        // 전역 변수 정의
        const isAdmin = <% if (typeof userRole !== 'undefined' && userRole === 'admin') { %>true<% } else { %>false<% } %>;

        // 이벤트 리스너
        document.addEventListener('DOMContentLoaded', function() {
            loadSettings();
            loadLogFiles(); // 로그 파일 목록 로드
            loadAutoManagementStatus(); // 자동 로그 관리 상태 로드
            loadSportOverlayDesign('SOCCER'); // 기본 종목(축구) 오버레이 디자인 설정 로드
            loadMatchStateSettings(); // 경기 상태 표시 설정 로드
            loadSports(); // 종목 목록 로드
            
            // 관리자만 백업 목록 로드
            if (isAdmin) {
                loadBackupList(); // 백업 목록 로드
            }
            
            // 컬러 변경 이벤트
            const homeColorInput = document.getElementById('default-home-color');
            if (homeColorInput) {
                homeColorInput.addEventListener('change', function() {
                updateColorPreview('home', this.value);
            });
            }
            
            const awayColorInput = document.getElementById('default-away-color');
            if (awayColorInput) {
                awayColorInput.addEventListener('change', function() {
                updateColorPreview('away', this.value);
            });
            }
            
            // 경기 상태 표시 설정 변경 이벤트
            const showMatchStateInput = document.getElementById('showMatchState');
            if (showMatchStateInput) {
                showMatchStateInput.addEventListener('change', function() {
                saveMatchStateSettings();
            });
            }
            
            // 저장 버튼 이벤트
            const saveSettingsBtn = document.getElementById('save-settings');
            if (saveSettingsBtn) {
                saveSettingsBtn.addEventListener('click', saveSettings);
            }

            // 백업/복원 관련 이벤트 리스너 (관리자만)
            if (isAdmin) {
                const createBackupBtn = document.getElementById('create-backup-btn');
                if (createBackupBtn) {
                    createBackupBtn.addEventListener('click', createBackup);
                }
                
                const refreshBackupListBtn = document.getElementById('refresh-backup-list');
                if (refreshBackupListBtn) {
                    refreshBackupListBtn.addEventListener('click', loadBackupList);
                }

                // DB 초기화 관련 이벤트 리스너
                const resetConfirmCheckboxes = document.querySelectorAll('#reset-confirm-1, #reset-confirm-2, #reset-confirm-3');
                const resetDatabaseBtn = document.getElementById('reset-database-btn');
                
                if (resetConfirmCheckboxes.length === 3 && resetDatabaseBtn) {
                    // 체크박스 상태 확인
                    function checkResetConfirmation() {
                        const allChecked = Array.from(resetConfirmCheckboxes).every(cb => cb.checked);
                        resetDatabaseBtn.disabled = !allChecked;
                    }
                    
                    resetConfirmCheckboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', checkResetConfirmation);
                    });
                    
                    resetDatabaseBtn.addEventListener('click', resetDatabase);
                }
                
                // 파일 업로드 이벤트
                const backupFileInput = document.getElementById('backup-file-input');
                if (backupFileInput) {
                    backupFileInput.addEventListener('change', function() {
                        updateRestoreButtonState();
                    });
                }
                
                // 서버 백업 선택 이벤트
                const restoreBackupSelect = document.getElementById('restore-backup-select');
                if (restoreBackupSelect) {
                    restoreBackupSelect.addEventListener('change', function() {
                        updateRestoreButtonState();
                    });
                }
                
                const restoreBackupBtn = document.getElementById('restore-backup-btn');
                if (restoreBackupBtn) {
                    restoreBackupBtn.addEventListener('click', restoreBackup);
                }
            }
        });

        // 복원 버튼 상태 업데이트
        function updateRestoreButtonState() {
            const fileInput = document.getElementById('backup-file-input');
            const serverSelect = document.getElementById('restore-backup-select');
            const restoreBtn = document.getElementById('restore-backup-btn');
            
            if (!fileInput || !serverSelect || !restoreBtn) return;
            
            const hasFile = fileInput.files.length > 0;
            const hasServerBackup = serverSelect.value !== '';
            
            // 파일과 서버 백업을 동시에 선택한 경우 비활성화
            if (hasFile && hasServerBackup) {
                restoreBtn.disabled = true;
                restoreBtn.title = '파일 업로드와 서버 백업 중 하나만 선택해주세요';
            } else if (hasFile || hasServerBackup) {
                restoreBtn.disabled = false;
                restoreBtn.title = '';
            } else {
                restoreBtn.disabled = true;
                restoreBtn.title = '백업 파일을 업로드하거나 서버의 백업을 선택해주세요';
            }
        }

        // 백업 생성
        async function createBackup() {
            const btn = document.getElementById('create-backup-btn');
            const progress = document.getElementById('backup-progress');
            const progressBar = progress.querySelector('.progress-bar');
            const progressText = progress.querySelector('small');
            const backupNameInput = document.getElementById('backup-name-input');
            
            try {
                // 백업 이름 가져오기
                const backupName = backupNameInput.value.trim();
                
                // UI 상태 변경
                btn.disabled = true;
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> 백업 생성 중...';
                progress.style.display = 'block';
                progressBar.style.width = '0%';
                progressText.textContent = '백업 생성 중...';
                
                // 진행률 애니메이션 시작
                let progressValue = 0;
                const progressInterval = setInterval(() => {
                    progressValue += Math.random() * 15;
                    if (progressValue > 90) progressValue = 90;
                    progressBar.style.width = progressValue + '%';
                }, 200);
                
                const response = await fetch('/api/backup/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: backupName || undefined // 빈 문자열이면 undefined로 전송
                    })
                });
                
                // 진행률 완료
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                progressText.textContent = '백업 생성 완료!';
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(`백업이 성공적으로 생성되었습니다. (${formatFileSize(result.size)})`, 'success');
                    loadBackupList(); // 백업 목록 새로고침
                    backupNameInput.value = ''; // 입력 필드 초기화
                } else {
                    showToast(result.error || '백업 생성에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('백업 생성 오류:', error);
                showToast('백업 생성 중 오류가 발생했습니다.', 'error');
            } finally {
                // UI 상태 복원
                btn.disabled = false;
                btn.innerHTML = '<i class="bi bi-download"></i> 백업 생성';
                setTimeout(() => {
                    progress.style.display = 'none';
                }, 1000);
            }
        }

        // 백업 목록 로드
        async function loadBackupList() {
            const container = document.getElementById('backup-list-container');
            const select = document.getElementById('restore-backup-select');
            
            try {
                container.innerHTML = '<div class="text-center text-muted"><i class="bi bi-hourglass-split"></i> 백업 목록을 불러오는 중...</div>';
                
                const response = await fetch('/api/backup/list');
                const backupList = await response.json();
                
                if (backupList.length === 0) {
                    container.innerHTML = '<div class="text-center text-muted"><i class="bi bi-inbox"></i> 생성된 백업이 없습니다.</div>';
                    select.innerHTML = '<option value="">백업을 선택하세요</option>';
                    return;
                }
                
                // 백업 목록 표시
                let html = '<div class="table-responsive"><table class="table table-sm">';
                html += '<thead><tr><th>파일명</th><th>크기</th><th>생성일</th><th>작업</th></tr></thead><tbody>';
                
                // 복원 선택 옵션 초기화
                select.innerHTML = '<option value="">백업을 선택하세요</option>';
                
                backupList.forEach(backup => {
                    const fileName = backup.fileName;
                    const size = formatFileSize(backup.size);
                    const created = new Date(backup.created).toLocaleString('ko-KR');
                    
                    html += `<tr>
                        <td><code>${fileName}</code></td>
                        <td>${size}</td>
                        <td>${created}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="/api/backup/download/${fileName}" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-download"></i> 다운로드
                                </a>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteBackup('${fileName}')">
                                    <i class="bi bi-trash"></i> 삭제
                                </button>
                            </div>
                        </td>
                    </tr>`;
                    
                    // 복원 선택 옵션 추가
                    select.innerHTML += `<option value="${fileName}">${fileName} (${size})</option>`;
                });
                
                html += '</tbody></table></div>';
                container.innerHTML = html;
                
            } catch (error) {
                console.error('백업 목록 로드 오류:', error);
                container.innerHTML = '<div class="text-center text-danger"><i class="bi bi-exclamation-triangle"></i> 백업 목록을 불러오는데 실패했습니다.</div>';
            }
        }

        // 백업 삭제
        async function deleteBackup(fileName) {
            if (!confirm(`백업 파일 "${fileName}"을(를) 삭제하시겠습니까?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/backup/${fileName}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('백업 파일이 삭제되었습니다.', 'success');
                    loadBackupList(); // 목록 새로고침
                } else {
                    showToast(result.error || '백업 파일 삭제에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('백업 삭제 오류:', error);
                showToast('백업 파일 삭제 중 오류가 발생했습니다.', 'error');
            }
        }

        // 백업 복원
        async function restoreBackup() {
            const fileInput = document.getElementById('backup-file-input');
            const serverSelect = document.getElementById('restore-backup-select');
            const selectedFile = fileInput.files[0];
            const selectedServerBackup = serverSelect.value;
            
            // 파일 업로드 또는 서버 백업 선택 확인
            if (!selectedFile && !selectedServerBackup) {
                showToast('백업 파일을 업로드하거나 서버의 백업을 선택해주세요.', 'warning');
                return;
            }
            
            // 파일과 서버 백업을 동시에 선택한 경우
            if (selectedFile && selectedServerBackup) {
                showToast('파일 업로드와 서버 백업 중 하나만 선택해주세요.', 'warning');
                return;
            }
            
            const backupName = selectedFile ? selectedFile.name : selectedServerBackup;
            
            if (!confirm(`백업 "${backupName}"을(를) 복원하시겠습니까?\n\n주의: 현재의 모든 사용자 데이터가 삭제되고 백업된 데이터로 교체됩니다.`)) {
                return;
            }
            
            const btn = document.getElementById('restore-backup-btn');
            const progress = document.getElementById('restore-progress');
            const progressBar = progress.querySelector('.progress-bar');
            const progressText = progress.querySelector('small');
            
            try {
                // UI 상태 변경
                btn.disabled = true;
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> 복원 중...';
                progress.style.display = 'block';
                progressBar.style.width = '0%';
                progressText.textContent = '백업 복원 중...';
                
                // 진행률 애니메이션 시작
                let progressValue = 0;
                const progressInterval = setInterval(() => {
                    progressValue += Math.random() * 10;
                    if (progressValue > 85) progressValue = 85;
                    progressBar.style.width = progressValue + '%';
                }, 300);
                
                let response;
                
                if (selectedFile) {
                    // 파일 업로드 방식
                    const formData = new FormData();
                    formData.append('backupFile', selectedFile);
                    
                    response = await fetch('/api/backup/restore', {
                        method: 'POST',
                        body: formData
                    });
                } else {
                    // 서버 백업 선택 방식 (기존 방식)
                    response = await fetch('/api/backup/restore', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ fileName: selectedServerBackup })
                    });
                }
                
                // 진행률 완료
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                progressText.textContent = '백업 복원 완료!';
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('백업 복원이 완료되었습니다. 페이지를 새로고침합니다.', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showToast(result.error || '백업 복원에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('백업 복원 오류:', error);
                showToast('백업 복원 중 오류가 발생했습니다.', 'error');
            } finally {
                // UI 상태 복원
                btn.disabled = false;
                btn.innerHTML = '<i class="bi bi-upload"></i> 백업 복원';
                setTimeout(() => {
                    progress.style.display = 'none';
                }, 1000);
            }
        }

        // 파일 크기 포맷팅
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // DB 초기화 함수
        async function resetDatabase() {
            if (!confirm('정말로 데이터베이스를 초기화하시겠습니까?\n\n이 작업은 되돌릴 수 없으며, 기본 종목(축구, 야구)을 제외한 모든 사용자 데이터가 삭제됩니다.')) {
                return;
            }
            
            const btn = document.getElementById('reset-database-btn');
            const progress = document.getElementById('reset-progress');
            const progressBar = progress.querySelector('.progress-bar');
            const progressText = progress.querySelector('small');
            
            try {
                // UI 상태 변경
                btn.disabled = true;
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> 초기화 중...';
                progress.style.display = 'block';
                progressBar.style.width = '0%';
                progressText.textContent = '데이터베이스 초기화 중...';
                
                // 진행률 애니메이션 시작
                let progressValue = 0;
                const progressInterval = setInterval(() => {
                    progressValue += Math.random() * 15;
                    if (progressValue > 90) progressValue = 90;
                    progressBar.style.width = progressValue + '%';
                }, 200);
                
                const response = await fetch('/api/database/reset', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                // 진행률 완료
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                progressText.textContent = '데이터베이스 초기화 완료!';
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(`데이터베이스가 성공적으로 초기화되었습니다. (삭제된 종목: ${result.deletedSports}개)`, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showToast(result.error || '데이터베이스 초기화에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('DB 초기화 오류:', error);
                showToast('데이터베이스 초기화 중 오류가 발생했습니다.', 'error');
            } finally {
                // UI 상태 복원
                btn.disabled = false;
                btn.innerHTML = '<i class="bi bi-trash3"></i> 데이터베이스 초기화';
                setTimeout(() => {
                    progress.style.display = 'none';
                }, 1000);
            }
        }

        // DB 관리 페이지 열기
        function openDBManagement() {
            window.open('/db-management', '_blank');
        }
    </script>
</body>
</html> 