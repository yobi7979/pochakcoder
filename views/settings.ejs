<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>설정 - SportsCoder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .settings-container {
            max-width: 800px;
            margin: 2rem auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .settings-header {
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        .settings-body {
            padding: 2rem;
        }
        .setting-item {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            background: #f8f9fa;
        }
        .setting-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #495057;
        }
        .setting-description {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }
        .color-picker-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .color-preview {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        .btn-save {
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            border: none;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(30, 64, 175, 0.3);
            color: white;
        }
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border-left: 4px solid #1e40af;
            margin-bottom: 10px;
        }
        .toast.success {
            border-left-color: #10b981;
        }
        .toast.error {
            border-left-color: #ef4444;
        }

        /* 축구 오버레이 디자인 설정 스타일 */
        .soccer-overlay-preview-small {
            width: 100%;
            height: 200px;
            background-color: #000;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            transform: scale(0.15);
            transform-origin: top left;
            margin: -60px 0 -60px -60px;
            cursor: pointer;
            border: 2px solid #dee2e6;
        }

        .soccer-overlay-preview-small:hover {
            border-color: #007bff;
        }

        .soccer-overlay-preview-full {
            width: 100%;
            height: 600px;
            background-color: #000;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            transform: scale(0.5);
            transform-origin: top left;
            margin: -150px 0 -150px -150px;
        }

        .preview-element {
            position: absolute;
            border: 2px solid;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .preview-element:hover {
            opacity: 0.8;
        }

        .preview-element.selected {
            border-width: 3px;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .preview-scoreboard {
            background-color: rgba(0, 204, 51, 0.8);
            border-color: #00cc33;
            width: 420px;
            height: 90px;
        }

        .preview-home-logo {
            background-color: rgba(0, 204, 51, 0.6);
            border-color: #00cc33;
            width: 40px;
            height: 40px;
        }

        .preview-away-logo {
            background-color: rgba(255, 255, 255, 0.6);
            border-color: #ffffff;
            width: 40px;
            height: 40px;
        }

        .preview-match-state {
            background-color: rgba(0, 0, 0, 0.8);
            border-color: #333;
            width: 150px;
            height: 30px;
        }

        .preview-lineup {
            background-color: rgba(0, 0, 0, 0.6);
            border-color: #666;
            width: 350px;
            height: 200px;
        }

        .preview-overlay-image {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: #fff;
            width: 200px;
            height: 150px;
        }

        .position-control {
            margin-bottom: 15px;
        }

        .position-control label {
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .position-control input {
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="settings-container">
        <div class="settings-header">
            <h1><i class="bi bi-gear-fill"></i> 시스템 설정</h1>
            <p class="mb-0">기본 팀 컬러 및 시스템 설정을 관리합니다.</p>
        </div>
        
        <div class="settings-body">
            <div class="setting-item">
                <div class="setting-label">기본 팀 컬러 설정</div>
                <div class="setting-description">
                    새로운 경기 생성 시 적용될 기본 팀 컬러를 설정합니다. 
                    이 설정은 축구와 야구 경기 모두에 적용됩니다.
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">홈팀 기본 컬러</label>
                        <div class="color-picker-container">
                            <input type="color" id="default-home-color" class="form-control form-control-color" value="#1e40af">
                            <div class="color-preview" id="home-color-preview" style="background-color: #1e40af;">#1e40af</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">원정팀 기본 컬러</label>
                        <div class="color-picker-container">
                            <input type="color" id="default-away-color" class="form-control form-control-color" value="#1e40af">
                            <div class="color-preview" id="away-color-preview" style="background-color: #1e40af;">#1e40af</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="setting-item">
                <div class="setting-label">설정 저장</div>
                <div class="setting-description">
                    변경된 설정을 저장합니다. 저장 후 새로운 경기부터 적용됩니다.
                </div>
                <button id="save-settings" class="btn btn-save">
                    <i class="bi bi-save"></i> 설정 저장
                </button>
            </div>

            <!-- 로그 관리 섹션 -->
            <div class="setting-item">
                <div class="setting-label">
                    <i class="bi bi-file-text"></i> 로그 관리
                </div>
                <div class="setting-description">시스템 로그 파일을 확인하고 관리할 수 있습니다. 로그 삭제는 파일을 삭제하는 것이 아니라 로그 내용을 초기화합니다. 자동 백업은 1일마다 실행되며, 로그 크기가 제한을 초과하면 자동으로 백업 후 초기화됩니다.</div>
                
                <!-- 자동 로그 관리 상태 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0"><i class="bi bi-robot"></i> 자동 로그 관리 상태</h6>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-primary mb-1" id="autoBackupStatus">활성화</h6>
                                            <small class="text-muted">자동 백업</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-info mb-1" id="backupCount">-</h6>
                                            <small class="text-muted">백업 개수</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-success mb-1" id="currentLogSize">-</h6>
                                            <small class="text-muted">현재 로그 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-warning mb-1" id="totalBackupSize">-</h6>
                                            <small class="text-muted">백업 총 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="border-end">
                                            <h6 class="text-secondary mb-1" id="maxLogSize">50MB</h6>
                                            <small class="text-muted">최대 로그 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <h6 class="text-dark mb-1" id="retentionDays">30일</h6>
                                        <small class="text-muted">보관 기간</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 로그 상태 요약 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="totalLogFiles" class="text-primary mb-1">-</h5>
                                            <small class="text-muted">총 로그 파일</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="totalLogSize" class="text-info mb-1">-</h5>
                                            <small class="text-muted">총 크기</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <h5 id="oldestLog" class="text-warning mb-1">-</h5>
                                            <small class="text-muted">가장 오래된 로그</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <h5 id="newestLog" class="text-success mb-1">-</h5>
                                        <small class="text-muted">최신 로그</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">로그 파일 목록</h6>
                                <div>
                                    <button class="btn btn-outline-primary btn-sm" onclick="refreshLogData()">
                                        <i class="bi bi-arrow-clockwise"></i> 새로고침
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="viewLogContent()">
                                        <i class="bi bi-eye"></i> 로그 내용 보기
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="logFilesList" class="mb-3">
                                    <div class="text-center text-muted">
                                        <i class="bi bi-hourglass-split"></i> 로그 파일 목록을 불러오는 중...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">빠른 작업</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-success btn-sm" onclick="backupLogs()">
                                        <i class="bi bi-download"></i> 로그 백업
                                    </button>
                                    <button class="btn btn-warning btn-sm" onclick="cleanupLogs()">
                                        <i class="bi bi-trash"></i> 오래된 로그 정리
                                    </button>
                                    <button class="btn btn-info btn-sm" onclick="downloadAllLogs()">
                                        <i class="bi bi-file-earmark-zip"></i> 모든 로그 다운로드
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="clearAllLogs()">
                                        <i class="bi bi-trash-fill"></i> 모든 로그 초기화
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 오버레이 이미지 관리 섹션 -->
            <div class="setting-item">
                <div class="setting-label">
                    <i class="bi bi-image"></i> 오버레이 이미지 관리
                </div>
                <div class="setting-description">
                    축구 오버레이 페이지에 표시할 이미지를 업로드하고 관리할 수 있습니다. 
                    업로드된 이미지는 좌측 상단에 표시됩니다.
                </div>
                
                <!-- 이미지 업로드 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0"><i class="bi bi-cloud-upload"></i> 이미지 업로드</h6>
                            </div>
                            <div class="card-body">
                                <form id="overlayImageForm" enctype="multipart/form-data">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="mb-3">
                                                <label for="overlayImage" class="form-label">이미지 파일 선택</label>
                                                <input type="file" class="form-control" id="overlayImage" name="image" accept="image/*" required>
                                                <div class="form-text">지원 형식: JPEG, PNG, GIF, WEBP (최대 10MB)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="mb-3">
                                                <label class="form-label">&nbsp;</label>
                                                <button type="submit" class="btn btn-primary w-100">
                                                    <i class="bi bi-upload"></i> 업로드
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 업로드된 이미지 목록 -->
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">업로드된 이미지 목록</h6>
                                <button class="btn btn-outline-primary btn-sm" onclick="refreshOverlayImages()">
                                    <i class="bi bi-arrow-clockwise"></i> 새로고침
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="overlayImagesList" class="row">
                                    <div class="col-12 text-center text-muted">
                                        <i class="bi bi-hourglass-split"></i> 이미지 목록을 불러오는 중...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 축구 오버레이 디자인 설정 섹션 -->
            <div class="setting-item">
                <div class="setting-label">
                    <i class="bi bi-layout-text-window"></i> 축구 오버레이 디자인 설정
                </div>
                <div class="setting-description">
                    축구 오버레이 페이지의 각 요소들의 위치를 조정할 수 있습니다. 
                    실시간 미리보기로 변경사항을 확인할 수 있습니다.
                </div>
                
                <div class="row">
                    <div class="col-md-12">
                        <!-- 위치 조정 컨트롤 -->
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">위치 조정</h6>
                                <button class="btn btn-info btn-sm" onclick="openPreviewModal()">
                                    <i class="bi bi-eye"></i> 미리보기 보기
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">요소 선택</label>
                                            <select class="form-select" id="elementSelect" onchange="selectElement()">
                                                <option value="scoreboard">스코어보드</option>
                                                <option value="homeLogo">홈팀 로고</option>
                                                <option value="awayLogo">어웨이팀 로고</option>
                                                <option value="matchState">경기 상태</option>
                                                <option value="homeLineup">홈팀 라인업</option>
                                                <option value="awayLineup">어웨이팀 라인업</option>
                                                <option value="overlayImage">오버레이 이미지</option>
                                            </select>
                                        </div>
                                        
                                        <div id="positionControls">
                                            <!-- 선택된 요소에 따른 위치 조정 컨트롤이 여기에 표시됩니다 -->
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-8">
                                        <div class="small-preview-container">
                                            <h6 class="text-muted mb-2">작은 미리보기 (클릭하여 확대)</h6>
                                            <div class="soccer-overlay-preview-small" id="soccerOverlayPreviewSmall" onclick="openPreviewModal()">
                                                <!-- 작은 미리보기 요소들이 여기에 동적으로 생성됩니다 -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="d-grid gap-2 mt-3">
                                    <button class="btn btn-primary btn-sm" onclick="saveDesignSettings()">
                                        <i class="bi bi-save"></i> 설정 저장
                                    </button>
                                    <button class="btn btn-warning btn-sm" onclick="resetDesignSettings()">
                                        <i class="bi bi-arrow-clockwise"></i> 기본값으로 초기화
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 축구 오버레이 미리보기 모달 -->
            <div class="modal fade" id="soccerOverlayPreviewModal" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">축구 오버레이 미리보기</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="soccer-overlay-preview-full" id="soccerOverlayPreviewFull">
                                <!-- 큰 미리보기 요소들이 여기에 동적으로 생성됩니다 -->
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                            <button type="button" class="btn btn-primary" onclick="refreshPreview()">
                                <i class="bi bi-arrow-clockwise"></i> 새로고침
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 로그 내용 모달 -->
            <div class="modal fade" id="logContentModal" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">로그 내용</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <select id="logFileSelect" class="form-select" onchange="loadLogContent()">
                                    <option value="">로그 파일을 선택하세요</option>
                                </select>
                            </div>
                                                         <div class="mb-3">
                                 <div class="input-group">
                                     <input type="text" id="logSearchInput" class="form-control" placeholder="로그 내용 검색..." oninput="searchLogContent()">
                                     <button class="btn btn-outline-secondary" onclick="searchLogContent()">
                                         <i class="bi bi-search"></i> 검색
                                     </button>
                                     <button class="btn btn-outline-danger" onclick="clearSearch()" title="검색 초기화">
                                         <i class="bi bi-x-circle"></i>
                                     </button>
                                 </div>
                                 <small class="text-muted">검색어와 일치하는 라인만 표시됩니다. 실시간으로 필터링됩니다.</small>
                             </div>
                            <div class="border rounded p-3" style="height: 400px; overflow-y: auto; background-color: #f8f9fa; font-family: monospace; font-size: 0.9rem;">
                                <pre id="logContent" class="mb-0"></pre>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                            <button type="button" class="btn btn-primary" onclick="downloadCurrentLog()">다운로드</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="text-center mt-4">
                <a href="/matches" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> 경기 목록으로 돌아가기
                </a>
            </div>
        </div>
    </div>
    
    <div class="toast-container" id="toastContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 현재 설정 로드
        async function loadSettings() {
            try {
                const response = await fetch('/api/settings');
                if (response.ok) {
                    const settings = await response.json();
                    
                    // 기본 컬러 설정 로드
                    const homeColor = settings.default_home_color || '#1e40af';
                    const awayColor = settings.default_away_color || '#1e40af';
                    
                    document.getElementById('default-home-color').value = homeColor;
                    document.getElementById('default-away-color').value = awayColor;
                    updateColorPreview('home', homeColor);
                    updateColorPreview('away', awayColor);
                }
            } catch (error) {
                console.error('설정 로드 실패:', error);
                showToast('설정 로드에 실패했습니다.', 'error');
            }
        }
        
        // 컬러 미리보기 업데이트
        function updateColorPreview(type, color) {
            const preview = document.getElementById(`${type}-color-preview`);
            preview.style.backgroundColor = color;
            preview.textContent = color.toUpperCase();
        }
        
        // 설정 저장
        async function saveSettings() {
            const homeColor = document.getElementById('default-home-color').value;
            const awayColor = document.getElementById('default-away-color').value;
            
            try {
                const response = await fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        default_home_color: homeColor,
                        default_away_color: awayColor
                    })
                });
                
                if (response.ok) {
                    showToast('설정이 성공적으로 저장되었습니다.', 'success');
                } else {
                    throw new Error('설정 저장 실패');
                }
            } catch (error) {
                console.error('설정 저장 실패:', error);
                showToast('설정 저장에 실패했습니다.', 'error');
            }
        }
        
        // 토스트 메시지 표시
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-body">
                    ${message}
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // 3초 후 제거
            setTimeout(() => {
                toast.style.animation = 'fadeOut 0.3s ease-in-out';
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }
        
        // 로그 데이터 새로고침 (로그 파일 목록 + 자동 관리 상태)
        async function refreshLogData() {
            await loadLogFiles();
            await loadAutoManagementStatus();
        }

        // 자동 로그 관리 상태 로드
        async function loadAutoManagementStatus() {
            try {
                const response = await fetch('/api/logs/auto-management-status');
                if (response.ok) {
                    const data = await response.json();
                    const status = data.data;
                    
                    // 자동 백업 상태 업데이트
                    document.getElementById('backupCount').textContent = status.current.backupCount;
                    document.getElementById('currentLogSize').textContent = `${status.current.currentLogSizeMB} MB`;
                    document.getElementById('totalBackupSize').textContent = `${status.current.totalBackupSizeMB} MB`;
                    document.getElementById('maxLogSize').textContent = `${status.config.maxLogSizeMB} MB`;
                    document.getElementById('retentionDays').textContent = `${status.config.backupRetentionDays}일`;
                    
                    // 자동 백업 상태 표시
                    const autoBackupStatus = document.getElementById('autoBackupStatus');
                    if (status.current.backupCount > 0) {
                        autoBackupStatus.textContent = '활성화';
                        autoBackupStatus.className = 'text-success mb-1';
                    } else {
                        autoBackupStatus.textContent = '대기 중';
                        autoBackupStatus.className = 'text-warning mb-1';
                    }
                }
            } catch (error) {
                console.error('자동 로그 관리 상태 로드 실패:', error);
            }
        }

        // 로그 파일 목록 로드
        async function loadLogFiles() {
            try {
                const response = await fetch('/api/logs');
                if (response.ok) {
                    const data = await response.json();
                    const logFilesList = document.getElementById('logFilesList');
                    
                    if (data.logs && data.logs.length > 0) {
                        let html = '<div class="list-group">';
                        data.logs.forEach(log => {
                            html += `
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>${log.name}</strong>
                                        <br><small class="text-muted">${log.sizeMB} MB • ${new Date(log.modified).toLocaleString()}</small>
                                    </div>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="downloadLog('${log.name}')">
                                            <i class="bi bi-download"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" onclick="clearLog('${log.name}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                        logFilesList.innerHTML = html;
                        
                        // 로그 상태 요약 업데이트
                        updateLogSummary(data.logs);
                        
                        // 로그 파일 선택 옵션 업데이트
                        updateLogFileSelect(data.logs);
                    } else {
                        logFilesList.innerHTML = '<div class="text-center text-muted">로그 파일이 없습니다.</div>';
                        updateLogSummary([]);
                        updateLogFileSelect([]);
                    }
                } else {
                    throw new Error('로그 파일 목록 로드 실패');
                }
            } catch (error) {
                console.error('로그 파일 목록 로드 실패:', error);
                showToast('로그 파일 목록 로드에 실패했습니다.', 'error');
            }
        }

        // 로그 상태 요약 업데이트
        function updateLogSummary(logs) {
            if (logs.length === 0) {
                document.getElementById('totalLogFiles').textContent = '0';
                document.getElementById('totalLogSize').textContent = '0 MB';
                document.getElementById('oldestLog').textContent = '-';
                document.getElementById('newestLog').textContent = '-';
                return;
            }

            const totalSize = logs.reduce((sum, log) => sum + parseFloat(log.sizeMB), 0);
            const dates = logs.map(log => new Date(log.modified)).sort((a, b) => a - b);
            
            document.getElementById('totalLogFiles').textContent = logs.length;
            document.getElementById('totalLogSize').textContent = `${totalSize.toFixed(2)} MB`;
            document.getElementById('oldestLog').textContent = dates[0].toLocaleDateString();
            document.getElementById('newestLog').textContent = dates[dates.length - 1].toLocaleDateString();
        }

        // 로그 파일 선택 옵션 업데이트
        function updateLogFileSelect(logs) {
            const select = document.getElementById('logFileSelect');
            select.innerHTML = '<option value="">로그 파일을 선택하세요</option>';
            
            logs.forEach(log => {
                const option = document.createElement('option');
                option.value = log.name;
                option.textContent = `${log.name} (${log.sizeMB} MB)`;
                select.appendChild(option);
            });
        }

        // 로그 파일 다운로드
        async function downloadLog(filename) {
            try {
                window.open(`/api/logs/${filename}`, '_blank');
                showToast(`${filename} 다운로드가 시작되었습니다.`, 'success');
            } catch (error) {
                console.error('로그 다운로드 실패:', error);
                showToast('로그 다운로드에 실패했습니다.', 'error');
            }
        }

        // 로그 파일 초기화
        async function clearLog(filename) {
            if (!confirm(`정말로 ${filename} 파일의 내용을 초기화하시겠습니까?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/logs/${filename}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showToast(`${filename} 파일의 내용이 초기화되었습니다.`, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('로그 파일 초기화 실패');
                }
            } catch (error) {
                console.error('로그 파일 초기화 실패:', error);
                showToast('로그 파일 초기화에 실패했습니다.', 'error');
            }
        }

        // 로그 백업
        async function backupLogs() {
            try {
                const response = await fetch('/api/logs/backup', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                } else {
                    throw new Error('로그 백업 실패');
                }
            } catch (error) {
                console.error('로그 백업 실패:', error);
                showToast('로그 백업에 실패했습니다.', 'error');
            }
        }

        // 오래된 로그 정리
        async function cleanupLogs() {
            const days = prompt('몇 일 이전의 로그를 삭제하시겠습니까? (기본값: 30일)', '30');
            if (!days) return;
            
            try {
                const response = await fetch('/api/logs/cleanup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ days: parseInt(days) })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('로그 정리 실패');
                }
            } catch (error) {
                console.error('로그 정리 실패:', error);
                showToast('로그 정리에 실패했습니다.', 'error');
            }
        }

        // 모든 로그 다운로드
        async function downloadAllLogs() {
            try {
                const response = await fetch('/api/logs');
                if (response.ok) {
                    const data = await response.json();
                    if (data.logs && data.logs.length > 0) {
                        data.logs.forEach(log => {
                            setTimeout(() => {
                                downloadLog(log.name);
                            }, 500); // 0.5초 간격으로 다운로드
                        });
                        showToast('모든 로그 파일 다운로드가 시작되었습니다.', 'success');
                    } else {
                        showToast('다운로드할 로그 파일이 없습니다.', 'warning');
                    }
                } else {
                    throw new Error('로그 파일 목록 로드 실패');
                }
            } catch (error) {
                console.error('모든 로그 다운로드 실패:', error);
                showToast('모든 로그 다운로드에 실패했습니다.', 'error');
            }
        }

        // 모든 로그 초기화
        async function clearAllLogs() {
            if (!confirm('정말로 모든 로그 파일의 내용을 초기화하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/logs/clear-all', {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                    loadLogFiles(); // 목록 새로고침
                } else {
                    throw new Error('모든 로그 초기화 실패');
                }
            } catch (error) {
                console.error('모든 로그 초기화 실패:', error);
                showToast('모든 로그 초기화에 실패했습니다.', 'error');
            }
        }

        // 로그 내용 보기 모달 열기
        function viewLogContent() {
            const modal = new bootstrap.Modal(document.getElementById('logContentModal'));
            modal.show();
        }

        // 원본 로그 내용 저장 변수
        let originalLogContent = '';

        // 로그 내용 로드
        async function loadLogContent() {
            const filename = document.getElementById('logFileSelect').value;
            if (!filename) {
                document.getElementById('logContent').textContent = '로그 파일을 선택하세요.';
                originalLogContent = '';
                return;
            }
            
            try {
                const response = await fetch(`/api/logs/${filename}/content`);
                if (response.ok) {
                    const data = await response.json();
                    originalLogContent = data.content;
                    document.getElementById('logContent').textContent = originalLogContent;
                    
                    // 검색어가 있으면 필터링 적용
                    const searchTerm = document.getElementById('logSearchInput').value;
                    if (searchTerm) {
                        filterLogContent();
                    }
                } else {
                    document.getElementById('logContent').textContent = '로그 내용을 불러올 수 없습니다.';
                    originalLogContent = '';
                }
            } catch (error) {
                console.error('로그 내용 로드 실패:', error);
                document.getElementById('logContent').textContent = '로그 내용을 불러오는 중 오류가 발생했습니다.';
                originalLogContent = '';
            }
        }

        // 로그 내용 필터링 (검색어와 일치하는 라인만 표시)
        function filterLogContent() {
            const searchTerm = document.getElementById('logSearchInput').value.toLowerCase();
            const logContent = document.getElementById('logContent');
            
            if (!searchTerm) {
                // 검색어가 없으면 전체 내용 표시
                logContent.textContent = originalLogContent;
                return;
            }
            
            if (!originalLogContent) {
                return;
            }
            
            // 라인별로 분리하여 검색어가 포함된 라인만 필터링
            const lines = originalLogContent.split('\n');
            const filteredLines = lines.filter(line => 
                line.toLowerCase().includes(searchTerm)
            );
            
            if (filteredLines.length > 0) {
                // 검색어가 포함된 라인들을 하이라이트하여 표시
                const highlightedLines = filteredLines.map(line => {
                    const regex = new RegExp(`(${searchTerm})`, 'gi');
                    return line.replace(regex, '<mark>$1</mark>');
                });
                
                logContent.innerHTML = highlightedLines.join('\n');
            } else {
                logContent.innerHTML = '<span class="text-muted">검색어와 일치하는 내용이 없습니다.</span>';
            }
        }

        // 로그 내용 검색 (실시간 필터링)
        function searchLogContent() {
            filterLogContent();
        }

        // 검색 초기화
        function clearSearch() {
            document.getElementById('logSearchInput').value = '';
            filterLogContent();
        }

        // 현재 로그 파일 다운로드
        function downloadCurrentLog() {
            const filename = document.getElementById('logFileSelect').value;
            if (filename) {
                downloadLog(filename);
            } else {
                showToast('다운로드할 로그 파일을 선택하세요.', 'warning');
            }
        }

        // 오버레이 이미지 업로드
        document.getElementById('overlayImageForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            const fileInput = document.getElementById('overlayImage');
            
            if (!fileInput.files[0]) {
                showToast('이미지 파일을 선택해주세요.', 'warning');
                return;
            }
            
            formData.append('image', fileInput.files[0]);
            
            try {
                const response = await fetch('/api/overlay-image', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    fileInput.value = ''; // 파일 입력 초기화
                    refreshOverlayImages(); // 이미지 목록 새로고침
                } else {
                    showToast(result.message || '업로드에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('이미지 업로드 오류:', error);
                showToast('업로드 중 오류가 발생했습니다.', 'error');
            }
        });

        // 오버레이 이미지 목록 로드
        async function loadOverlayImages() {
            try {
                const response = await fetch('/api/overlay-images');
                const result = await response.json();
                
                const imagesList = document.getElementById('overlayImagesList');
                
                if (result.success) {
                    if (result.images.length === 0) {
                        imagesList.innerHTML = `
                            <div class="col-12 text-center text-muted">
                                <i class="bi bi-image"></i> 업로드된 이미지가 없습니다.
                            </div>
                        `;
                    } else {
                        imagesList.innerHTML = result.images.map(image => `
                            <div class="col-md-4 col-lg-3 mb-3">
                                <div class="card h-100">
                                    <img src="${image.path}" class="card-img-top" alt="오버레이 이미지" style="height: 150px; object-fit: cover;">
                                    <div class="card-body">
                                        <h6 class="card-title">${image.filename}</h6>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                업로드: ${new Date(image.uploadTime).toLocaleString()}
                                            </small>
                                        </p>
                                    </div>
                                    <div class="card-footer">
                                        <div class="btn-group w-100" role="group">
                                            <button class="btn btn-outline-primary btn-sm" onclick="copyImagePath('${image.path}')">
                                                <i class="bi bi-clipboard"></i> 경로 복사
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" onclick="deleteOverlayImage('${image.filename}')">
                                                <i class="bi bi-trash"></i> 삭제
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                    }
                } else {
                    imagesList.innerHTML = `
                        <div class="col-12 text-center text-danger">
                            <i class="bi bi-exclamation-triangle"></i> 이미지 목록을 불러올 수 없습니다.
                        </div>
                    `;
                }
            } catch (error) {
                console.error('오버레이 이미지 목록 로드 오류:', error);
                document.getElementById('overlayImagesList').innerHTML = `
                    <div class="col-12 text-center text-danger">
                        <i class="bi bi-exclamation-triangle"></i> 이미지 목록을 불러오는 중 오류가 발생했습니다.
                    </div>
                `;
            }
        }

        // 오버레이 이미지 목록 새로고침
        function refreshOverlayImages() {
            loadOverlayImages();
        }

        // 이미지 경로 복사
        function copyImagePath(path) {
            navigator.clipboard.writeText(path).then(() => {
                showToast('이미지 경로가 클립보드에 복사되었습니다.', 'success');
            }).catch(() => {
                showToast('클립보드 복사에 실패했습니다.', 'error');
            });
        }

        // 오버레이 이미지 삭제
        async function deleteOverlayImage(filename) {
            if (!confirm('정말로 이 이미지를 삭제하시겠습니까?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/overlay-image/${filename}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    refreshOverlayImages(); // 이미지 목록 새로고침
                } else {
                    showToast(result.message || '삭제에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('이미지 삭제 오류:', error);
                showToast('삭제 중 오류가 발생했습니다.', 'error');
            }
        }

        // 축구 오버레이 디자인 설정 관련 변수
        let currentDesign = {};
        let defaultDesign = {};
        let selectedElement = 'scoreboard';

        // 축구 오버레이 디자인 설정 로드
        async function loadSoccerOverlayDesign() {
            try {
                const response = await fetch('/api/soccer-overlay-design');
                const result = await response.json();
                
                if (result.success) {
                    currentDesign = result.design;
                    defaultDesign = result.default;
                    renderSmallPreview();
                    selectElement();
                }
            } catch (error) {
                console.error('축구 오버레이 디자인 설정 로드 오류:', error);
                showToast('디자인 설정을 불러올 수 없습니다.', 'error');
            }
        }

        // 축구 오버레이 미리보기 렌더링 (공통 함수)
        function renderSoccerOverlayPreview(containerId) {
            const preview = document.getElementById(containerId);
            preview.innerHTML = '';
            
            // 각 요소들을 미리보기에 추가
            const elements = [
                { id: 'scoreboard', class: 'preview-scoreboard', text: '스코어보드' },
                { id: 'homeLogo', class: 'preview-home-logo', text: '홈로고' },
                { id: 'awayLogo', class: 'preview-away-logo', text: '어웨이로고' },
                { id: 'matchState', class: 'preview-match-state', text: '경기상태' },
                { id: 'homeLineup', class: 'preview-lineup', text: '홈라인업' },
                { id: 'awayLineup', class: 'preview-lineup', text: '어웨이라인업' },
                { id: 'overlayImage', class: 'preview-overlay-image', text: '이미지' }
            ];
            
            elements.forEach(element => {
                const div = document.createElement('div');
                div.className = `preview-element ${element.class}`;
                div.id = `${containerId}-${element.id}`;
                div.textContent = element.text;
                
                const pos = currentDesign[element.id];
                if (pos) {
                    div.style.top = `${pos.top}px`;
                    if (pos.left !== undefined) {
                        div.style.left = `${pos.left}px`;
                    }
                    if (pos.right !== undefined) {
                        div.style.right = `${pos.right}px`;
                    }
                    if (pos.width !== undefined) {
                        div.style.width = `${pos.width}px`;
                    }
                    if (pos.height !== undefined) {
                        div.style.height = `${pos.height}px`;
                    }
                }
                
                // 작은 미리보기에서만 클릭 이벤트 추가
                if (containerId === 'soccerOverlayPreviewSmall') {
                    div.onclick = (e) => {
                        e.stopPropagation();
                        document.getElementById('elementSelect').value = element.id;
                        selectElement();
                    };
                }
                
                preview.appendChild(div);
            });
        }

        // 작은 미리보기 렌더링
        function renderSmallPreview() {
            renderSoccerOverlayPreview('soccerOverlayPreviewSmall');
        }

        // 큰 미리보기 렌더링
        function renderFullPreview() {
            renderSoccerOverlayPreview('soccerOverlayPreviewFull');
        }

        // 요소 선택
        function selectElement() {
            selectedElement = document.getElementById('elementSelect').value;
            
            // 모든 요소의 선택 상태 제거
            document.querySelectorAll('.preview-element').forEach(el => {
                el.classList.remove('selected');
            });
            
            // 선택된 요소 하이라이트 (작은 미리보기)
            const selectedPreviewSmall = document.getElementById(`soccerOverlayPreviewSmall-${selectedElement}`);
            if (selectedPreviewSmall) {
                selectedPreviewSmall.classList.add('selected');
            }
            
            // 선택된 요소 하이라이트 (큰 미리보기)
            const selectedPreviewFull = document.getElementById(`soccerOverlayPreviewFull-${selectedElement}`);
            if (selectedPreviewFull) {
                selectedPreviewFull.classList.add('selected');
            }
            
            // 위치 조정 컨트롤 업데이트
            updatePositionControls();
        }

        // 위치 조정 컨트롤 업데이트
        function updatePositionControls() {
            const controls = document.getElementById('positionControls');
            const element = currentDesign[selectedElement];
            
            if (!element) return;
            
            let controlsHTML = '';
            
            if (element.top !== undefined) {
                controlsHTML += `
                    <div class="position-control">
                        <label>Top (Y축)</label>
                        <input type="number" class="form-control" id="posTop" value="${element.top}" onchange="updateElementPosition('top', this.value)">
                    </div>
                `;
            }
            
            if (element.left !== undefined) {
                controlsHTML += `
                    <div class="position-control">
                        <label>Left (X축)</label>
                        <input type="number" class="form-control" id="posLeft" value="${element.left}" onchange="updateElementPosition('left', this.value)">
                    </div>
                `;
            }
            
            if (element.right !== undefined) {
                controlsHTML += `
                    <div class="position-control">
                        <label>Right (오른쪽)</label>
                        <input type="number" class="form-control" id="posRight" value="${element.right}" onchange="updateElementPosition('right', this.value)">
                    </div>
                `;
            }
            
            if (element.width !== undefined) {
                controlsHTML += `
                    <div class="position-control">
                        <label>Width (너비)</label>
                        <input type="number" class="form-control" id="posWidth" value="${element.width}" onchange="updateElementPosition('width', this.value)">
                    </div>
                `;
            }
            
            if (element.height !== undefined) {
                controlsHTML += `
                    <div class="position-control">
                        <label>Height (높이)</label>
                        <input type="number" class="form-control" id="posHeight" value="${element.height}" onchange="updateElementPosition('height', this.value)">
                    </div>
                `;
            }
            
            controls.innerHTML = controlsHTML;
        }

        // 요소 위치 업데이트
        function updateElementPosition(property, value) {
            if (!currentDesign[selectedElement]) {
                currentDesign[selectedElement] = {};
            }
            
            currentDesign[selectedElement][property] = parseInt(value);
            
            // 작은 미리보기 업데이트
            const previewElementSmall = document.getElementById(`soccerOverlayPreviewSmall-${selectedElement}`);
            if (previewElementSmall) {
                previewElementSmall.style[property] = `${value}px`;
            }
            
            // 큰 미리보기 업데이트
            const previewElementFull = document.getElementById(`soccerOverlayPreviewFull-${selectedElement}`);
            if (previewElementFull) {
                previewElementFull.style[property] = `${value}px`;
            }
        }

        // 디자인 설정 저장
        async function saveDesignSettings() {
            try {
                const response = await fetch('/api/soccer-overlay-design', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ design: currentDesign })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || '저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('디자인 설정 저장 오류:', error);
                showToast('저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 미리보기 모달 열기
        function openPreviewModal() {
            renderFullPreview();
            const modal = new bootstrap.Modal(document.getElementById('soccerOverlayPreviewModal'));
            modal.show();
        }

        // 미리보기 새로고침
        function refreshPreview() {
            renderFullPreview();
            renderSmallPreview();
        }

        // 디자인 설정 초기화
        async function resetDesignSettings() {
            if (!confirm('정말로 기본값으로 초기화하시겠습니까?')) {
                return;
            }
            
            try {
                const response = await fetch('/api/soccer-overlay-design/reset', {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    loadSoccerOverlayDesign(); // 설정 다시 로드
                } else {
                    showToast(result.message || '초기화에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('디자인 설정 초기화 오류:', error);
                showToast('초기화 중 오류가 발생했습니다.', 'error');
            }
        }

        // 이벤트 리스너
        document.addEventListener('DOMContentLoaded', function() {
            loadSettings();
            loadLogFiles(); // 로그 파일 목록 로드
            loadAutoManagementStatus(); // 자동 로그 관리 상태 로드
            loadOverlayImages(); // 오버레이 이미지 목록 로드
            loadSoccerOverlayDesign(); // 축구 오버레이 디자인 설정 로드
            
            // 컬러 변경 이벤트
            document.getElementById('default-home-color').addEventListener('change', function() {
                updateColorPreview('home', this.value);
            });
            
            document.getElementById('default-away-color').addEventListener('change', function() {
                updateColorPreview('away', this.value);
            });
            
            // 저장 버튼 이벤트
            document.getElementById('save-settings').addEventListener('click', saveSettings);
        });
    </script>
</body>
</html> 