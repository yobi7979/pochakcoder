<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축구 경기 컨트롤 패널</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }
        
        body {
            background-color: var(--light-color);
            padding: 10px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .control-panel {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .panel-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .score-section {
            margin: 15px 0;
        }
        
        .score-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .score-input::-webkit-inner-spin-button,
        .score-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .score-input {
            appearance: textfield;
            -moz-appearance: textfield;
            width: 80px;
            height: 40px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #ddd;
            padding: 5px;
        }
        
        .score-controls {
            display: flex;
            gap: 5px;
        }
        
        .score-btn {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            font-size: 20px;
        }
        
        .team-color-section {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-top: 10px;
        }
        
        .team-color-section .form-control {
            flex: 1;
        }
        
        .team-color-section .form-control-color {
            width: 35px;
            height: 30px;
            border: none;
            background: none;
            padding: 0;
            box-shadow: none;
            outline: none;
        }
        
        .team-color-section .form-control-color::-webkit-color-swatch-wrapper {
            padding: 0;
            border: none;
        }
        
        .team-color-section .form-control-color::-webkit-color-swatch {
            border: none;
            border-radius: 4px;
        }
        
        .time-edit-container {
            margin-left: 10px;
            padding: 8px 12px;
            background-color: rgba(0, 123, 255, 0.1);
            border-radius: 8px;
            border: 1px solid rgba(0, 123, 255, 0.3);
        }
        
        .time-edit-input {
            width: 120px;
            text-align: center;
            border-radius: 6px;
            border: 1px solid var(--primary-color);
            padding: 4px 8px;
            font-size: 0.9rem;
        }
        
        .apply-time-btn {
            border-radius: 6px;
            padding: 4px 12px;
                font-size: 0.9rem;
            }
            
            
        .team-color-section .save-team-color {
            white-space: nowrap;
        }
        
        /* 팀 관리 섹션 스타일 */
        .team-management-section {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .team-management-section > div {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .team-logo-bg-section {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .team-management-section .form-control-color {
            width: 35px;
            height: 30px;
            border: none;
            background: none;
            padding: 0;
            box-shadow: none;
            outline: none;
        }
        
        .team-management-section .form-control-color::-webkit-color-swatch-wrapper {
            padding: 0;
            border: none;
        }
        
        .team-management-section .form-control-color::-webkit-color-swatch {
            border: none;
            border-radius: 4px;
        }
        
        .team-management-section .form-label {
            font-size: 0.9rem;
            margin-bottom: 0;
            white-space: nowrap;
        }
        
        .team-management-section .btn {
            font-size: 0.8rem;
            padding: 4px 8px;
        }
        
        /* 컨테이너 스타일 통일 */
        .team-color-container,
        .team-logo-bg-container {
            flex: 1;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            margin: 0 5px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .team-color-container .team-color-section,
        .team-logo-bg-container .team-logo-bg-section {
            display: flex;
            align-items: center;
            gap: 6px;
            margin: 0;
        }
        
        .team-color-container .form-label,
        .team-logo-bg-container .form-label {
            font-size: 0.9rem;
            margin-bottom: 0;
            white-space: nowrap;
            min-width: 60px;
        }
        
        /* 팀로고 관리 섹션 스타일 */
        .team-logo-section {
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            margin: 10px 5px 0 5px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .logo-controls {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-bottom: 10px;
        }
        
        .logo-controls .form-control-color {
            width: 35px;
            height: 30px;
            border: none;
            background: none;
            padding: 0;
            box-shadow: none;
            outline: none;
        }
        
        .logo-controls .form-control-color::-webkit-color-swatch-wrapper {
            padding: 0;
            border: none;
        }
        
        .logo-controls .form-control-color::-webkit-color-swatch {
            border: none;
            border-radius: 4px;
        }
        
        /* 점수 및 로고 관리 섹션 */
        .score-logo-section {
            display: flex;
            align-items: flex-end;
            gap: 20px;
            margin-bottom: 15px;
        }
        
        .score-logo-section .score-section {
            flex: 1;
        }
        
        .logo-preview-section {
            flex: 0 0 auto;
        }
        
        .logo-preview-container {
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: 8px;
        }
        
        .logo-preview {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 60px;
        }
        
        .logo-preview-container .logo-controls {
            display: flex;
            flex-direction: column;
            gap: 4px;
            width: 100%;
            max-width: 80px;
        }
        
        .logo-preview-container .logo-controls .btn {
            font-size: 0.75rem;
            padding: 4px 8px;
            width: 100%;
        }
        
        .preview-bg {
            width: 80px;
            height: 60px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #dee2e6;
            position: relative;
            overflow: hidden;
        }
        
        .preview-bg img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        
        .no-logo-text {
            font-size: 0.7rem;
            color: #6c757d;
            text-align: center;
        }
        
        .team-logo-section .form-label {
            font-size: 0.9rem;
            margin-bottom: 0;
        }
        
        .team-logo-section .btn {
            font-size: 0.8rem;
            padding: 4px 8px;
        }
        
        /* URL 섹션 내 팀로고 제어 */
        .logo-control-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .logo-control-item .url-type {
            min-width: 30px;
        }
        
        .logo-control-item .btn {
            font-size: 0.75rem;
            padding: 4px 8px;
        }
        
        .logo-control-buttons .btn {
            font-size: 0.8rem;
            padding: 6px 12px;
        }
        
        /* 헤더 섹션 */
            .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .panel-title {
            margin: 0;
            color: #2c3e50;
            font-weight: 600;
        }
        
        /* 연결 상태 표시 스타일 */
        .connection-status {
            display: flex;
            align-items: center;
            gap: 8px;
            margin: 10px 0;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .status-indicator.connected {
            background-color: #28a745;
            box-shadow: 0 0 8px rgba(40, 167, 69, 0.5);
        }
        
        .status-indicator.disconnected {
            background-color: #dc3545;
            box-shadow: 0 0 8px rgba(220, 53, 69, 0.5);
        }
        
        .back-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            text-decoration: none;
        }
        
        /* URL 복사 섹션 (컴팩트 버전) */
        .url-section-compact {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 12px 16px;
            margin-bottom: 20px;
        }
        
        .url-label {
            font-weight: 600;
            color: #495057;
            white-space: nowrap;
        }
        
        .url-item {
            display: flex;
            align-items: center;
            gap: 8px;
            flex: 1;
        }

        .url-type {
            font-size: 0.8rem;
            font-weight: 500;
            color: #6c757d;
            min-width: 50px;
            text-align: center;
        }
        
        .url-input-compact {
            font-size: 0.85rem;
            padding: 4px 8px;
            height: 32px;
            border: 1px solid #ced4da;
            border-radius: 4px;
        }

        .url-input-compact:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* 승부차기 섹션 스타일 */
        .penalty-section {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 12px;
        }
        
        
        .penalty-controls {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .penalty-label {
            font-size: 0.8rem;
            font-weight: 500;
            color: #6c757d;
            min-width: 40px;
            text-align: center;
        }
        
        /* 득점 정보 입력 섹션 스타일 */
        .goal-input-row {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        
        .goal-input-row input {
            flex: 1;
            padding: 6px 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .goal-input-row .btn-sm {
            padding: 4px 8px;
            font-size: 0.8rem;
        }
        
        .goal-input-row .time-input {
            width: 80px;
            text-align: center;
        }
        
        .goal-input-row .player-input {
            flex: 2;
        }
        
        /* 새로운 득점 정보 입력 스타일 */
        .goal-input-form {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
        }
        
        .goals-list {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 10px;
            background: #ffffff;
        }
        
        .goal-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            margin-bottom: 2px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .goal-item:last-child {
            margin-bottom: 0;
        }
        
        .goal-item .goal-text {
            flex: 1;
            font-weight: 500;
        }
        
        .goal-item .goal-time {
            color: #6c757d;
            font-size: 0.8rem;
            margin-left: 10px;
        }
        
        .goal-item .btn-sm {
            padding: 2px 6px;
            font-size: 0.7rem;
        }
        
        /* 편집 가능한 득점 정보 입력 필드 스타일 */
        .goal-item {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 2px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        
        .goal-player-input, .goal-time-input {
            flex: 1;
            padding: 6px 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 0.9rem;
            background: #ffffff;
        }
        
        .goal-player-input:focus, .goal-time-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            outline: none;
        }
        
        .goal-time-input {
            width: 80px;
            text-align: center;
        }
        
        /* 입력 폼 텍스트 박스 크기 조정 */
        .goal-input-form .form-control {
            font-size: 1rem;
            padding: 10px 12px;
            height: auto;
        }
        
        .goal-input-form .btn-sm {
            padding: 8px 12px;
            font-size: 0.9rem;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* 팀별 득점 섹션 스타일 */
        .team-goals-section {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            height: 100%;
            min-height: 300px;
        }
        
        .team-goals-section h6 {
            font-weight: 600;
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 8px;
            margin-bottom: 15px;
        }
        
        .team-goals-section .goal-input-form {
            background: #ffffff;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 12px;
        }
        
        .team-goals-section .goals-list {
            max-height: 180px;
            overflow-y: auto;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 8px;
            background: #ffffff;
        }
        
        /* 홈팀/어웨이팀 구분선 */
        .team-goals-section:first-child {
            border-right: 2px solid #dee2e6;
            margin-right: 10px;
        }
        
        .team-goals-section:last-child {
            margin-left: 10px;
        }
        
        .timer-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        
        .timer-display {
            font-size: 3rem;
            font-weight: 900;
            font-family: 'Noto Sans KR', sans-serif;
            margin-bottom: 20px;
            color: #2c3e50;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .timer-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
        }
        
        .url-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .url-input {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 헤더 -->
        <div class="panel-header">
            <h2 class="panel-title">
                <i class="bi bi-trophy"></i> 축구 경기 컨트롤 패널
            </h2>
            <div class="d-flex align-items-center gap-3">
                <div class="connection-status">
                    <span id="connection-indicator" class="status-indicator"></span>
                    <span id="connection-text">서버 연결 중...</span>
                </div>
                <!-- 새로운 타이머 시스템 v2 토글 (컴팩트 버전) -->
                <div class="d-flex align-items-center gap-2">
                    <span class="text-muted small">서버타이머</span>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="timer-v2-toggle" onchange="toggleTimerV2()">
                        <label class="form-check-label" for="timer-v2-toggle"></label>
                    </div>
                </div>
            <a href="/matches" class="btn btn-outline-secondary back-btn">
                <i class="bi bi-arrow-left"></i> 목록
            </a>
        </div>
        </div>
        
        <!-- URL 복사 섹션 (컴팩트 버전) -->
        <div class="url-section-compact">
            <div class="d-flex align-items-center gap-3">
                <span class="url-label">
                    <i class="bi bi-link-45deg"></i> URL:
                </span>
                <div class="url-item">
                    <span class="url-type">모바일</span>
                    <input type="text" id="mobile-url" class="form-control url-input-compact" readonly>
                    <button class="btn btn-sm btn-outline-secondary" onclick="copyMobileUrl()">
                        <i class="bi bi-copy"></i>
                        </button>
                    </div>
                <div class="url-item">
                    <span class="url-type">오버레이</span>
                    <input type="text" id="overlay-url" class="form-control url-input-compact" readonly>
                    <button class="btn btn-sm btn-outline-secondary" onclick="copyOverlayUrl()">
                        <i class="bi bi-copy"></i>
                                </button>
                </div>
                <!-- 팀로고 사용유무 제어 -->
                <div class="url-item logo-control-item">
                    <span class="url-type">로고</span>
                    <button class="btn btn-sm btn-success" id="toggle-team-logos">
                        <i class="bi bi-eye"></i> 표시
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" id="toggle-logo-display" style="display: none;">
                        <i class="bi bi-palette"></i> 배경만
                    </button>
                </div>
            </div>
        </div>


        <!-- 타이머 섹션 -->
                    <div class="timer-section">
            <div class="timer-display" id="timer-display">00:00</div>
                        <div class="timer-controls">
                <button class="btn btn-success" onclick="startTimer()">
                            <i class="bi bi-play-fill"></i> 시작
                        </button>
                <button class="btn btn-warning" onclick="stopTimer()">
                    <i class="bi bi-pause-fill"></i> 정지
                        </button>
                <button class="btn btn-secondary" onclick="resetTimer()">
                    <i class="bi bi-arrow-clockwise"></i> 리셋
                        </button>
                <button class="btn btn-primary" onclick="toggleTimeEdit()">
                            <i class="bi bi-pencil"></i> 수정
                        </button>
                        
                        <!-- 시간 수정 입력 필드 (수정 버튼 옆에 고정 표시) -->
                    <div id="time-edit-container" class="time-edit-container" style="display: none;">
                        <div class="d-flex align-items-center">
                                <div class="me-2">
                                    <input type="text" id="time-edit-input" class="form-control time-edit-input" placeholder="숫자 입력 (예: 1, 11, 111, 1111)" maxlength="6">
                            </div>
                            <div>
                                <button id="apply-time-btn" class="btn btn-success apply-time-btn">
                                    <i class="bi bi-check-lg"></i> 적용
                                </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 팀 위치 변경 버튼 -->
            <div class="text-center mt-3">
                <button class="btn btn-warning btn-sm" onclick="swapTeams()">
                    <i class="bi bi-arrow-left-right"></i> 팀 위치 변경
                            </button>
                <small class="text-muted d-block mt-1">홈팀과 어웨이팀의 정보를 서로 바꿉니다</small>
                        </div>
            </div>
            
        <!-- 홈팀 섹션 -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-house"></i> <%= match.home_team %></h5>
                    </div>
                    <div class="card-body">
                        <!-- 팀명 수정 -->
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" id="home-team-name" class="form-control" value="<%= match.home_team %>">
                        <button class="btn btn-success btn-sm save-team-name" data-team="home">
                            <i class="bi bi-check-lg"></i> 팀명 저장
                            </button>
                        </div>
                                    </div>
            
                        <!-- 팀 컬러 및 로고 관리 -->
                        <div class="team-management-section">
                            <!-- 팀 컬러 -->
                            <div class="team-color-container">
                                <div class="team-color-section">
                                    <label class="form-label">팀 컬러</label>
                                    <input type="color" id="home-team-color" class="form-control form-control-color" value="<%= match.home_team_color || '#1e40af' %>">
                                    <button class="btn btn-primary save-team-color" data-team="home">
                                        <i class="bi bi-save"></i> 저장
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 팀로고 배경색 -->
                            <div class="team-logo-bg-container">
                                <div class="team-logo-bg-section">
                                    <label class="form-label">배경색</label>
                                    <input type="color" id="home-team-logo-bg" class="form-control form-control-color" value="#FFFFFF" title="로고 배경색">
                                    <button class="btn btn-success save-team-logo-bg" data-team="home">
                                        <i class="bi bi-save"></i> 저장
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 점수 및 로고 관리 섹션 -->
                        <div class="score-logo-section">
                            <!-- 점수 컨트롤 -->
                            <div class="score-section">
                                <label class="form-label">점수</label>
                                <div class="score-input-group">
                                    <button class="btn btn-danger score-btn" onclick="updateScore('home', -1)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="number" id="home-score" class="score-input" value="<%= match.home_score || 0 %>" readonly>
                                    <button class="btn btn-success score-btn" onclick="updateScore('home', 1)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 팀로고 미리보기 및 컨트롤 -->
                            <div class="logo-preview-section">
                                <div class="logo-preview-container">
                                    <div class="logo-preview" id="home-logo-preview">
                                        <div class="preview-bg" id="home-preview-bg" style="background-color: #FFFFFF;">
                                            <img id="home-preview-logo" src="" alt="홈팀 로고" style="display: none;">
                                            <span class="no-logo-text">로고 없음</span>
                                        </div>
                                    </div>
                                    <div class="logo-controls">
                                        <input type="file" id="home-team-logo" class="form-control" accept="image/*" style="display: none;">
                                        <button class="btn btn-outline-secondary btn-sm" onclick="document.getElementById('home-team-logo').click()">
                                            <i class="bi bi-upload"></i> 업로드
                                        </button>
                                        <button class="btn btn-success btn-sm save-team-logo" data-team="home">
                                            <i class="bi bi-save"></i> 저장
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 어웨이팀 섹션 -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-airplane"></i> <%= match.away_team %></h5>
                    </div>
                    <div class="card-body">
                        <!-- 팀명 수정 -->
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" id="away-team-name" class="form-control" value="<%= match.away_team %>">
                                <button class="btn btn-success btn-sm save-team-name" data-team="away">
                                    <i class="bi bi-check-lg"></i> 팀명 저장
                                            </button>
                                        </div>
                                    </div>
                            
                        <!-- 팀 컬러 및 로고 관리 -->
                        <div class="team-management-section">
                            <!-- 팀 컬러 -->
                            <div class="team-color-container">
                                <div class="team-color-section">
                                    <label class="form-label">팀 컬러</label>
                                    <input type="color" id="away-team-color" class="form-control form-control-color" value="<%= match.away_team_color || '#1e40af' %>">
                                    <button class="btn btn-primary save-team-color" data-team="away">
                                        <i class="bi bi-save"></i> 저장
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 팀로고 배경색 -->
                            <div class="team-logo-bg-container">
                                <div class="team-logo-bg-section">
                                    <label class="form-label">배경색</label>
                                    <input type="color" id="away-team-logo-bg" class="form-control form-control-color" value="#FFFFFF" title="로고 배경색">
                                    <button class="btn btn-success save-team-logo-bg" data-team="away">
                                        <i class="bi bi-save"></i> 저장
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        
                        <!-- 점수 및 로고 관리 섹션 -->
                        <div class="score-logo-section">
                            <!-- 점수 컨트롤 -->
                            <div class="score-section">
                                <label class="form-label">점수</label>
                                <div class="score-input-group">
                                    <button class="btn btn-danger score-btn" onclick="updateScore('away', -1)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="number" id="away-score" class="score-input" value="<%= match.away_score || 0 %>" readonly>
                                    <button class="btn btn-success score-btn" onclick="updateScore('away', 1)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 팀로고 미리보기 및 컨트롤 -->
                            <div class="logo-preview-section">
                                <div class="logo-preview-container">
                                    <div class="logo-preview" id="away-logo-preview">
                                        <div class="preview-bg" id="away-preview-bg" style="background-color: #FFFFFF;">
                                            <img id="away-preview-logo" src="" alt="어웨이팀 로고" style="display: none;">
                                            <span class="no-logo-text">로고 없음</span>
                                        </div>
                                    </div>
                                    <div class="logo-controls">
                                        <input type="file" id="away-team-logo" class="form-control" accept="image/*" style="display: none;">
                                        <button class="btn btn-outline-secondary btn-sm" onclick="document.getElementById('away-team-logo').click()">
                                            <i class="bi bi-upload"></i> 업로드
                                        </button>
                                        <button class="btn btn-success btn-sm save-team-logo" data-team="away">
                                            <i class="bi bi-save"></i> 저장
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 승부차기 섹션과 그래픽 토글 섹션 (나란히 배치) -->
        <div class="row mb-3">
            <!-- 승부차기 섹션 -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-trophy"></i> 승부차기
                        </h6>
                        </div>
                    <div class="card-body">
                        <div class="penalty-section">
                            <div class="penalty-text-display mb-3">
                                <div class="form-control text-center" id="penalty-text-display" style="background-color: #f8f9fa; border: 1px solid #dee2e6; font-weight: 600; color: #495057;">
                                    0 (승부차기) 0
                        </div>
                                <small class="text-muted">현재 승부차기 텍스트</small>
                        </div>
                            <div class="d-flex align-items-center justify-content-center gap-4 mb-3">
                                <div class="penalty-controls">
                                    <button class="btn btn-sm btn-outline-danger" onclick="updatePenaltyScore('home', -1)">
                                        <i class="bi bi-dash"></i>
                    </button>
                                    <span class="penalty-label">홈팀</span>
                                    <button class="btn btn-sm btn-outline-success" onclick="updatePenaltyScore('home', 1)">
                                        <i class="bi bi-plus"></i>
                        </button>
                    </div>
                                <div class="penalty-controls">
                                    <button class="btn btn-sm btn-outline-danger" onclick="updatePenaltyScore('away', -1)">
                                        <i class="bi bi-dash"></i>
                    </button>
                                    <span class="penalty-label">어웨이팀</span>
                                    <button class="btn btn-sm btn-outline-success" onclick="updatePenaltyScore('away', 1)">
                                        <i class="bi bi-plus"></i>
                        </button>
                    </div>
                    </div>
                            <div class="text-center">
                                <button class="btn btn-info btn-sm" onclick="togglePenaltyDisplay()">
                                    <i class="bi bi-eye"></i> 표시
                        </button>
                </div>
            </div>
        </div>
                        </div>
            </div>
            
            <!-- 그래픽 토글 섹션 -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-palette"></i> 그래픽 표시
                        </h6>
                    </div>
                    <div class="card-body">
                        <!-- 대회명 입력 섹션 -->
                        <div class="mb-3">
                            <label for="tournamentText" class="form-label">
                                <i class="bi bi-trophy"></i> 대회명
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="tournamentText" placeholder="대회명을 입력하세요">
                                <button class="btn btn-outline-primary" type="button" onclick="updateTournamentText()">
                                    <i class="bi bi-check"></i> 적용
                                </button>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12 mb-2">
                                <button class="btn btn-success btn-sm w-100" id="toggle-top-scoreboard" onclick="toggleGraphic('top-scoreboard')">
                                    <i class="bi bi-eye"></i> 상단 스코어보드
                                </button>
                            </div>
                            <div class="col-12 mb-2">
                                <button class="btn btn-outline-secondary btn-sm w-100" id="toggle-vs-graphic" onclick="toggleGraphic('vs')">
                                    <i class="bi bi-eye-slash"></i> VS 그래픽
                                </button>
                            </div>
                            <div class="col-12 mb-2">
                                <button class="btn btn-outline-secondary btn-sm w-100" id="toggle-bottom-strip" onclick="toggleGraphic('bottom-strip')">
                                    <i class="bi bi-eye-slash"></i> 하단 스트립
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 득점 정보 입력 섹션 -->
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-trophy-fill"></i> 득점 정보 관리
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <!-- 홈팀 득점 정보 (좌측) -->
                            <div class="col-md-6">
                                <div class="team-goals-section">
                                    <h6 class="text-primary mb-3">
                                        <i class="bi bi-house"></i> 홈팀 득점
                                    </h6>
                                    
                                    <!-- 입력 폼 -->
                                    <div class="goal-input-form mb-3">
                                        <div class="row">
                                            <div class="col-8">
                                                <input type="text" class="form-control" id="home-player-input" placeholder="선수 이름">
                                            </div>
                                            <div class="col-3">
                                                <input type="text" class="form-control" id="home-time-input" placeholder="시간 (예: 15')">
                                            </div>
                                            <div class="col-1">
                                                <button class="btn btn-primary btn-sm" onclick="addHomeGoalFromInput()">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- 결과 리스트 -->
                                    <div id="home-goals-list" class="goals-list">
                                        <!-- 동적으로 추가되는 득점 정보들 -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 어웨이팀 득점 정보 (우측) -->
                            <div class="col-md-6">
                                <div class="team-goals-section">
                                    <h6 class="text-danger mb-3">
                                        <i class="bi bi-arrow-right"></i> 어웨이팀 득점
                                    </h6>
                                    
                                    <!-- 입력 폼 -->
                                    <div class="goal-input-form mb-3">
                                        <div class="row">
                                            <div class="col-8">
                                                <input type="text" class="form-control" id="away-player-input" placeholder="선수 이름">
                                            </div>
                                            <div class="col-3">
                                                <input type="text" class="form-control" id="away-time-input" placeholder="시간 (예: 15')">
                                            </div>
                                            <div class="col-1">
                                                <button class="btn btn-danger btn-sm" onclick="addAwayGoalFromInput()">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- 결과 리스트 -->
                                    <div id="away-goals-list" class="goals-list">
                                        <!-- 동적으로 추가되는 득점 정보들 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // 전역 변수
        const matchId = '<%= match.id %>';
        const socket = io();
        
        // 소켓 연결 상태 확인
        socket.on('connect', function() {
            console.log('✅ 컨트롤 페이지 소켓 연결됨');
            console.log('소켓 ID:', socket.id);
            updateConnectionStatus(true);
        });

        socket.on('disconnect', function() {
            console.log('❌ 컨트롤 페이지 소켓 연결 끊어짐');
            updateConnectionStatus(false);
        });

        socket.on('connect_error', function(error) {
            console.error('❌ 컨트롤 페이지 소켓 연결 오류:', error);
            updateConnectionStatus(false);
        });

        // 재연결 시도 로직
        socket.on('reconnect', function(attemptNumber) {
            console.log(`🔄 소켓 재연결 성공 (시도 ${attemptNumber}번째)`);
            updateConnectionStatus(true);
            
            // 재연결 시 현재 타이머 상태 요청 (서버와 동기화)
            console.log('=== 재연결 후 타이머 상태 요청 ===');
            socket.emit('request_timer_state', { matchId: matchId });
        });

        socket.on('reconnect_attempt', function(attemptNumber) {
            console.log(`🔄 소켓 재연결 시도 중... (${attemptNumber}번째)`);
            updateConnectionStatus(false);
        });

        socket.on('reconnect_error', function(error) {
            console.error('❌ 소켓 재연결 실패:', error);
            updateConnectionStatus(false);
        });

        socket.on('reconnect_failed', function() {
            console.error('❌ 소켓 재연결 완전 실패');
            updateConnectionStatus(false);
        });
        
        // 소켓 초기화 직후 상태 확인
        console.log('=== 컨트롤 페이지 소켓 초기화 직후 상태 ===');
        console.log('socket.connected:', socket.connected);
        console.log('matchId:', matchId);
        
        
        // 타이머 상태 (백업 폴더의 예전 방식 - 서버타이머와 완전 독립)
        const timerState = {
            startTime: Date.now(),
            pausedTime: 0,
            currentSeconds: 0,
            isRunning: false,
            lastServerTime: 0,
            lastUpdateTime: 0,
            localTimer: null
        };
        
        // 현재 타이머 모드 상태
        let currentTimerMode = 'legacy-timer'; // 기본값: 로컬 타이머
        
        // 소켓 연결
        socket.on('connect', function() {
            console.log('소켓 연결됨');
            socket.emit('join_match', { matchId: matchId });
            
            // 연결 상태 업데이트
            updateConnectionStatus(true);
            
            // 연결 시 현재 타이머 상태 요청 (재연결 시 정확한 동기화)
            console.log('=== 타이머 상태 요청 ===');
            socket.emit('request_timer_state', { matchId: matchId });
        });

        socket.on('disconnect', function() {
            console.log('서버와의 연결이 끊어졌습니다.');
            updateConnectionStatus(false);
        });
        
        // 득점 정보 로드 응답 이벤트
        socket.on('goalsLoaded', function(data) {
            console.log('=== 서버에서 득점 정보 수신 ===');
            console.log('수신된 득점 정보:', data);
            
            if (data.goals) {
                // 홈팀 득점 정보를 배열에 저장
                homeGoals = [];
                if (data.goals.home && data.goals.home.length > 0) {
                    data.goals.home.forEach((goal, index) => {
                        const goalId = `home_goal_${++goalIdCounter}`;
                        homeGoals.push({
                            id: goalId,
                            player: goal.player,
                            time: goal.time
                        });
                    });
                }
                
                // 어웨이팀 득점 정보를 배열에 저장
                awayGoals = [];
                if (data.goals.away && data.goals.away.length > 0) {
                    data.goals.away.forEach((goal, index) => {
                        const goalId = `away_goal_${++goalIdCounter}`;
                        awayGoals.push({
                            id: goalId,
                            player: goal.player,
                            time: goal.time
                        });
                    });
                }
                
                // UI 업데이트
                renderHomeGoalsList();
                renderAwayGoalsList();
                
                console.log('✅ 득점 정보 UI 업데이트 완료');
            } else {
                console.log('저장된 득점 정보가 없습니다.');
                homeGoals = [];
                awayGoals = [];
                renderHomeGoalsList();
                renderAwayGoalsList();
            }
        });
        
        // 경기 데이터 로드 응답 이벤트
        socket.on('matchDataLoaded', function(data) {
            console.log('=== 서버에서 경기 데이터 수신 ===');
            console.log('수신된 경기 데이터:', data);
            
            if (data) {
                // 점수 정보 업데이트
                if (data.home_score !== undefined) {
                    document.getElementById('home-score').value = data.home_score;
                    console.log('홈팀 점수 로드:', data.home_score);
                }
                if (data.away_score !== undefined) {
                    document.getElementById('away-score').value = data.away_score;
                    console.log('어웨이팀 점수 로드:', data.away_score);
                }
                
                // 팀명 정보 업데이트
                if (data.home_team) {
                    document.getElementById('home-team-name').value = data.home_team;
                    console.log('홈팀 이름 로드:', data.home_team);
                }
                if (data.away_team) {
                    document.getElementById('away-team-name').value = data.away_team;
                    console.log('어웨이팀 이름 로드:', data.away_team);
                }
                
                // 팀 컬러 정보 업데이트
                if (data.home_team_color) {
                    document.getElementById('home-team-color').value = data.home_team_color;
                    console.log('홈팀 컬러 로드:', data.home_team_color);
                }
                if (data.away_team_color) {
                    document.getElementById('away-team-color').value = data.away_team_color;
                    console.log('어웨이팀 컬러 로드:', data.away_team_color);
                }
                
                console.log('✅ 경기 데이터 UI 업데이트 완료');
            } else {
                console.log('경기 데이터가 없습니다.');
            }
        });
        
        // 득점 정보 저장 성공 응답 이벤트
        socket.on('goalsSaved', function(data) {
            console.log('=== 득점 정보 저장 성공 ===');
            console.log('서버 응답:', data);
            if (data.success) {
                console.log('✅ 득점 정보 DB 저장 완료');
            }
        });
        
        // 득점 정보 저장 실패 응답 이벤트
        socket.on('goalsSaveError', function(data) {
            console.error('=== 득점 정보 저장 실패 ===');
            console.error('서버 오류:', data.error);
            alert('득점 정보 저장에 실패했습니다: ' + data.error);
        });

        // 새로운 타이머 시스템 v2 토글
        function toggleTimerV2() {
            const isV2Enabled = document.getElementById('timer-v2-toggle').checked;
            const newMode = isV2Enabled ? 'server-timer' : 'legacy-timer';
            
            console.log('=== 타이머 시스템 v2 토글 ===');
            console.log('V2 활성화:', isV2Enabled);
            console.log('새로운 모드:', newMode);
            
            // 현재 타이머 모드 업데이트
            currentTimerMode = newMode;
            
            // 타이머 모드 변경 시 로컬 타이머 중지
            if (newMode === 'server-timer') {
                console.log('서버타이머 모드로 변경 - 로컬 타이머 중지');
                stopLocalTimer();
                timerState.isRunning = false;
                timerState.startTime = null;
                timerState.pausedTime = 0;
                timerState.currentSeconds = 0;
                updateTimerDisplay();
                saveTimerState();
            } else if (newMode === 'legacy-timer') {
                console.log('로컬타이머 모드로 변경 - 서버 타이머 중지');
                // 서버 타이머 중지 요청
                socket.emit('server_timer_control', {
                    matchId: matchId,
                    action: 'stop'
                });
            }
            
            // 서버에 타이머 모드 변경 요청
            socket.emit('timer_mode_change', { 
                matchId: matchId, 
                newMode: newMode 
            });
            
            console.log('타이머 모드 변경 요청 전송:', newMode);
        }

        // 타이머 시작 (모드에 따른 분기 처리)
        function startTimer() {
            console.log('=== 타이머 시작 ===');
            console.log('matchId:', matchId);
            console.log('현재 타이머 모드:', currentTimerMode);
            
            if (currentTimerMode === 'server-timer') {
                // 서버 타이머 모드
                console.log('서버 타이머 시작 요청');
                socket.emit('server_timer_control', {
                    matchId: matchId,
                    action: 'start'
                });
            } else {
                // 로컬 타이머 모드
                console.log('로컬 타이머 시작');
                if (!timerState.isRunning) {
                    timerState.isRunning = true;
                    timerState.startTime = Date.now();
                    
                    // 로컬 타이머 시작
                    startLocalTimer();
                    
                    // 로컬 타이머 상태 저장
                    saveTimerState();
                    
                    // 오버레이 페이지에 로컬 타이머 상태 전송
                    socket.emit('local_timer_update', {
                        matchId: matchId,
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning,
                        startTime: timerState.startTime,
                        pausedTime: timerState.pausedTime
                    });
                    
                    console.log('로컬 타이머 시작됨:', {
                        startTime: timerState.startTime,
                        pausedTime: timerState.pausedTime,
                        isRunning: timerState.isRunning
                    });
                }
            }
        }

        // 타이머 정지 (모드에 따른 분기 처리)
        function stopTimer() {
            console.log('=== 타이머 정지 ===');
            console.log('matchId:', matchId);
            console.log('현재 타이머 모드:', currentTimerMode);
            
            if (currentTimerMode === 'server-timer') {
                // 서버 타이머 모드
                console.log('서버 타이머 정지 요청');
                socket.emit('server_timer_control', {
                    matchId: matchId,
                    action: 'stop'
                });
            } else {
                // 로컬 타이머 모드
                console.log('로컬 타이머 정지');
                if (timerState.isRunning) {
                    timerState.isRunning = false;
                    const currentTime = Math.floor((Date.now() - timerState.startTime) / 1000);
                    timerState.pausedTime += currentTime;
                    
                    // 로컬 타이머 정지
                    stopLocalTimer();
                    
                    // 로컬 타이머 상태 저장
                    saveTimerState();
                    
                    // 오버레이 페이지에 로컬 타이머 상태 전송
                    socket.emit('local_timer_update', {
                        matchId: matchId,
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning,
                        startTime: timerState.startTime,
                        pausedTime: timerState.pausedTime
                    });
                    
                    console.log('로컬 타이머 정지됨:', {
                        pausedTime: timerState.pausedTime,
                        isRunning: timerState.isRunning
                    });
                }
            }
        }

        // 타이머 리셋 (모드에 따른 분기 처리)
        function resetTimer() {
            console.log('=== 타이머 리셋 ===');
            console.log('matchId:', matchId);
            console.log('현재 타이머 모드:', currentTimerMode);
            
            if (currentTimerMode === 'server-timer') {
                // 서버 타이머 모드
                console.log('서버 타이머 리셋 요청');
                socket.emit('server_timer_control', {
                    matchId: matchId,
                    action: 'reset'
                });
            } else {
                // 로컬 타이머 모드
                console.log('로컬 타이머 리셋');
                timerState.isRunning = false;
                timerState.currentSeconds = 0;
                timerState.startTime = Date.now();
                timerState.pausedTime = 0;
                
                // 로컬 타이머 정지
                stopLocalTimer();
                updateTimerDisplay();
                
                // 로컬 타이머 상태 저장
                saveTimerState();
                
                // 오버레이 페이지에 로컬 타이머 상태 전송
                socket.emit('local_timer_update', {
                    matchId: matchId,
                    currentSeconds: timerState.currentSeconds,
                    isRunning: timerState.isRunning,
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime
                });
                
                console.log('로컬 타이머 리셋됨:', {
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime,
                    isRunning: timerState.isRunning
                });
            }
        }

        // 시간 수정 토글 (기존 방식)
        function toggleTimeEdit() {
            console.log('=== 시간 수정 토글 ===');
            const timeEditContainer = document.getElementById('time-edit-container');
            const timeEditInput = document.getElementById('time-edit-input');
            
            // 현재 시간을 00:00 형식으로 설정
            const minutes = Math.floor(timerState.currentSeconds / 60);
            const seconds = timerState.currentSeconds % 60;
            timeEditInput.value = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // 컨테이너 표시/숨김 토글
            if (timeEditContainer.style.display === 'none') {
                timeEditContainer.style.display = 'block';
                timeEditInput.focus();
                timeEditInput.select();
            } else {
                timeEditContainer.style.display = 'none';
            }
        }
        

        // 경기 데이터 로드 함수 (WebSocket 방식)
        function loadMatchData() {
            try {
                console.log('=== 경기 데이터 로드 시작 (WebSocket 방식) ===');
                console.log('matchId:', matchId);
                
                // WebSocket을 통해 서버에서 경기 데이터 요청
                socket.emit('loadMatchData', {
                    matchId: matchId
                });
                
                console.log('✅ 경기 데이터 로드 요청 전송 완료');
            } catch (error) {
                console.error('경기 데이터 로드 중 오류 발생:', error);
            }
        }

        // 타이머 디스플레이 업데이트
        function updateTimerDisplay(overrideSeconds = null) {
            // 서버 타이머 모드일 때는 전달받은 값을 사용, 그렇지 않으면 timerState 사용
            const targetSeconds = overrideSeconds !== null ? overrideSeconds : timerState.currentSeconds;
            
            // NaN 값 방지 및 유효성 검사
            let safeSeconds = 0;
            if (typeof targetSeconds === 'number' && !isNaN(targetSeconds) && isFinite(targetSeconds)) {
                safeSeconds = Math.max(0, targetSeconds);
            }
            
            const minutes = Math.floor(safeSeconds / 60);
            const seconds = safeSeconds % 60;
            document.getElementById('timer-display').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // 타이머 상태 저장 함수 (로컬 스토리지 + DB 저장)
        function saveTimerState() {
            const stateToSave = {
                currentSeconds: timerState.currentSeconds,
                isRunning: timerState.isRunning,
                startTime: timerState.startTime,
                pausedTime: timerState.pausedTime,
                lastSaveTime: Date.now()
            };
            
            // 로컬 스토리지에 저장
            localStorage.setItem(`timer_state_${matchId}`, JSON.stringify(stateToSave));
            console.log('로컬 타이머 상태 저장됨 (localStorage):', stateToSave);
            
            // 서버에 로컬 타이머 상태 저장 요청
            socket.emit('save_local_timer_state', {
                matchId: matchId,
                timerState: stateToSave
            });
        }

        // 로컬 타이머 시작 (백업 폴더의 예전 방식 - 서버타이머와 완전 독립)
        function startLocalTimer() {
            if (timerState.localTimer) {
                clearInterval(timerState.localTimer);
            }
            
            timerState.localTimer = setInterval(() => {
                if (timerState.isRunning) {
                    const now = Date.now();
                    const elapsed = Math.floor((now - timerState.startTime) / 1000);
                    timerState.currentSeconds = timerState.pausedTime + elapsed;
                    updateTimerDisplay();
                    
                    // 오버레이 페이지에 로컬 타이머 상태 주기적 전송 (1초마다)
                    socket.emit('local_timer_update', {
                        matchId: matchId,
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning,
                        startTime: timerState.startTime,
                        pausedTime: timerState.pausedTime
                    });
                }
            }, 1000);
            
            console.log('로컬 타이머 시작됨 (독립 모드):', {
                startTime: timerState.startTime,
                pausedTime: timerState.pausedTime,
                isRunning: timerState.isRunning
            });
        }

        // 로컬 타이머 정지
        function stopLocalTimer() {
            if (timerState.localTimer) {
                clearInterval(timerState.localTimer);
                timerState.localTimer = null;
                console.log('로컬 타이머 정지됨');
            }
        }

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(connected) {
            const indicator = document.getElementById('connection-indicator');
            const text = document.getElementById('connection-text');
            
            if (connected) {
                indicator.className = 'status-indicator connected';
                text.textContent = '서버 연결됨';
            } else {
                indicator.className = 'status-indicator disconnected';
                text.textContent = '서버 연결 끊김';
            }
        }

        // 팀 위치 변경 함수
        async function swapTeams() {
            if (!confirm('홈팀과 어웨이팀의 정보를 서로 바꾸시겠습니까?')) {
                return;
            }
            
            try {
                console.log('=== 팀 위치 변경 시작 ===');
                
                // 서버에 위치 변경 요청
                const response = await fetch(`/api/matches/${matchId}/swap-teams`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    throw new Error('팀 위치 변경 실패');
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || '팀 위치 변경 실패');
                }
                
                console.log('팀 위치 변경 API 호출 성공');
                
                // 즉시 UI 업데이트 (새로고침 없이)
                await updateTeamsAfterSwap();
                
                // 성공 메시지
                alert('팀 위치가 성공적으로 변경되었습니다.');
                
                console.log('팀 위치 변경 완료');
                
            } catch (error) {
                console.error('팀 위치 변경 중 오류 발생:', error);
                alert('팀 위치 변경 중 오류가 발생했습니다.');
            }
        }

        // 승부차기 점수 관리
        let currentPenaltyText = '0 (승부차기) 0';
        
        function updatePenaltyScore(team, change) {
            console.log('=== 승부차기 점수 업데이트 (실시간 반영) ===');
            console.log('team:', team, 'change:', change);
            
            // 정규식으로 홈팀과 어웨이팀 점수 추출
            const match = currentPenaltyText.match(/(\d+)\s*\(승부차기\)\s*(\d+)/);
            if (!match) {
                console.log('승부차기 형식을 찾을 수 없습니다');
                return;
            }
            
            let homeScore = parseInt(match[1]);
            let awayScore = parseInt(match[2]);
            
            // 점수 업데이트
            if (team === 'home') {
                homeScore = Math.max(0, homeScore + change);
            } else if (team === 'away') {
                awayScore = Math.max(0, awayScore + change);
            }
            
            console.log('업데이트된 점수 - 홈:', homeScore, '어웨이:', awayScore);
            
            // 새로운 텍스트 생성
            const newText = `${homeScore} (승부차기) ${awayScore}`;
            console.log('새로운 텍스트:', newText);
            
            // 현재 텍스트 업데이트
            currentPenaltyText = newText;
            document.getElementById('penalty-text-display').textContent = newText;
            
            // 서버에 저장 (모바일과 동일)
            savePenaltyScoreToServer(newText);
            
            // 실시간 동기화 (모바일과 동일)
            socket.emit('updateExtraBoxText', {
                matchId: matchId,
                text: newText
            });
            
            console.log('승부차기 점수 실시간 업데이트 및 저장 완료');
        }

        // 승부차기 서버 저장 함수 (모바일과 동일)
        async function savePenaltyScoreToServer(text) {
            try {
                console.log('=== 승부차기 서버 저장 ===');
                const response = await fetch('/api/extra-box-text', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        matchId: matchId,
                        sportType: 'soccer',
                        text: text
                    })
                });
                
                const data = await response.json();
                if (data.success) {
                    console.log('승부차기 텍스트 서버 저장 완료:', text);
            } else {
                    console.error('승부차기 텍스트 서버 저장 실패:', data.error);
                }
            } catch (error) {
                console.error('승부차기 텍스트 서버 저장 오류:', error);
            }
        }


        // 승부차기 표시 토글 함수 (모바일 컨트롤과 동일)
        function togglePenaltyDisplay() {
            console.log('=== 승부차기 표시 토글 버튼 클릭 ===');
            
            // 서버에 승부차기 표시 토글 요청
            socket.emit('toggleExtraBox', {
                matchId: matchId
            });
            
            // 버튼 상태 변경 피드백
            const toggleButton = event.target.closest('button');
            const originalHTML = toggleButton.innerHTML;
            
            if (toggleButton.innerHTML.includes('표시')) {
                toggleButton.innerHTML = '<i class="bi bi-eye-slash"></i> 숨김';
                toggleButton.classList.remove('btn-info');
                toggleButton.classList.add('btn-warning');
            } else {
                toggleButton.innerHTML = '<i class="bi bi-eye"></i> 표시';
                toggleButton.classList.remove('btn-warning');
                toggleButton.classList.add('btn-info');
            }
            
            console.log('승부차기 표시 토글 요청 전송 완료');
        }

        // 승부차기 텍스트 로드 함수
        async function loadPenaltyText() {
            try {
                console.log('=== 승부차기 텍스트 로드 시작 ===');
                
                const response = await fetch(`/api/extra-box-text/soccer/${matchId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.text) {
                        currentPenaltyText = data.text;
                        document.getElementById('penalty-text-display').textContent = data.text;
                        console.log('승부차기 텍스트 로드 성공:', data.text);
            } else {
                        console.log('저장된 승부차기 텍스트가 없습니다. 기본값 사용');
                    }
            } else {
                    console.log('승부차기 텍스트 로드 실패, 기본값 사용');
                    }
                } catch (error) {
                console.error('승부차기 텍스트 로드 중 오류 발생:', error);
            }
        }

        // 대회명 로드 함수
        async function loadTournamentText() {
            try {
                console.log('=== 대회명 로드 시작 ===');
                console.log('matchId:', matchId);
                console.log('API URL:', `/api/tournament-text/${matchId}`);
                
                const response = await fetch(`/api/tournament-text/${matchId}`);
                console.log('API 응답 상태:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('API 응답 데이터:', data);
                    
                    if (data.success && data.tournamentText !== undefined) {
                        const tournamentTextElement = document.getElementById('tournamentText');
                        console.log('대회명 텍스트 박스 엘리먼트:', tournamentTextElement);
                        
                        if (tournamentTextElement) {
                            tournamentTextElement.value = data.tournamentText || '';
                            console.log('대회명 로드 성공:', data.tournamentText);
                            console.log('텍스트 박스 값 설정 후:', tournamentTextElement.value);
                        } else {
                            console.error('대회명 텍스트 박스를 찾을 수 없습니다.');
                        }
                    } else {
                        console.log('저장된 대회명이 없습니다. 응답 데이터:', data);
                    }
                } else {
                    console.log('대회명 로드 실패. 응답 상태:', response.status);
                    const errorText = await response.text();
                    console.log('오류 응답:', errorText);
                }
            } catch (error) {
                console.error('대회명 로드 중 오류 발생:', error);
            }
        }

        // 득점 정보 관리 함수들
        let homeGoals = [];
        let awayGoals = [];
        let goalIdCounter = 0;

        // 홈팀 득점 추가 (새로운 입력 방식)
        async function addHomeGoalFromInput() {
            const playerInput = document.getElementById('home-player-input');
            const timeInput = document.getElementById('home-time-input');
            
            const player = playerInput.value.trim();
            const time = timeInput.value.trim();
            
            if (!player || !time) {
                alert('선수 이름과 시간을 모두 입력해주세요.');
                return;
            }
            
            const goalId = `home_goal_${++goalIdCounter}`;
            const goal = { id: goalId, player, time };
            
            homeGoals.push(goal);
            renderHomeGoalsList();
            
            // 입력 필드 초기화
            playerInput.value = '';
            timeInput.value = '';
            
            console.log('홈팀 득점 추가:', goal);
            
            // 자동으로 서버에 저장
            await saveGoalsToServer();
        }

        // 어웨이팀 득점 추가 (새로운 입력 방식)
        async function addAwayGoalFromInput() {
            const playerInput = document.getElementById('away-player-input');
            const timeInput = document.getElementById('away-time-input');
            
            const player = playerInput.value.trim();
            const time = timeInput.value.trim();
            
            if (!player || !time) {
                alert('선수 이름과 시간을 모두 입력해주세요.');
                return;
            }
            
            const goalId = `away_goal_${++goalIdCounter}`;
            const goal = { id: goalId, player, time };
            
            awayGoals.push(goal);
            renderAwayGoalsList();
            
            // 입력 필드 초기화
            playerInput.value = '';
            timeInput.value = '';
            
            console.log('어웨이팀 득점 추가:', goal);
            
            // 자동으로 서버에 저장
            await saveGoalsToServer();
        }
        
        // 홈팀 득점 리스트 렌더링
        function renderHomeGoalsList() {
            const container = document.getElementById('home-goals-list');
            container.innerHTML = '';
            
            if (homeGoals.length === 0) {
                container.innerHTML = '<div class="text-muted text-center py-3">등록된 득점이 없습니다.</div>';
                return;
            }
            
            homeGoals.forEach(goal => {
                const goalItem = document.createElement('div');
                goalItem.className = 'goal-item';
                goalItem.innerHTML = `
                    <input type="text" class="form-control goal-player-input" value="${goal.player}" 
                           data-goal-id="${goal.id}" data-field="player" placeholder="선수 이름">
                    <input type="text" class="form-control goal-time-input" value="${goal.time}" 
                           data-goal-id="${goal.id}" data-field="time" placeholder="시간">
                    <button class="btn btn-outline-danger btn-sm" onclick="removeHomeGoal('${goal.id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                `;
                container.appendChild(goalItem);
            });
            
            // 편집 가능한 입력 필드에 이벤트 리스너 추가
            addGoalEditListeners();
        }
        
        // 어웨이팀 득점 리스트 렌더링
        function renderAwayGoalsList() {
            const container = document.getElementById('away-goals-list');
            container.innerHTML = '';
            
            if (awayGoals.length === 0) {
                container.innerHTML = '<div class="text-muted text-center py-3">등록된 득점이 없습니다.</div>';
                return;
            }
            
            awayGoals.forEach(goal => {
                const goalItem = document.createElement('div');
                goalItem.className = 'goal-item';
                goalItem.innerHTML = `
                    <input type="text" class="form-control goal-player-input" value="${goal.player}" 
                           data-goal-id="${goal.id}" data-field="player" placeholder="선수 이름">
                    <input type="text" class="form-control goal-time-input" value="${goal.time}" 
                           data-goal-id="${goal.id}" data-field="time" placeholder="시간">
                    <button class="btn btn-outline-danger btn-sm" onclick="removeAwayGoal('${goal.id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                `;
                container.appendChild(goalItem);
            });
            
            // 편집 가능한 입력 필드에 이벤트 리스너 추가
            addGoalEditListeners();
        }
        
        // 홈팀 득점 제거
        async function removeHomeGoal(goalId) {
            homeGoals = homeGoals.filter(goal => goal.id !== goalId);
            renderHomeGoalsList();
            console.log('홈팀 득점 제거:', goalId);
            
            // 자동으로 서버에 저장
            await saveGoalsToServer();
        }
        
        // 어웨이팀 득점 제거
        async function removeAwayGoal(goalId) {
            awayGoals = awayGoals.filter(goal => goal.id !== goalId);
            renderAwayGoalsList();
            console.log('어웨이팀 득점 제거:', goalId);
            
            // 자동으로 서버에 저장
            await saveGoalsToServer();
        }

        // 득점 정보 수집 (새로운 방식)
        function collectGoals() {
            // 이미 homeGoals, awayGoals 배열에 저장되어 있음
            console.log('수집된 홈팀 득점:', homeGoals);
            console.log('수집된 어웨이팀 득점:', awayGoals);
        }
        
        // 편집 가능한 입력 필드에 이벤트 리스너 추가
        function addGoalEditListeners() {
            // 기존 이벤트 리스너 제거 (중복 방지)
            document.querySelectorAll('.goal-player-input, .goal-time-input').forEach(input => {
                input.removeEventListener('blur', handleGoalEdit);
                input.removeEventListener('keypress', handleGoalKeypress);
            });
            
            // 새로운 이벤트 리스너 추가
            document.querySelectorAll('.goal-player-input, .goal-time-input').forEach(input => {
                input.addEventListener('blur', handleGoalEdit);
                input.addEventListener('keypress', handleGoalKeypress);
            });
        }
        
        // 득점 정보 편집 처리
        async function handleGoalEdit(event) {
            const input = event.target;
            const goalId = input.getAttribute('data-goal-id');
            const field = input.getAttribute('data-field');
            const newValue = input.value.trim();
            
            console.log(`득점 정보 편집: ${goalId} - ${field} = ${newValue}`);
            
            // 홈팀 득점 정보 업데이트
            const homeGoal = homeGoals.find(goal => goal.id === goalId);
            if (homeGoal) {
                homeGoal[field] = newValue;
                console.log('홈팀 득점 정보 업데이트:', homeGoal);
                await saveGoalsToServer();
                return;
            }
            
            // 어웨이팀 득점 정보 업데이트
            const awayGoal = awayGoals.find(goal => goal.id === goalId);
            if (awayGoal) {
                awayGoal[field] = newValue;
                console.log('어웨이팀 득점 정보 업데이트:', awayGoal);
                await saveGoalsToServer();
                return;
            }
        }
        
        // 엔터 키 처리
        function handleGoalKeypress(event) {
            if (event.key === 'Enter') {
                event.target.blur(); // 포커스 해제하여 자동 저장 트리거
            }
        }

        // 득점 정보 서버 저장
        async function saveGoalsToServer() {
            try {
                console.log('=== 득점 정보 서버 저장 시작 ===');
                
                // 득점 정보 수집
                collectGoals();
                
                // WebSocket을 통해 서버에 직접 득점 정보 저장 요청
                console.log('=== WebSocket을 통한 득점 정보 저장 ===');
                console.log('홈팀 득점:', homeGoals);
                console.log('어웨이팀 득점:', awayGoals);
                
                // WebSocket 이벤트로 득점 정보 저장 요청
                socket.emit('saveGoals', {
                    matchId: matchId,
                    homeGoals: homeGoals,
                    awayGoals: awayGoals
                });
                
                console.log('✅ 득점 정보 저장 요청 전송 완료');
            } catch (error) {
                console.error('득점 정보 저장 중 오류:', error);
                alert('득점 정보 저장 중 오류가 발생했습니다.');
            }
        }

        // 저장된 득점 정보 로드 (DB에서 불러오기)
        async function loadGoalsFromServer() {
            try {
                console.log('=== 저장된 득점 정보 로드 시작 ===');
                
                // WebSocket을 통해 서버에서 득점 정보 요청
                console.log('=== WebSocket을 통한 득점 정보 로드 ===');
                
                // WebSocket 이벤트로 득점 정보 요청
                socket.emit('loadGoals', {
                    matchId: matchId
                });
                
                console.log('✅ 득점 정보 로드 요청 전송 완료');
            } catch (error) {
                console.error('득점 정보 로드 중 오류:', error);
                homeGoals = [];
                awayGoals = [];
                renderHomeGoalsList();
                renderAwayGoalsList();
            }
        }

        // 그래픽 토글 함수
        function toggleGraphic(graphicType) {
            console.log(`=== 그래픽 토글: ${graphicType} ===`);
            
            // graphicType에 따라 올바른 버튼 ID 매핑
            let buttonId;
            switch (graphicType) {
                case 'top-scoreboard':
                    buttonId = 'toggle-top-scoreboard';
                    break;
                case 'vs':
                    buttonId = 'toggle-vs-graphic';
                    break;
                case 'bottom-strip':
                    buttonId = 'toggle-bottom-strip';
                    break;
                default:
                    console.error('알 수 없는 그래픽 타입:', graphicType);
                    return;
            }
            
            const button = document.getElementById(buttonId);
            if (!button) {
                console.error(`버튼을 찾을 수 없습니다: ${buttonId}`);
                return;
            }
            
            const isVisible = button.classList.contains('btn-success');
            const newState = !isVisible;
            
            console.log('현재 상태:', isVisible ? '표시' : '숨김');
            console.log('새로운 상태:', newState ? '표시' : '숨김');
            
            // 버튼 상태 업데이트
            if (newState) {
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-success');
                button.innerHTML = `<i class="bi bi-eye"></i> ${getGraphicName(graphicType)}`;
            } else {
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
                button.innerHTML = `<i class="bi bi-eye-slash"></i> ${getGraphicName(graphicType)}`;
            }
            
            // WebSocket 이벤트 전송
            const eventData = {
                matchId: matchId,
                graphicType: graphicType,
                visible: newState
            };
            
            // VS 그래픽이나 하단 스트립이 표시될 때 대회명 자동 적용
            if ((graphicType === 'vs' || graphicType === 'bottom-strip') && newState) {
                console.log(`=== ${graphicType} 토글: 대회명 자동 적용 ===`);
                applyTournamentTextAutomatically();
            }
            
            // 하단 스트립의 경우 DB에서 최신 데이터를 가져와서 전송
            if (graphicType === 'bottom-strip' && newState) {
                console.log('=== 하단 스트립 토글: DB에서 최신 데이터 로드 ===');
                
                // WebSocket을 통해 서버에서 최신 경기 데이터와 득점 정보 요청
                socket.emit('loadMatchData', { matchId: matchId });
                socket.emit('loadGoals', { matchId: matchId });
                
                // 서버에서 데이터를 받은 후 토글 이벤트 전송
                socket.once('matchDataLoaded', function(matchData) {
                    socket.once('goalsLoaded', function(goalsData) {
                        console.log('=== 서버에서 최신 데이터 수신 완료 ===');
                        console.log('경기 데이터:', matchData);
                        console.log('득점 정보:', goalsData);
                        
                        // 최신 스코어 정보 추가
                        if (matchData) {
                            eventData.score = {
                                home: matchData.home_score || 0,
                                away: matchData.away_score || 0
                            };
                        }
                        
                        // 최신 득점 정보 추가
                        if (goalsData && goalsData.goals) {
                            eventData.goals = {
                                home: goalsData.goals.home || [],
                                away: goalsData.goals.away || []
                            };
                        } else {
                            eventData.goals = {
                                home: [],
                                away: []
                            };
                        }
                        
                        console.log('하단 스트립과 함께 전송할 데이터:', eventData);
                        
                        // WebSocket 이벤트 전송
                        socket.emit('toggleGraphic', eventData);
                        console.log(`✅ 컨트롤: 그래픽 토글 이벤트 전송 완료: ${graphicType} = ${newState}`);
                    });
                });
                return; // 여기서 함수 종료
            }
            
            console.log('=== 컨트롤: WebSocket 이벤트 전송 ===');
            console.log('socket.connected:', socket.connected);
            console.log('전송할 데이터:', eventData);
            console.log('이벤트 전송 시간:', new Date().toISOString());
            
            socket.emit('toggleGraphic', eventData);
            
            console.log(`✅ 컨트롤: 그래픽 토글 이벤트 전송 완료: ${graphicType} = ${newState}`);
        }
        
        // 그래픽 이름 반환 함수
        function getGraphicName(graphicType) {
            const names = {
                'top-scoreboard': '상단 스코어보드',
                'vs': 'VS 그래픽',
                'bottom-strip': '하단 스트립'
            };
            return names[graphicType] || graphicType;
        }

        // 대회명 업데이트 함수
        function updateTournamentText() {
            const tournamentText = document.getElementById('tournamentText').value.trim();
            console.log('=== 대회명 업데이트 ===');
            console.log('입력된 대회명:', tournamentText);
            
            if (!tournamentText) {
                alert('대회명을 입력해주세요.');
                return;
            }
            
            // WebSocket을 통해 대회명 업데이트 이벤트 전송
            socket.emit('updateTournamentText', {
                matchId: matchId,
                tournamentText: tournamentText
            });
            
            console.log('✅ 대회명 업데이트 이벤트 전송 완료');
        }

        // 대회명 자동 적용 함수
        function applyTournamentTextAutomatically() {
            const tournamentText = document.getElementById('tournamentText').value.trim();
            console.log('=== 대회명 자동 적용 ===');
            console.log('현재 대회명:', tournamentText);
            
            if (tournamentText) {
                // WebSocket을 통해 대회명 업데이트 이벤트 전송
                socket.emit('updateTournamentText', {
                    matchId: matchId,
                    tournamentText: tournamentText
                });
                console.log('✅ 대회명 자동 적용 완료');
            } else {
                console.log('대회명이 비어있어 자동 적용하지 않음');
            }
        }

        // 타이머 업데이트 루프 (서버 시작 시간 기준으로 정확한 계산)
        setInterval(() => {
                if (timerState.isRunning) {
                    // 서버에서 받은 시작 시간을 기준으로 정확한 계산 (오버레이 페이지와 동일한 방식)
                    const currentTime = Date.now();
                    const elapsedTime = Math.floor((currentTime - timerState.startTime) / 1000);
                    timerState.currentSeconds = timerState.pausedTime + elapsedTime;
                    updateTimerDisplay();
                }
            }, 1000);

        // 점수 업데이트
        function updateScore(team, change) {
            console.log(`=== ${team}팀 점수 업데이트 ===`);
            console.log('변경량:', change);
            
            const scoreElement = document.getElementById(`${team}-score`);
            const currentScore = parseInt(scoreElement.value) || 0;
            const newScore = Math.max(0, currentScore + change);
            
            console.log('현재 점수:', currentScore, '→ 새로운 점수:', newScore);
            
            scoreElement.value = newScore;
            
            // 기존 방식과 동일하게 emitScoreUpdate 함수 사용
            emitScoreUpdate();
            
            console.log(`${team}팀 점수 업데이트 완료: ${newScore}`);
        }

        // 점수 업데이트 이벤트 전송 함수 (기존 코드와 동일)
        function emitScoreUpdate() {
            const homeScore = document.getElementById('home-score').value || '0';
            const awayScore = document.getElementById('away-score').value || '0';
            
            console.log('=== 점수 변경 이벤트 전송 ===');
            console.log('현재 점수:', { homeScore, awayScore });
            console.log('변환된 점수:', { homeScore: parseInt(homeScore), awayScore: parseInt(awayScore) });
            console.log('matchId:', matchId);
            
            // match_updated 이벤트로 통일 (기존 코드와 동일)
            socket.emit('match_updated', {
                    matchId: matchId,
                home_score: parseInt(homeScore),
                away_score: parseInt(awayScore),
                state: '전반'
            });
            
            console.log('점수 업데이트 이벤트 전송 완료');
        }

        // 팀명 업데이트
        async function updateTeamName(team) {
            console.log(`=== ${team}팀 이름 업데이트 ===`);
            const nameInput = document.getElementById(`${team}-team-name`);
            const newName = nameInput.value;
            
            console.log('새로운 팀명:', newName);
            
            try {
                // 라우터에 정의된 올바른 API 호출
                const response = await fetch(`/api/matches/${matchId}/team-name`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamName: newName
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log(`${team}팀 이름 업데이트 성공:`, result);
                    
                    // 헤더 레이블 실시간 업데이트
                    console.log(`헤더 업데이트 시도: ${team}팀, 새 이름: ${newName}`);
                    
                    // 각 팀 섹션의 헤더를 직접 선택
                    let headerElement = null;
                    if (team === 'home') {
                        // 홈팀 헤더 선택 (첫 번째 .card-header h5)
                        headerElement = document.querySelector('.card-header.bg-primary h5');
                    } else if (team === 'away') {
                        // 어웨이팀 헤더 선택 (두 번째 .card-header h5)
                        headerElement = document.querySelector('.card-header.bg-info h5');
                    }
                    
                    if (headerElement) {
                        if (team === 'home') {
                            headerElement.innerHTML = `<i class="bi bi-house"></i> ${newName}`;
                        } else if (team === 'away') {
                            headerElement.innerHTML = `<i class="bi bi-airplane"></i> ${newName}`;
                        }
                        console.log(`${team}팀 헤더 레이블 업데이트 성공: ${newName}`);
                    } else {
                        console.error(`${team}팀 헤더 요소를 찾을 수 없습니다.`);
                    }
                    
                    // 성공 메시지 표시
                    const button = document.querySelector(`[data-team="${team}"].save-team-name`);
                    const originalText = button.innerHTML;
                    button.innerHTML = '<i class="bi bi-check-lg"></i> 저장됨';
                    button.classList.add('btn-success');
                    button.classList.remove('btn-outline-success');
                    
                    // 2초 후 원래 상태로 복원
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.classList.remove('btn-success');
                        button.classList.add('btn-outline-success');
                    }, 2000);
                } else {
                    console.error(`${team}팀 이름 업데이트 실패:`, response.status);
                    alert('팀명 저장에 실패했습니다.');
                }
            } catch (error) {
                console.error(`${team}팀 이름 업데이트 중 오류 발생:`, error);
                alert('팀명 저장 중 오류가 발생했습니다.');
            }
            
            console.log(`${team}팀 이름 업데이트 완료: ${newName}`);
        }

        // 경기 정보 업데이트 함수 (기존 코드와 동일)
        async function updateMatchInfo() {
            try {
                console.log('=== 경기 정보 업데이트 시작 ===');
                
                const homeTeam = document.getElementById('home-team-name').value;
                const awayTeam = document.getElementById('away-team-name').value;
                const homeScore = document.getElementById('home-score').value;
                const awayScore = document.getElementById('away-score').value;
                
                console.log('업데이트할 데이터:', {
                    homeTeam, awayTeam, homeScore, awayScore
                });
                
                const response = await fetch(`/api/matches/${matchId}`, {
                    method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                        home_team: homeTeam,
                        away_team: awayTeam,
                        home_score: parseInt(homeScore),
                        away_score: parseInt(awayScore)
                        })
                    });
                    
                if (response.ok) {
                    console.log('경기 정보 업데이트 성공');
                    } else {
                    console.error('경기 정보 업데이트 실패:', response.status);
                }
            } catch (error) {
                console.error('경기 정보 업데이트 중 오류:', error);
            }
        }

        // 팀 컬러 저장
        async function saveTeamColor(team) {
            console.log(`=== ${team}팀 컬러 저장 ===`);
            const colorInput = document.getElementById(`${team}-team-color`);
            const headerInput = document.getElementById(`${team}-team-header`);
            const color = colorInput.value;
            const headerText = headerInput ? headerInput.value : '';
            
            console.log('새로운 팀 컬러:', color);
            console.log('팀 타입:', team);
            console.log('매치 ID:', matchId);
            
            try {
                // 1. API 호출로 DB 업데이트
                const response = await fetch(`/api/matches/${matchId}/team-color`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamColor: color,
                        headerText: headerText
                    })
                });
                
                if (response.ok) {
                    console.log(`${team}팀 컬러 API 업데이트 성공: ${color}`);
                } else {
                    console.error(`${team}팀 컬러 API 업데이트 실패: ${response.status}`);
                }
            } catch (error) {
                console.error(`${team}팀 컬러 API 업데이트 오류:`, error);
            }
            
            // 2. WebSocket 이벤트로 DB 정보 업데이트 알림
            if (socket.connected) {
                socket.emit('dataChanged', {
                    matchId: matchId,
                    type: 'teamColor',
                    teamType: team
                });
                console.log('✅ dataChanged 이벤트 전송 완료');
            } else {
                console.error('❌ 소켓 연결되지 않음 - dataChanged 이벤트 전송 실패');
            }
            
            console.log(`${team}팀 컬러 저장 이벤트 전송 완료: ${color}`);
        }
        
        // 팀로고 업로드 처리
        function handleLogoUpload(team) {
            const fileInput = document.getElementById(`${team}-team-logo`);
            const file = fileInput.files[0];
            
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const previewImg = document.getElementById(`${team}-preview-logo`);
                    const previewBg = document.getElementById(`${team}-preview-bg`);
                    const noLogoText = previewBg.querySelector('.no-logo-text');
                    
                    previewImg.src = e.target.result;
                    previewImg.style.display = 'block';
                    noLogoText.style.display = 'none';
                    
                    console.log(`${team}팀 로고 미리보기 업데이트`);
                };
                reader.readAsDataURL(file);
            }
        }
        
        // 팀로고 배경색 변경 처리
        function handleLogoBgChange(team) {
            const bgColor = document.getElementById(`${team}-team-logo-bg`).value;
            const previewBg = document.getElementById(`${team}-preview-bg`);
            
            previewBg.style.backgroundColor = bgColor;
            console.log(`${team}팀 로고 배경색 변경: ${bgColor}`);
        }
        
        // 팀로고 배경색 저장
        async function saveTeamLogoBg(team) {
            const bgColor = document.getElementById(`${team}-team-logo-bg`).value;
            
            try {
                const response = await fetch(`/api/matches/${matchId}/team-logo-bg`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        logoBgColor: bgColor
                    })
                });
                
                if (response.ok) {
                    console.log(`${team}팀 로고 배경색 저장 성공: ${bgColor}`);
                    
                    // 미리보기 업데이트
                    const previewBg = document.getElementById(`${team}-preview-bg`);
                    previewBg.style.backgroundColor = bgColor;
                    
                    // WebSocket 이벤트로 DB 정보 업데이트 알림
                    if (socket.connected) {
                        socket.emit('dataChanged', {
                            matchId: matchId,
                            type: 'teamLogo',
                            teamType: team
                        });
                        console.log('✅ dataChanged 이벤트 전송 완료');
                    } else {
                        console.error('❌ 소켓 연결되지 않음 - dataChanged 이벤트 전송 실패');
                    }
                    
                    console.log(`${team}팀 로고 배경색이 저장되었습니다.`);
                } else {
                    console.error(`${team}팀 로고 배경색 저장 실패: ${response.status}`);
                }
            } catch (error) {
                console.error(`${team}팀 로고 배경색 저장 오류:`, error);
            }
        }
        
        // 팀로고 저장
        async function saveTeamLogo(team) {
            const fileInput = document.getElementById(`${team}-team-logo`);
            const bgColor = document.getElementById(`${team}-team-logo-bg`).value;
            const file = fileInput.files[0];
            
            if (!file) {
                alert('로고 파일을 선택해주세요.');
                return;
            }
            
            const formData = new FormData();
            formData.append('logo', file);
            formData.append('matchId', matchId);
            formData.append('teamType', team);
            formData.append('teamName', team === 'home' ? '<%= match.home_team %>' : '<%= match.away_team %>');
            formData.append('bgColor', bgColor);
            formData.append('sportType', '<%= match.sport_type %>'); // 종목 타입 추가
            
            try {
                const response = await fetch(`/api/overlay-images/TEAMLOGO/<%= match.sport_type %>`, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    let result;
                    try {
                        const responseText = await response.text();
                        console.log(`${team}팀 로고 업로드 응답 텍스트:`, responseText);
                        result = JSON.parse(responseText);
                        console.log(`${team}팀 로고 업로드 성공:`, result);
                    } catch (jsonError) {
                        console.error(`${team}팀 로고 업로드 JSON 파싱 오류:`, jsonError);
                        console.error('응답 텍스트:', await response.text());
                        alert(`${team}팀 로고 업로드 응답 처리 중 오류가 발생했습니다.`);
                        return;
                    }
                    
                    // 미리보기 업데이트 - 올바른 API 경로 사용
                    const previewImg = document.getElementById(`${team}-preview-logo`);
                    previewImg.src = result.logoPath; // API 경로 그대로 사용
                    previewImg.style.display = 'block';
                    
                    const previewBg = document.getElementById(`${team}-preview-bg`);
                    // 현재 설정된 로고 배경색 사용
                    const currentBgColor = document.getElementById(`${team}-team-logo-bg`).value;
                    previewBg.style.backgroundColor = currentBgColor;
                    
                    const noLogoText = previewBg.querySelector('.no-logo-text');
                    noLogoText.style.display = 'none';
                    
                    // 파일 입력 초기화
                    fileInput.value = '';
                    
                    // WebSocket 이벤트로 DB 정보 업데이트 알림
                    if (socket.connected) {
                        socket.emit('dataChanged', {
                            matchId: matchId,
                            type: 'teamLogo',
                            teamType: team
                        });
                        console.log('✅ dataChanged 이벤트 전송 완료');
                    } else {
                        console.error('❌ 소켓 연결되지 않음 - dataChanged 이벤트 전송 실패');
                    }
                    
                    console.log(`${team}팀 로고가 성공적으로 업로드되었습니다.`);
                } else {
                    console.error(`${team}팀 로고 업로드 실패: ${response.status}`);
                }
            } catch (error) {
                console.error(`${team}팀 로고 업로드 오류:`, error);
            }
        }

        // 팀로고 사용유무 토글 함수
        async function toggleTeamLogos() {
            try {
                const toggleButton = document.getElementById('toggle-team-logos');
                const isCurrentlyVisible = toggleButton.classList.contains('btn-success');
                const newState = !isCurrentlyVisible;
                
                console.log(`=== 팀로고 토글: ${newState ? '표시' : '숨김'} ===`);
                
                const response = await fetch(`/api/soccer-team-logo-visibility/${matchId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        useLogos: newState
                    })
                });
                
                if (response.ok) {
                    console.log(`팀로고 토글 성공: ${newState ? '표시' : '숨김'}`);
                    
                    // WebSocket 이벤트로 실시간 상태 변경 알림
                    socket.emit('teamLogoVisibilityChanged', {
                        matchId: matchId,
                        useLogos: newState
                    });
                    
                    // 버튼 상태 업데이트
                    const logoDisplayButton = document.getElementById('toggle-logo-display');
                    
                    if (newState) {
                        toggleButton.classList.add('btn-success');
                        toggleButton.classList.remove('btn-outline-secondary');
                        toggleButton.innerHTML = '<i class="bi bi-eye"></i> 표시';
                        
                        // 팀로고가 표시될 때만 배경색 토글 버튼 활성화
                        logoDisplayButton.style.display = 'inline-block';
                        logoDisplayButton.classList.remove('btn-warning');
                        logoDisplayButton.classList.add('btn-outline-secondary');
                        logoDisplayButton.innerHTML = '<i class="bi bi-image"></i> 로고';
                    } else {
                        toggleButton.classList.remove('btn-success');
                        toggleButton.classList.add('btn-outline-secondary');
                        toggleButton.innerHTML = '<i class="bi bi-eye-slash"></i> 숨김';
                        
                        // 팀로고가 숨겨질 때는 배경색 토글 버튼 비활성화
                        logoDisplayButton.style.display = 'none';
                    }
                    
                    console.log(`팀로고가 ${newState ? '표시' : '숨겨집니다'}.`);
                } else {
                    console.error('팀로고 토글 실패:', response.status);
                }
            } catch (error) {
                console.error('팀로고 토글 오류:', error);
            }
        }
        
        // 팀로고 배경색만 표시 토글 함수
        async function toggleLogoDisplay() {
            try {
                const toggleButton = document.getElementById('toggle-logo-display');
                const isCurrentlyBackgroundOnly = toggleButton.classList.contains('btn-warning');
                const newState = !isCurrentlyBackgroundOnly;
                
                console.log(`=== 팀로고 배경색 토글: ${newState ? '배경색만' : '로고 표시'} ===`);
                
                // 서버에 표시 모드 저장
                const displayMode = newState ? 'background' : 'logo';
                const saveResponse = await fetch(`/api/matches/${matchId}/team-logo-display-mode`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ displayMode: displayMode })
                });
                
                if (saveResponse.ok) {
                    console.log(`팀로고 표시 모드 저장 성공: ${displayMode}`);
                } else {
                    console.error('팀로고 표시 모드 저장 실패:', saveResponse.status);
                }
                
                // WebSocket 이벤트로 실시간 상태 변경 알림
                console.log('=== 팀로고 표시 모드 변경 이벤트 전송 ===');
                console.log('displayMode:', displayMode);
                console.log('소켓 연결 상태:', socket.connected);
                
                if (socket.connected) {
                    socket.emit('teamLogoDisplayModeChanged', {
                        matchId: matchId,
                        displayMode: displayMode
                    });
                    console.log('✅ teamLogoDisplayModeChanged 이벤트 전송 완료');
                } else {
                    console.error('❌ 소켓 연결되지 않음 - teamLogoDisplayModeChanged 이벤트 전송 실패');
                }
                
                // 버튼 상태 업데이트
                if (newState) {
                    toggleButton.classList.add('btn-warning');
                    toggleButton.classList.remove('btn-outline-secondary');
                    toggleButton.innerHTML = '<i class="bi bi-palette"></i> 배경만';
                } else {
                    toggleButton.classList.remove('btn-warning');
                    toggleButton.classList.add('btn-outline-secondary');
                    toggleButton.innerHTML = '<i class="bi bi-image"></i> 로고';
                }
                
                console.log(`팀로고 배경색 토글 성공: ${newState ? '배경색만' : '로고 표시'}`);
            } catch (error) {
                console.error('팀로고 배경색 토글 오류:', error);
            }
        }
        
        async function loadTeamLogoVisibility() {
            try {
                const response = await fetch(`/api/soccer-team-logo-visibility/${matchId}`, {
                    method: 'GET',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    // API 응답 구조: { success: true, useLogos: false }
                    const useLogos = data.useLogos;
                    
                    // 토글 버튼 상태 업데이트
                    const toggleButton = document.getElementById('toggle-team-logos');
                    const logoDisplayButton = document.getElementById('toggle-logo-display');
                    
                    if (useLogos) {
                        toggleButton.classList.add('btn-success');
                        toggleButton.classList.remove('btn-outline-secondary');
                        toggleButton.innerHTML = '<i class="bi bi-eye"></i> 표시';
                        
                        // 팀로고가 표시될 때만 배경색 토글 버튼 활성화
                        logoDisplayButton.style.display = 'inline-block';
                        
                        // 기본값으로 로고 표시 모드 설정
                        logoDisplayButton.classList.remove('btn-warning');
                        logoDisplayButton.classList.add('btn-outline-secondary');
                        logoDisplayButton.innerHTML = '<i class="bi bi-image"></i> 로고';
                    } else {
                        toggleButton.classList.remove('btn-success');
                        toggleButton.classList.add('btn-outline-secondary');
                        toggleButton.innerHTML = '<i class="bi bi-eye-slash"></i> 숨김';
                        
                        // 팀로고가 숨겨질 때는 배경색 토글 버튼 비활성화
                        logoDisplayButton.style.display = 'none';
                    }
                } else {
                    console.log('팀로고 사용 상태 로드 실패, 기본값(true) 사용');
                    // 기본값으로 로고 표시 활성화
                    const toggleButton = document.getElementById('toggle-team-logos');
                    const logoDisplayButton = document.getElementById('toggle-logo-display');
                    
                    if (toggleButton) {
                        toggleButton.classList.add('btn-success');
                        toggleButton.classList.remove('btn-outline-secondary');
                        toggleButton.innerHTML = '<i class="bi bi-eye"></i> 표시';
                    }
                    
                    // 팀로고가 표시될 때만 배경색 토글 버튼 활성화
                    if (logoDisplayButton) {
                        logoDisplayButton.style.display = 'inline-block';
                        logoDisplayButton.classList.remove('btn-warning');
                        logoDisplayButton.classList.add('btn-outline-secondary');
                        logoDisplayButton.innerHTML = '<i class="bi bi-image"></i> 로고';
                    }
                }
            } catch (error) {
                console.error('팀로고 사용 상태 로드 오류:', error);
                // 기본값으로 로고 표시 활성화
                const toggleButton = document.getElementById('toggle-team-logos');
                const logoDisplayButton = document.getElementById('toggle-logo-display');
                
                toggleButton.classList.add('btn-success');
                toggleButton.classList.remove('btn-outline-secondary');
                toggleButton.innerHTML = '<i class="bi bi-eye"></i> 표시';
                
                // 팀로고가 표시될 때만 배경색 토글 버튼 활성화
                logoDisplayButton.style.display = 'inline-block';
                logoDisplayButton.classList.remove('btn-warning');
                logoDisplayButton.classList.add('btn-outline-secondary');
                logoDisplayButton.innerHTML = '<i class="bi bi-image"></i> 로고';
            }
        }
        
        // 팀로고 표시 모드 상태 로드
        async function loadTeamLogoDisplayMode() {
            try {
                const response = await fetch(`/api/matches/${matchId}/team-logo-display-mode`);
                
                if (response.ok) {
                    const data = await response.json();
                    const displayMode = data.displayMode;
                    
                    // 배경색 토글 버튼 상태 업데이트
                    const logoDisplayButton = document.getElementById('toggle-logo-display');
                    
                    if (logoDisplayButton) {
                        if (displayMode === 'background') {
                            logoDisplayButton.classList.add('btn-warning');
                            logoDisplayButton.classList.remove('btn-outline-secondary');
                            logoDisplayButton.innerHTML = '<i class="bi bi-palette"></i> 배경만';
                        } else {
                            logoDisplayButton.classList.remove('btn-warning');
                            logoDisplayButton.classList.add('btn-outline-secondary');
                            logoDisplayButton.innerHTML = '<i class="bi bi-image"></i> 로고';
                        }
                    }
                }
            } catch (error) {
                console.error('팀로고 표시 모드 로드 오류:', error);
            }
        }

        // URL 복사 함수들 (컴팩트 버전)
        function copyMobileUrl() {
            const input = document.getElementById('mobile-url');
            input.select();
            document.execCommand('copy');
            
            // 간단한 토스트 알림
            const button = event.target.closest('button');
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="bi bi-check"></i>';
            button.classList.add('btn-success');
            button.classList.remove('btn-outline-secondary');
            
            setTimeout(() => {
                button.innerHTML = originalHTML;
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
            }, 1500);
        }

        function copyOverlayUrl() {
            const input = document.getElementById('overlay-url');
            input.select();
            document.execCommand('copy');
            
            // 간단한 토스트 알림
            const button = event.target.closest('button');
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="bi bi-check"></i>';
            button.classList.add('btn-success');
            button.classList.remove('btn-outline-secondary');
            
            setTimeout(() => {
                button.innerHTML = originalHTML;
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
            }, 1500);
        }

        // 팀로고 정보 로드 함수
        async function loadTeamLogos() {
            try {
                console.log('팀로고 정보 로드 시작...');
                const response = await fetch(`/api/matches/${matchId}/team-logos`);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('팀로고 정보 로드 성공:', result.teamLogos);
                    
                    // 각 팀의 로고 정보 업데이트
                    result.teamLogos.forEach(teamInfo => {
                        const teamType = teamInfo.team_type;
                        console.log(`${teamType}팀 로고 정보 업데이트:`, teamInfo);
                        
                        // 로고 배경색 업데이트
                        const logoBgInput = document.getElementById(`${teamType}-team-logo-bg`);
                        if (logoBgInput && teamInfo.logo_bg_color) {
                            logoBgInput.value = teamInfo.logo_bg_color;
                        }
                        
                        // 로고 미리보기 업데이트
                        const previewBg = document.getElementById(`${teamType}-preview-bg`);
                        const previewImg = document.getElementById(`${teamType}-preview-logo`);
                        const noLogoText = previewBg.querySelector('.no-logo-text');
                        
                        if (teamInfo.logo_path) {
                            // 로고가 있는 경우 - API 경로 그대로 사용
                            previewImg.src = teamInfo.logo_path;
                            previewImg.style.display = 'block';
                            previewBg.style.backgroundColor = teamInfo.logo_bg_color || '#FFFFFF';
                            noLogoText.style.display = 'none';
                        } else {
                            // 로고가 없는 경우
                            previewImg.style.display = 'none';
                            previewBg.style.backgroundColor = teamInfo.logo_bg_color || '#FFFFFF';
                            noLogoText.style.display = 'block';
                        }
                    });
                } else {
                    console.error('팀로고 정보 로드 실패:', response.status);
                }
            } catch (error) {
                console.error('팀로고 정보 로드 오류:', error);
            }
        }

        // 페이지 로드 시 URL 설정
        document.addEventListener('DOMContentLoaded', async function() {
            const baseUrl = window.location.origin;
            document.getElementById('mobile-url').value = `${baseUrl}/soccer/${matchId}/control-mobile`;
            document.getElementById('overlay-url').value = `${baseUrl}/soccer/${matchId}/overlay`;
            
            // 페이지 로드 시 타이머 상태 요청
            console.log('=== 페이지 로드 시 타이머 상태 요청 ===');
            socket.emit('request_timer_state', { matchId: matchId });
            
        // 페이지 로드 시 타이머 상태 복원 (백업 폴더의 예전 방식 - 서버타이머와 완전 독립)
        console.log('=== 페이지 로드 시 타이머 상태 복원 (독립 모드) ===');
        
        // 로컬 타이머만 사용하므로 서버 상태 요청 제거
        // localStorage에서 타이머 상태 복원
        const savedTimerState = localStorage.getItem(`timer_state_${matchId}`);
        if (savedTimerState) {
            try {
                const parsedState = JSON.parse(savedTimerState);
                const currentTime = Date.now();
                const timeDiff = currentTime - parsedState.lastSaveTime;
                
                // 타이머가 실행 중이었다면 경과 시간 계산
                if (parsedState.isRunning && parsedState.startTime) {
                    const elapsedSeconds = Math.floor(timeDiff / 1000);
                    timerState.currentSeconds = parsedState.currentSeconds + elapsedSeconds;
                    timerState.isRunning = true;
                    timerState.startTime = parsedState.startTime; // 원래 startTime 유지
                    timerState.pausedTime = parsedState.pausedTime;
                    
                    console.log('로컬 타이머 상태 복원 (독립 모드):', {
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning,
                        elapsedSeconds: elapsedSeconds,
                        originalStartTime: parsedState.startTime,
                        currentStartTime: timerState.startTime
                    });
                    
                    // 로컬 타이머 시작
                    startLocalTimer();
                } else {
                    timerState.currentSeconds = parsedState.currentSeconds;
                    timerState.isRunning = false;
                    timerState.startTime = Date.now();
                    timerState.pausedTime = parsedState.pausedTime;
                    
                    console.log('로컬 타이머 정지 상태 복원 (독립 모드):', {
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning
                    });
                }
                
                updateTimerDisplay();
            } catch (error) {
                console.error('로컬 타이머 상태 복원 실패:', error);
            }
        }
        
        // 로컬 타이머 상태 요청 (로컬 타이머 모드일 때)
        console.log('=== 페이지 로드 시 로컬 타이머 상태 요청 ===');
        socket.emit('request_local_timer_state', { matchId: matchId });
        
        // 타이머 모드 상태 요청
        console.log('=== 페이지 로드 시 타이머 모드 상태 요청 ===');
        socket.emit('request_timer_mode', { matchId: matchId });
            
        // 로컬 타이머 상태 요청 처리
        socket.on('request_local_timer_state', function(data) {
            console.log('=== 로컬 타이머 상태 요청 수신 ===');
            console.log('요청 데이터:', data);
            
            if (data.matchId === matchId) {
                // 현재 로컬 타이머 상태 전송
                socket.emit('local_timer_update', {
                    matchId: matchId,
                    currentSeconds: timerState.currentSeconds,
                    isRunning: timerState.isRunning,
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime
                });
                
                console.log('로컬 타이머 상태 전송:', {
                    currentSeconds: timerState.currentSeconds,
                    isRunning: timerState.isRunning,
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime
                });
            }
        });

        // 로컬 타이머 상태 복원 이벤트
        socket.on('local_timer_state_restored', function(data) {
            console.log('=== 로컬 타이머 상태 복원 수신 ===');
            console.log('복원된 데이터:', data);
            
            if (data.matchId === matchId) {
                // 복원된 로컬 타이머 상태 적용
                timerState.currentSeconds = data.timerState.currentSeconds;
                timerState.isRunning = data.timerState.isRunning;
                timerState.startTime = data.timerState.startTime;
                timerState.pausedTime = data.timerState.pausedTime;
                
                console.log('로컬 타이머 상태 복원 완료:', {
                    currentSeconds: timerState.currentSeconds,
                    isRunning: timerState.isRunning,
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime
                });
                
                // 디스플레이 업데이트
                updateTimerDisplay();
                
                // 실행 중이었다면 로컬 타이머 시작
                if (timerState.isRunning) {
                    startLocalTimer();
                }
            }
        });

        // 페이지 로드 시 경기 데이터 로드
        loadMatchData();
            
            // 페이지 로드 시 승부차기 텍스트 로드
            loadPenaltyText();
            
            // 페이지 로드 시 대회명 로드
            console.log('=== 페이지 로드 시 대회명 로드 호출 ===');
            loadTournamentText();
            
            // 페이지 로드 시 득점 정보 로드
            loadGoalsFromServer();
            
            // 페이지 로드 시 득점 정보 리스트 초기화
            renderHomeGoalsList();
            renderAwayGoalsList();
            
            // 페이지 로드 시 팀로고 정보 로드
            loadTeamLogos();
            
        // 페이지 로드 시 타이머 모드 상태는 서버에서 받아옴 (request_timer_mode 이벤트로 처리)
            
            // 페이지 로드 시 팀로고 사용 상태 로드 (먼저 실행)
            await loadTeamLogoVisibility();
            
            // 페이지 로드 시 팀로고 표시 모드 상태 로드 (나중에 실행)
            await loadTeamLogoDisplayMode();
            
            // 시간 적용 버튼 이벤트 리스너 (숫자 자동 변환 포함)
            document.getElementById('apply-time-btn').addEventListener('click', function() {
                console.log('=== 시간 적용 버튼 클릭 ===');
                const timeEditInput = document.getElementById('time-edit-input');
                let timeValue = timeEditInput.value.trim();
                
                console.log('입력된 값:', timeValue);
                
                // 빈 값 체크
                if (!timeValue) {
                    alert('시간을 입력해주세요.');
                    return;
                }
                
                let minutes, seconds;
                
                // 00:00 형식인지 확인
                const timeRegex = /^([0-9]{2}):([0-9]{2})$/;
                if (timeRegex.test(timeValue)) {
                    // 00:00 형식인 경우
                    [minutes, seconds] = timeValue.split(':').map(Number);
                                    } else {
                    // 숫자만 입력된 경우 자동 변환
                    const numericValue = parseInt(timeValue);
                    if (isNaN(numericValue) || numericValue < 0) {
                        alert('올바른 숫자를 입력해주세요.');
                return;
            }
            
                    // 숫자를 시간으로 변환
                    if (numericValue < 100) {
                        // 1-99: 초로 처리
                        minutes = 0;
                        seconds = numericValue;
                    } else if (numericValue < 10000) {
                        // 100-9999: 마지막 두 자리는 초, 나머지는 분
                        minutes = Math.floor(numericValue / 100);
                        seconds = numericValue % 100;
                        } else {
                        // 10000 이상: 마지막 두 자리는 초, 나머지는 분
                        minutes = Math.floor(numericValue / 100);
                        seconds = numericValue % 100;
                    }
                    
                    console.log('변환된 시간:', `${minutes}:${seconds}`);
                }
                
                // 0 또는 0000 입력 제한
                if (minutes === 0 && seconds === 0) {
                    alert('0 또는 00:00은 입력할 수 없습니다. 최소 00:01 이상의 시간을 입력해주세요.');
                                return;
                            }
                            
                // 유효성 검사
                if (minutes > 90 || seconds > 59) {
                    alert('올바른 시간 범위를 입력해주세요. (분: 0-90, 초: 0-59)');
                    return;
                }
                
                // 서버에 시간 설정 요청
                const isV2Enabled = document.getElementById('timer-v2-toggle').checked;
                const totalSeconds = minutes * 60 + seconds;
                
                if (isV2Enabled) {
                    // 서버 타이머 시스템 사용
                    console.log('서버 타이머 시간 설정');
                    socket.emit('server_timer_control', {
                        matchId: matchId,
                        action: 'set',
                        timeValue: totalSeconds
                    });
                } else {
                    // 기존 타이머 시스템 사용
                    console.log('기존 타이머 시스템 시간 설정');
                    socket.emit('timer_control', {
                        matchId: matchId,
                        action: 'set',
                        minutes: minutes,
                        seconds: seconds
                    });
                }
                
                // 로컬 타이머 상태 업데이트 (로컬 타이머 모드일 때만)
                if (currentTimerMode === 'legacy-timer') {
                    timerState.currentSeconds = minutes * 60 + seconds;
                    timerState.isRunning = false;
                    timerState.startTime = null;
                    timerState.pausedTime = timerState.currentSeconds;
                    
                    // 로컬 타이머 상태 저장
                    saveTimerState();
                    
                    // 오버레이 페이지에 로컬 타이머 상태 전송
                    socket.emit('local_timer_update', {
                        matchId: matchId,
                        currentSeconds: timerState.currentSeconds,
                        isRunning: timerState.isRunning,
                        startTime: timerState.startTime,
                        pausedTime: timerState.pausedTime
                    });
                }
                
                // 디스플레이 업데이트
                updateTimerDisplay();
                
                // 입력 필드 숨기기
                document.getElementById('time-edit-container').style.display = 'none';
                
                console.log('시간 설정 완료:', `${minutes}:${seconds}`);
            });
            
            // 팀명 저장 버튼 이벤트 리스너
            document.querySelectorAll('.save-team-name').forEach(button => {
            button.addEventListener('click', function() {
                    const team = this.getAttribute('data-team');
                    console.log(`=== ${team}팀명 저장 버튼 클릭 ===`);
                    updateTeamName(team);
            });
        });

            // 팀 컬러 저장 버튼 이벤트 리스너
            document.querySelectorAll('.save-team-color').forEach(button => {
            button.addEventListener('click', function() {
                    const team = this.getAttribute('data-team');
                    console.log(`=== ${team}팀 컬러 저장 버튼 클릭 ===`);
                    saveTeamColor(team);
            });
        });
        
        
        // 팀로고 관련 이벤트 리스너
        document.querySelectorAll('input[type="file"]').forEach(input => {
            input.addEventListener('change', function() {
                const team = this.id.replace('-team-logo', '');
                handleLogoUpload(team);
            });
        });
        
        document.querySelectorAll('input[type="color"]').forEach(input => {
            if (input.id.includes('logo-bg')) {
                input.addEventListener('change', function() {
                    const team = this.id.replace('-team-logo-bg', '');
                    handleLogoBgChange(team);
                });
            }
        });
        
        document.querySelectorAll('.save-team-logo').forEach(button => {
            button.addEventListener('click', function() {
                const team = this.getAttribute('data-team');
                console.log(`=== ${team}팀 로고 저장 버튼 클릭 ===`);
                saveTeamLogo(team);
            });
        });
        
        document.querySelectorAll('.save-team-logo-bg').forEach(button => {
            button.addEventListener('click', function() {
                const team = this.getAttribute('data-team');
                console.log(`=== ${team}팀 로고 배경색 저장 버튼 클릭 ===`);
                saveTeamLogoBg(team);
            });
        });
        
        // 팀로고 사용유무 토글 버튼 이벤트 리스너
        document.getElementById('toggle-team-logos').addEventListener('click', function() {
            console.log('=== 팀로고 토글 버튼 클릭 ===');
            toggleTeamLogos();
        });
        
        // 팀로고 배경색 토글 버튼 이벤트 리스너
        document.getElementById('toggle-logo-display').addEventListener('click', function() {
            console.log('=== 팀로고 배경색 토글 버튼 클릭 ===');
            toggleLogoDisplay();
        });
        });

        // 타이머 상태 복원 이벤트 리스너
        socket.on('timer_state', function(data) {
            console.log('=== 타이머 상태 수신 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                // 타이머 상태 복원
                timerState.currentSeconds = data.currentSeconds || 0;
                timerState.isRunning = data.isRunning || false;
                timerState.startTime = data.startTime || null;
                timerState.pausedTime = data.pausedTime || 0;
                
                console.log('타이머 상태 복원:', {
                    currentSeconds: timerState.currentSeconds,
                    isRunning: timerState.isRunning,
                    startTime: timerState.startTime,
                    pausedTime: timerState.pausedTime
                });
                
                // 타이머 디스플레이 업데이트
                updateTimerDisplay();
                
                // 타이머가 실행 중이면 서버 시작 시간을 기준으로 로컬 타이머 시작
                if (timerState.isRunning && timerState.startTime) {
                    // 서버에서 받은 시작 시간을 그대로 사용 (오버레이 페이지와 동일한 방식)
                    console.log('로컬 타이머 재시작 - 서버 시작 시간 사용:', timerState.startTime);
                }
            }
        });

        // 타이머 모드 상태 복원 및 실시간 동기화 이벤트 리스너
        socket.on('timer_mode_response', function(data) {
            console.log('=== 타이머 모드 상태 응답 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                const toggleElement = document.getElementById('timer-v2-toggle');
                
                if (toggleElement) {
                    if (data.currentMode === null) {
                        // 저장된 모드가 없는 경우 - 기본값으로 설정 (서버타이머 기본 활성화)
                        toggleElement.checked = true; // 서버타이머 기본 활성화
                        currentTimerMode = 'server-timer'; // 현재 모드 업데이트
                        console.log('저장된 타이머 모드 없음 - 서버타이머 기본 활성화');
                        console.log('체크박스 상태: 서버타이머 기본 활성화');
                    } else {
                        // 저장된 모드가 있는 경우 - 해당 모드로 복원
                        const isServerTimer = data.currentMode === 'server-timer';
                        toggleElement.checked = isServerTimer;
                        currentTimerMode = data.currentMode; // 현재 모드 업데이트
                        console.log('타이머 모드 상태 복원:', data.currentMode, '체크박스:', isServerTimer);
                        
                        // UI 업데이트 후 로그 출력
                        console.log('체크박스 상태 업데이트 완료:', toggleElement.checked);
                        
                        if (data.currentMode === 'server-timer') {
                            console.log('복원된 타이머 모드: 서버타이머 시스템');
                        } else if (data.currentMode === 'legacy-timer') {
                            console.log('복원된 타이머 모드: 로컬 타이머 시스템');
                        }
                    }
                } else {
                    console.error('timer-v2-toggle 요소를 찾을 수 없습니다');
                }
            }
        });

        socket.on('timer_mode_updated', function(data) {
            console.log('=== 타이머 모드 실시간 업데이트 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                const isServerTimer = data.currentMode === 'server-timer';
                const toggleElement = document.getElementById('timer-v2-toggle');
                
                if (toggleElement) {
                    toggleElement.checked = isServerTimer;
                    console.log('타이머 모드 실시간 동기화:', data.currentMode, '체크박스:', isServerTimer);
                }
            }
        });

        // 새로운 타이머 시스템 v2 이벤트 리스너 (기존 호환성 유지)
        socket.on('timer_v2_mode_updated', function(data) {
            console.log('=== 타이머 v2 모드 업데이트 ===');
            console.log('수신된 데이터:', data);
            
            if (data.matchId === matchId) {
                console.log('타이머 v2 모드:', data.newMode);
                // UI 업데이트 (필요시)
            }
        });

        // 로컬 타이머만 사용 (서버타이머와 완전 독립)
        // 서버타이머 관련 이벤트 리스너는 제거하여 간섭 방지

        // 로컬 타이머만 사용 (서버타이머와 완전 독립)
        // 서버타이머 관련 이벤트 리스너는 제거하여 간섭 방지

        socket.on('match_updated', function(data) {
            console.log('=== 경기 업데이트 이벤트 수신 ===');
            console.log('받은 데이터:', data);
            
            if (data.matchId === matchId) {
                if (data.home_score !== undefined) {
                    document.getElementById('home-score').value = data.home_score;
                    console.log('홈팀 점수 업데이트:', data.home_score);
                }
                if (data.away_score !== undefined) {
                    document.getElementById('away-score').value = data.away_score;
                    console.log('어웨이팀 점수 업데이트:', data.away_score);
                }
                if (data.home_team) {
                    document.getElementById('home-team-name').value = data.home_team;
                    console.log('홈팀 이름 업데이트:', data.home_team);
                }
                if (data.away_team) {
                    document.getElementById('away-team-name').value = data.away_team;
                    console.log('어웨이팀 이름 업데이트:', data.away_team);
                    }
                }
            });
            
        // 팀 컬러 업데이트 응답 처리
        socket.on('teamColorUpdated', function(response) {
            console.log('=== 팀 컬러 업데이트 응답 수신 ===');
            console.log('받은 데이터:', response);
            
            if (response.success) {
                console.log('팀 컬러 업데이트 성공');
                // 팀 컬러 저장 성공 후 현재 경기 데이터 다시 로드하여 확인
                loadMatchData();
                } else {
                console.error('팀 컬러 업데이트 실패:', response.message);
            }
        });

        // 팀명 업데이트 이벤트 수신
        socket.on('teamNameUpdated', function(data) {
            console.log('=== 팀명 업데이트 이벤트 수신 ===');
            console.log('받은 데이터:', data);
            
            if (data.matchId === matchId) {
                const team = data.team;
                const teamName = data.teamName;
                
                console.log(`${team}팀 이름 업데이트:`, teamName);
                
                // 팀명 입력 필드 업데이트
                const nameInput = document.getElementById(`${team}-team-name`);
                if (nameInput) {
                    nameInput.value = teamName;
                    console.log(`${team}팀 이름 입력 필드 업데이트 완료`);
                }
            }
        });

        // 팀 위치 변경 이벤트 리스너
        socket.on('teamsSwapped', function(data) {
            console.log('=== 팀 위치 변경 이벤트 수신 ===');
            console.log('받은 데이터:', data);
            
            if (data.matchId === matchId) {
                // 팀 정보 실시간 업데이트
                updateTeamsAfterSwap();
                console.log('팀 위치 변경 UI 업데이트 완료');
            }
        });

        // 팀 위치 변경 후 UI 업데이트 함수
        async function updateTeamsAfterSwap() {
            try {
                console.log('=== 팀 위치 변경 후 UI 업데이트 시작 ===');
                
                // 서버에서 최신 경기 데이터 가져오기
                const response = await fetch(`/api/matches/${matchId}`);
                if (!response.ok) {
                    throw new Error('경기 데이터 로드 실패');
                }
                
                const matchData = await response.json();
                console.log('로드된 경기 데이터:', matchData);
                
                // 팀명 업데이트
                const homeTeamNameInput = document.getElementById('home-team-name');
                const awayTeamNameInput = document.getElementById('away-team-name');
                
                if (homeTeamNameInput && matchData.home_team) {
                    homeTeamNameInput.value = matchData.home_team;
                    console.log('홈팀명 업데이트:', matchData.home_team);
                            } else {
                    console.log('홈팀명 입력 필드를 찾을 수 없거나 데이터가 없습니다');
                }
                
                if (awayTeamNameInput && matchData.away_team) {
                    awayTeamNameInput.value = matchData.away_team;
                    console.log('어웨이팀명 업데이트:', matchData.away_team);
                } else {
                    console.log('어웨이팀명 입력 필드를 찾을 수 없거나 데이터가 없습니다');
                }
                
                // 점수 업데이트
                const homeScoreInput = document.getElementById('home-score');
                const awayScoreInput = document.getElementById('away-score');
                
                if (homeScoreInput && matchData.home_score !== undefined) {
                    homeScoreInput.value = matchData.home_score;
                    console.log('홈팀 점수 업데이트:', matchData.home_score);
                            } else {
                    console.log('홈팀 점수 입력 필드를 찾을 수 없거나 데이터가 없습니다');
                }
                
                if (awayScoreInput && matchData.away_score !== undefined) {
                    awayScoreInput.value = matchData.away_score;
                    console.log('어웨이팀 점수 업데이트:', matchData.away_score);
                } else {
                    console.log('어웨이팀 점수 입력 필드를 찾을 수 없거나 데이터가 없습니다');
                }
                
                // 팀 컬러 업데이트 (직접 필드와 match_data 모두 확인)
                console.log('=== 팀 컬러 업데이트 시작 ===');
                console.log('직접 필드 홈팀 컬러:', matchData.home_team_color);
                console.log('직접 필드 어웨이팀 컬러:', matchData.away_team_color);
                
                // 직접 필드에서 팀 컬러 업데이트
                const homeColorInput = document.getElementById('home-team-color');
                if (homeColorInput) {
                    if (matchData.home_team_color) {
                        homeColorInput.value = matchData.home_team_color;
                        console.log('홈팀 컬러 업데이트 성공 (직접 필드):', matchData.home_team_color);
                    } else {
                        console.log('홈팀 컬러 데이터가 없습니다 (직접 필드)');
                    }
                } else {
                    console.log('홈팀 컬러 입력 필드를 찾을 수 없습니다');
                }
                
                const awayColorInput = document.getElementById('away-team-color');
                if (awayColorInput) {
                    if (matchData.away_team_color) {
                        awayColorInput.value = matchData.away_team_color;
                        console.log('어웨이팀 컬러 업데이트 성공 (직접 필드):', matchData.away_team_color);
                    } else {
                        console.log('어웨이팀 컬러 데이터가 없습니다 (직접 필드)');
                    }
                } else {
                    console.log('어웨이팀 컬러 입력 필드를 찾을 수 없습니다');
                }
                
                // match_data에서도 팀 컬러 확인 (백업용)
                if (matchData.match_data) {
                    const matchDataObj = matchData.match_data;
                    console.log('match_data 객체:', matchDataObj);
                    console.log('match_data 홈팀 컬러:', matchDataObj.home_team_color);
                    console.log('match_data 어웨이팀 컬러:', matchDataObj.away_team_color);
                }
                
                console.log('=== 팀 컬러 업데이트 완료 ===');
                
                console.log('팀 위치 변경 UI 업데이트 완료');
                
            } catch (error) {
                console.error('팀 위치 변경 UI 업데이트 중 오류 발생:', error);
            }
        }
        
        // 페이지 로드 시 팀로고 사용 상태 로드
        loadTeamLogoVisibility();
    </script>
</body>
</html> 