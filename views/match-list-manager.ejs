<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>경기 리스트 관리</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .list-group-item.active { background: #0d6efd; color: #fff; }
        .match-list-card { min-height: 400px; }
        .match-grid { display: flex; flex-direction: column; gap: 6px; }
        .match-card { background: #fff; border: 1px solid #dee2e6; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.03); padding: 8px 14px; display: flex; align-items: center; justify-content: space-between; gap: 8px; min-height: 0; }
        .match-card.selected { border: 2px solid #0d6efd; background: #e9ecef; }
        .match-card-title { font-weight: 600; font-size: 1.05rem; }
        .match-card-note { font-size: 0.85rem; color: #6c757d; margin-top: 4px; font-style: italic; }
        .match-card .btn-group { display: flex; gap: 4px; }
        /* 추가: 경기 추가 모달용 스타일 */
        .add-match-list { display: flex; flex-direction: column; gap: 8px; margin-top: 8px; }
        .add-match-row { display: flex; align-items: center; justify-content: space-between; background: #f8f9fa; border-radius: 6px; padding: 8px 12px; border: 1px solid #e2e3e5; }
        .add-match-info { flex: 1; }
        .add-match-title { font-size: 1rem; font-weight: 500; }
        .add-match-note { font-size: 0.8rem; color: #6c757d; margin-top: 2px; font-style: italic; }
        .loading { text-align: center; color: #6c757d; }
        .error { color: #dc3545; }
        
        /* 리스트 스크롤 및 고정 레이아웃 */
        .list-container {
            height: calc(100vh - 300px);
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
        }
        
        .content-container {
            /* 높이 제한 제거하여 자연스러운 크기 조정 */
        }
        
        .list-group {
            margin-bottom: 0;
        }
        
        .list-group-item {
            border-left: none;
            border-right: none;
            border-radius: 0;
            white-space: nowrap;
            overflow: visible;
            text-overflow: unset;
            padding: 12px 16px;
            line-height: 1.4;
        }
        
        .list-group-item:first-child {
            border-top: none;
        }
        
        .list-group-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <%- include('partials/header', { title: '경기 리스트 관리' }) %>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>경기 리스트 관리</h2>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="mb-3 d-flex gap-2">
                <input type="text" id="newListName" class="form-control" placeholder="새 리스트 이름">
                <button class="btn btn-primary" onclick="createList()">리스트 추가</button>
            </div>
            <div class="list-container">
                <ul class="list-group" id="listGroup">
                    <li class="list-group-item loading">리스트를 불러오는 중...</li>
                </ul>
            </div>
        </div>
        <div class="col-md-8">
            <div class="content-container">
                <div class="card match-list-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span id="selectedListName">리스트를 선택하세요</span>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="renameList()">이름변경</button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteList()">삭제</button>
                            <button class="btn btn-sm btn-success" onclick="openAddMatchModal()">경기 추가</button>
                        </div>
                    </div>
                <!-- 리스트 URL 정보 -->
                <div class="card-body" id="listUrlInfo" style="display: none; background-color: #f8f9fa; border-top: 1px solid #dee2e6;">
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-muted">통합 오버레이 URL:</small>
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" id="overlayUrl" readonly>
                                <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('overlayUrl')">복사</button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <small class="text-muted">모바일 컨트롤 URL:</small>
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" id="mobileControlUrl" readonly>
                                <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('mobileControlUrl')">복사</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 커스텀 URL 설정 -->
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <small class="text-muted">커스텀 오버레이 URL:</small>
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" id="customUrlInput" placeholder="예: my-stadium-1" maxlength="50">
                                <button class="btn btn-outline-success btn-sm" onclick="setCustomUrl()">설정</button>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteCustomUrl()">삭제</button>
                            </div>
                            <div class="input-group input-group-sm mt-1">
                                <input type="text" class="form-control" id="customOverlayUrl" readonly>
                                <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('customOverlayUrl')">복사</button>
                            </div>
                            <small class="text-muted">영문, 숫자, 하이픈(-), 언더스코어(_)만 사용 가능</small>
                        </div>
                    </div>
                </div>
                <div class="card-body" id="matchListBody">
                    <div class="text-muted">리스트를 선택하면 경기가 표시됩니다.</div>
                </div>
                <div class="card-footer d-flex justify-content-between align-items-center" id="matchNavFooter" style="display:none;">
                    <button class="btn btn-outline-primary" id="prevMatchBtn">이전 경기</button>
                    <button class="btn btn-outline-primary" id="nextMatchBtn">다음 경기</button>
                </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 경기 추가 모달 -->
    <div class="modal fade" id="addMatchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">경기 추가</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="allMatchesList">불러오는 중...</div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    
    // 경기 수정 이벤트 처리
    socket.on('match_updated', (data) => {
        console.log('경기 수정 이벤트 수신:', data);
        
        // 현재 선택된 리스트의 경기 정보 업데이트
        if (selectedList && selectedList.matches) {
            const updatedMatches = selectedList.matches.map(match => {
                if (match.id === data.matchId) {
                    return {
                        ...match,
                        sport_type: data.sport_type,
                        home_team: data.home_team,
                        away_team: data.away_team
                    };
                }
                return match;
            });
            
            selectedList.matches = updatedMatches;
            
            // UI 업데이트
            if (selectedListId === selectedList.id) {
                renderMatchList(selectedList);
            }
        }
        
        // 경기 추가 모달의 경기 목록도 업데이트
        if (window.allMatches) {
            const updatedAllMatches = window.allMatches.map(match => {
                if (match.id === data.matchId) {
                    return {
                        ...match,
                        sport_type: data.sport_type,
                        home_team: data.home_team,
                        away_team: data.away_team
                    };
                }
                return match;
            });
            window.allMatches = updatedAllMatches;
        }
    });
    
    // 팀명 업데이트 이벤트 처리
    socket.on('teamNameUpdated', function(data) {
        console.log('팀명 업데이트 이벤트 수신:', data);
        
        // 모든 리스트에서 해당 경기를 찾아서 팀명 업데이트
        allLists.forEach(list => {
            const matchIndex = list.matches.findIndex(m => m.id === data.matchId);
            if (matchIndex !== -1) {
                // 데이터베이스의 경기 정보 업데이트
                if (data.team === 'home') {
                    list.matches[matchIndex].home_team = data.teamName;
                } else if (data.team === 'away') {
                    list.matches[matchIndex].away_team = data.teamName;
                }
                
                // 현재 선택된 리스트라면 UI 업데이트
                if (list.id === selectedListId) {
                    renderMatchList().catch(error => {
                        console.error('팀명 업데이트 후 렌더링 실패:', error);
                    });
                }
                
                // 모달이 열려있다면 경기 목록도 업데이트
                const modal = document.getElementById('addMatchModal');
                if (modal && modal.classList.contains('show')) {
                    renderAddMatchList();
                }
                
                console.log(`${data.team}팀명 업데이트 완료: ${data.teamName}`);
            }
        });
    });
    
// 데이터 관리
let allLists = [];
let selectedListId = null;
let selectedMatchIdx = 0;
let allMatches = [];

// 서버에서 리스트 가져오기
async function loadLists() {
    try {
        const response = await fetch('/api/match-lists');
        if (!response.ok) throw new Error('리스트 로드 실패');
        allLists = await response.json();
        renderLists();
    } catch (error) {
        console.error('리스트 로드 오류:', error);
        document.getElementById('listGroup').innerHTML = '<li class="list-group-item error">리스트 로드에 실패했습니다.</li>';
    }
}

// 리스트 렌더링
function renderLists() {
    const listGroup = document.getElementById('listGroup');
    listGroup.innerHTML = '';
    
    if (allLists.length === 0) {
        listGroup.innerHTML = '<li class="list-group-item text-muted">리스트가 없습니다.</li>';
        return;
    }
    
    // 리스트를 이름 순으로 정렬
    const sortedLists = [...allLists].sort((a, b) => a.name.localeCompare(b.name, 'ko'));
    
    sortedLists.forEach(list => {
        const li = document.createElement('li');
        li.className = 'list-group-item' + (list.id === selectedListId ? ' active' : '');
        li.textContent = list.name;
        li.onclick = async () => { 
            selectedListId = list.id; 
            selectedMatchIdx = 0; 
            renderLists(); 
            await renderMatchList(); 
        };
        listGroup.appendChild(li);
    });
}

// 리스트 생성
async function createList() {
    const name = document.getElementById('newListName').value.trim();
    if (!name) return alert('리스트 이름을 입력하세요.');
    
    try {
        const response = await fetch('/api/match-lists', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            if (errorData.details) {
                // 상세한 중복 정보 표시
                alert(`${errorData.error}\n\n${errorData.details.message}`);
            } else {
                throw new Error(errorData.error || '리스트 생성 실패');
            }
            return;
        }
        
        const result = await response.json();
        const newList = result.matchList || result;
        allLists.unshift(newList);
        document.getElementById('newListName').value = '';
        selectedListId = newList.id;
        renderLists();
        await renderMatchList();
    } catch (error) {
        console.error('리스트 생성 오류:', error);
        alert('리스트 생성에 실패했습니다: ' + error.message);
    }
}

// 리스트 이름 변경
async function renameList() {
    if (!selectedListId) return;
    
    const list = allLists.find(l => l.id === selectedListId);
    const newName = prompt('새 리스트 이름을 입력하세요', list.name);
    if (!newName || !newName.trim()) return;
    
    try {
        const response = await fetch(`/api/match-lists/${selectedListId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newName.trim() })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            if (errorData.details) {
                // 상세한 중복 정보 표시
                alert(`${errorData.error}\n\n${errorData.details.message}`);
            } else {
                throw new Error(errorData.error || '리스트 수정 실패');
            }
            return;
        }
        
        const updatedList = await response.json();
        const index = allLists.findIndex(l => l.id === selectedListId);
        allLists[index] = updatedList;
        renderLists();
        await renderMatchList();
    } catch (error) {
        console.error('리스트 수정 오류:', error);
        alert('리스트 수정에 실패했습니다: ' + error.message);
    }
}

// 리스트 삭제
async function deleteList() {
    if (!selectedListId) return;
    if (!confirm('정말 삭제하시겠습니까?')) return;
    
    try {
        const response = await fetch(`/api/match-lists/${selectedListId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('리스트 삭제 실패');
        
        allLists = allLists.filter(l => l.id !== selectedListId);
        selectedListId = null;
        renderLists();
        await renderMatchList();
    } catch (error) {
        console.error('리스트 삭제 오류:', error);
        alert('리스트 삭제에 실패했습니다.');
    }
}

// 경기 리스트 렌더링
async function renderMatchList() {
    const lists = allLists;
    const list = lists.find(l => l.id === selectedListId);
    const body = document.getElementById('matchListBody');
    const nav = document.getElementById('matchNavFooter');
    const nameSpan = document.getElementById('selectedListName');
    const urlInfo = document.getElementById('listUrlInfo');
    
    if (!list) {
        body.innerHTML = '<div class="text-muted">리스트를 선택하면 경기가 표시됩니다.</div>';
        nav.style.display = 'none';
        urlInfo.style.display = 'none';
        nameSpan.textContent = '리스트를 선택하세요';
        return;
    }
    
    nameSpan.textContent = list.name;
    
    // URL 정보 표시
    if (list.matches && list.matches.length > 0) {
        const baseUrl = window.location.origin;
        document.getElementById('overlayUrl').value = `${baseUrl}/unified/${list.id}/overlay`;
        document.getElementById('mobileControlUrl').value = `${baseUrl}/list/${list.id}/control-mobile`;
        
        // 커스텀 URL 정보 표시
        if (list.custom_url) {
            document.getElementById('customUrlInput').value = list.custom_url;
            document.getElementById('customOverlayUrl').value = `${baseUrl}/overlay/${list.custom_url}`;
        } else {
            document.getElementById('customUrlInput').value = '';
            document.getElementById('customOverlayUrl').value = '';
        }
        
        urlInfo.style.display = 'block';
    } else {
        urlInfo.style.display = 'none';
    }
    
    if (!list.matches || !list.matches.length) {
        body.innerHTML = '<div class="text-muted">경기를 추가하세요.</div>';
        nav.style.display = 'none';
        return;
    }
    
    // 서버에서 최신 경기 정보 가져오기
    try {
        const response = await fetch('/api/matches', { cache: 'no-store' });
        if (response.ok) {
            const allMatches = await response.json();
            
            // 리스트의 경기 정보를 서버의 최신 정보로 업데이트
            list.matches = list.matches.map(match => {
                const serverMatch = allMatches.find(m => m.id === match.id);
                if (serverMatch) {
                    return {
                        ...match,
                        home_team: serverMatch.home_team,
                        away_team: serverMatch.away_team,
                        sport_type: serverMatch.sport_type
                    };
                }
                return match;
            });
        }
    } catch (error) {
        console.error('최신 경기 정보 로드 실패:', error);
    }
    
    // 한 줄에 하나씩 카드 렌더링
    body.innerHTML = `<div class="match-grid">${list.matches.map((m, idx) => `
        <div class="match-card${idx === selectedMatchIdx ? ' selected' : ''}" onclick="if(event.target.tagName!=='BUTTON'){selectMatch(${idx});}">
            <div class="match-card-title">${m.home_team} vs ${m.away_team} <span class="badge bg-secondary">${m.sport_type}</span></div>

            <div class="btn-group">
            <button class="btn btn-outline-primary btn-sm" onclick="goControl('${m.sport_type}','${m.id}')">컨트롤</button>
            <button class="btn btn-outline-info btn-sm" onclick="goIntegratedOverlay('${list.id}','${idx}')">통합URL</button>
            <button class="btn btn-outline-success btn-sm" onclick="goOverlay('${m.sport_type}','${m.id}')">오버레이</button>
            <button class="btn btn-outline-danger btn-sm" onclick="removeMatch(${idx})">삭제</button>
            <button class="btn btn-outline-secondary btn-sm" onclick="moveMatch(${idx},-1)">↑</button>
            <button class="btn btn-outline-secondary btn-sm" onclick="moveMatch(${idx},1)">↓</button>
            </div>
        </div>
    `).join('')}</div>`;
    
    nav.style.display = 'flex';
    document.getElementById('prevMatchBtn').onclick = () => { 
        if (selectedMatchIdx > 0) { 
            selectedMatchIdx--; 
            renderMatchList().catch(error => {
                console.error('이전 경기 선택 후 렌더링 실패:', error);
            });
        } 
    };
    document.getElementById('nextMatchBtn').onclick = () => { 
        if (selectedMatchIdx < list.matches.length - 1) { 
            selectedMatchIdx++; 
            renderMatchList().catch(error => {
                console.error('다음 경기 선택 후 렌더링 실패:', error);
            });
        } 
    };
}

// 경기 선택
async function selectMatch(idx) {
    selectedMatchIdx = idx;
    await renderMatchList();
}

// 경기 삭제
async function removeMatch(idx) {
    const list = allLists.find(l => l.id === selectedListId);
    list.matches.splice(idx, 1);
    
    try {
        const response = await fetch(`/api/match-lists/${selectedListId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ matches: list.matches })
        });
        
        if (!response.ok) throw new Error('경기 삭제 실패');
        
        if (selectedMatchIdx >= list.matches.length) {
            selectedMatchIdx = list.matches.length - 1;
        }
        await renderMatchList();
        
        // 모달이 열려있다면 경기 목록 다시 렌더링
        const modal = document.getElementById('addMatchModal');
        if (modal && modal.classList.contains('show')) {
            renderAddMatchList();
        }
    } catch (error) {
        console.error('경기 삭제 오류:', error);
        alert('경기 삭제에 실패했습니다.');
    }
}

// 경기 순서 변경
async function moveMatch(idx, dir) {
    const list = allLists.find(l => l.id === selectedListId);
    const newIdx = idx + dir;
    if (newIdx < 0 || newIdx >= list.matches.length) return;
    
    const temp = list.matches[idx];
    list.matches[idx] = list.matches[newIdx];
    list.matches[newIdx] = temp;
    
    try {
        const response = await fetch(`/api/match-lists/${selectedListId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ matches: list.matches })
        });
        
        if (!response.ok) throw new Error('경기 순서 변경 실패');
        
        if (selectedMatchIdx === idx) {
            selectedMatchIdx = newIdx;
        }
        await renderMatchList();
    } catch (error) {
        console.error('경기 순서 변경 오류:', error);
        alert('경기 순서 변경에 실패했습니다.');
    }
}

// 컨트롤 페이지로 이동
function goControl(sport, id) {
    window.open(`/${sport}/${String(id).padStart(6, '0')}/control`, '_blank');
}

// 오버레이 페이지로 이동
function goOverlay(sport, id) {
    window.open(`/${sport}/${String(id).padStart(6, '0')}/overlay`, '_blank');
}

// 통합 컨트롤 페이지로 이동
function goIntegratedOverlay(listId, matchIndex) {
    // 통합 컨트롤 페이지의 해당 경기 페이지로 이동
    window.open(`/list/${listId}/control-mobile?index=${matchIndex}`, '_blank');
}

// 경기 추가 모달
function renderAddMatchList() {
    // 모든 리스트에서 이미 추가된 경기 ID들을 수집
    const allAddedIds = new Set();
    allLists.forEach(list => {
        if (list.matches && list.matches.length > 0) {
            list.matches.forEach(match => {
                allAddedIds.add(match.id);
            });
        }
    });
    
    // 아직 어떤 리스트에도 추가되지 않은 경기들만 필터링
    const filtered = allMatches.filter(m => !allAddedIds.has(m.id));
    const listDiv = document.getElementById('allMatchesList');
    
    if (filtered.length === 0) {
        listDiv.innerHTML = '<div class="text-muted">추가할 수 있는 경기가 없습니다. 모든 경기가 이미 리스트에 추가되어 있습니다.</div>';
    } else {
        listDiv.innerHTML = `<div class="add-match-list">${filtered.map(m => `
            <div class="add-match-row">
                <div class="add-match-info">
                    <span class="add-match-title">${m.home_team} vs ${m.away_team} <span class="badge bg-secondary">${m.sport_type}</span></span>

                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="addMatchToList('${m.id}')">추가</button>
            </div>
        `).join('')}</div>`;
    }
    
    console.log(`총 ${allMatches.length}개 경기 중 ${filtered.length}개 경기만 추가 가능 (${allAddedIds.size}개 이미 추가됨)`);
}

// 경기 추가 모달 열기
async function openAddMatchModal() {
    try {
        const response = await fetch('/api/matches', { cache: 'no-store' });
        if (!response.ok) throw new Error('경기 목록 로드 실패');
        
        allMatches = await response.json();

        renderAddMatchList();
        new bootstrap.Modal(document.getElementById('addMatchModal')).show();
    } catch (error) {
        console.error('경기 목록 로드 오류:', error);
        alert('경기 목록을 불러오는데 실패했습니다.');
    }
}

// 리스트에 경기 추가
async function addMatchToList(matchId) {
    const match = allMatches.find(m => m.id === matchId);
    if (!match) return;
    

    
    const list = allLists.find(l => l.id === selectedListId);
    if (!list.matches.some(m => m.id === match.id)) {
        const matchToAdd = {
            id: match.id,
            sport_type: match.sport_type,
            home_team: match.home_team,
            away_team: match.away_team,

        };

        list.matches.push(matchToAdd);
        
        try {
            const response = await fetch(`/api/match-lists/${selectedListId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ matches: list.matches })
            });
            
            if (!response.ok) throw new Error('경기 추가 실패');
            
            // 리스트 렌더링 업데이트
            await renderMatchList();
            
            // 모달 내 경기 목록 다시 렌더링 (중복 제거된 목록으로 업데이트)
            renderAddMatchList();
            
            console.log(`경기 "${match.home_team} vs ${match.away_team}" 추가 완료`);
        } catch (error) {
            console.error('경기 추가 오류:', error);
            alert('경기 추가에 실패했습니다.');
        }
    } else {
        console.log('이미 추가된 경기입니다.');
    }
}



// 커스텀 URL 설정
async function setCustomUrl() {
    const customUrl = document.getElementById('customUrlInput').value.trim();
    
    if (!customUrl) {
        alert('커스텀 URL을 입력해주세요.');
        return;
    }
    
    try {
        const response = await fetch(`/api/list/${selectedListId}/custom-url`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ customUrl: customUrl })
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('커스텀 URL이 설정되었습니다.');
            
            // 현재 리스트 정보 업데이트
            const list = allLists.find(l => l.id === selectedListId);
            if (list) {
                list.custom_url = customUrl;
            }
            
            // URL 정보 다시 렌더링
            await renderMatchList();
        } else {
            alert('커스텀 URL 설정 실패: ' + result.error);
        }
    } catch (error) {
        console.error('커스텀 URL 설정 오류:', error);
        alert('커스텀 URL 설정 중 오류가 발생했습니다.');
    }
}

// 커스텀 URL 삭제
async function deleteCustomUrl() {
    if (!confirm('커스텀 URL을 삭제하시겠습니까?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/list/${selectedListId}/custom-url`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('커스텀 URL이 삭제되었습니다.');
            
            // 현재 리스트 정보 업데이트
            const list = allLists.find(l => l.id === selectedListId);
            if (list) {
                list.custom_url = null;
            }
            
            // URL 정보 다시 렌더링
            await renderMatchList();
        } else {
            alert('커스텀 URL 삭제 실패: ' + result.error);
        }
    } catch (error) {
        console.error('커스텀 URL 삭제 오류:', error);
        alert('커스텀 URL 삭제 중 오류가 발생했습니다.');
    }
}

// URL 복사 함수
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    element.select();
    element.setSelectionRange(0, 99999); // 모바일을 위한 설정
    document.execCommand('copy');
    
    // 복사 완료 알림
    const button = element.nextElementSibling;
    const originalText = button.textContent;
    button.textContent = '복사됨!';
    button.classList.remove('btn-outline-primary');
    button.classList.add('btn-success');
    
    setTimeout(() => {
        button.textContent = originalText;
        button.classList.remove('btn-success');
        button.classList.add('btn-outline-primary');
    }, 2000);
}



// 초기 로드
loadLists();
</script>
</body>
</html> 