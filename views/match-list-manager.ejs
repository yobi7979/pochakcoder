<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>경기 리스트 관리</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .list-group-item.active { background: #0d6efd; color: #fff; }
        .match-list-card { min-height: 400px; }
        .match-grid { display: flex; flex-direction: column; gap: 6px; }
        .match-card { background: #fff; border: 1px solid #dee2e6; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.03); padding: 8px 14px; display: flex; align-items: center; justify-content: space-between; gap: 8px; min-height: 0; }
        .match-card.selected { border: 2px solid #0d6efd; background: #e9ecef; }
        .match-card-title { font-weight: 600; font-size: 1.05rem; }
        .match-card .btn-group { display: flex; gap: 4px; }
        /* 추가: 경기 추가 모달용 스타일 */
        .add-match-list { display: flex; flex-direction: column; gap: 8px; margin-top: 8px; }
        .add-match-row { display: flex; align-items: center; justify-content: space-between; background: #f8f9fa; border-radius: 6px; padding: 8px 12px; border: 1px solid #e2e3e5; }
        .add-match-title { font-size: 1rem; font-weight: 500; }
    </style>
</head>
<body>
    <%- include('partials/header', { title: '경기 리스트 관리' }) %>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>경기 리스트 관리</h2>
        <button class="btn btn-success btn-sm" onclick="updateAllSoccerTeamColors()">모든 축구 경기 팀컬러 일괄 녹색변경</button>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="mb-3 d-flex gap-2">
                <input type="text" id="newListName" class="form-control" placeholder="새 리스트 이름">
                <button class="btn btn-primary" onclick="createList()">리스트 추가</button>
            </div>
            <ul class="list-group" id="listGroup"></ul>
        </div>
        <div class="col-md-8">
            <div class="card match-list-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span id="selectedListName">리스트를 선택하세요</span>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary" onclick="renameList()">이름변경</button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteList()">삭제</button>
                        <button class="btn btn-sm btn-success" onclick="openAddMatchModal()">경기 추가</button>
                    </div>
                </div>
                <div class="card-body" id="matchListBody">
                    <div class="text-muted">리스트를 선택하면 경기가 표시됩니다.</div>
                </div>
                <div class="card-footer d-flex justify-content-between align-items-center" id="matchNavFooter" style="display:none;">
                    <button class="btn btn-outline-primary" id="prevMatchBtn">이전 경기</button>
                    <button class="btn btn-outline-primary" id="nextMatchBtn">다음 경기</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 경기 추가 모달 -->
    <div class="modal fade" id="addMatchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">경기 추가</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="allMatchesList">불러오는 중...</div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
// 데이터 관리
function getLists() {
    return JSON.parse(localStorage.getItem('matchLists') || '[]');
}
function saveLists(lists) {
    localStorage.setItem('matchLists', JSON.stringify(lists));
}
let selectedListId = null;
let selectedMatchIdx = 0;

function renderLists() {
    const lists = getLists();
    const listGroup = document.getElementById('listGroup');
    listGroup.innerHTML = '';
    lists.forEach(list => {
        const li = document.createElement('li');
        li.className = 'list-group-item' + (list.id === selectedListId ? ' active' : '');
        li.textContent = list.name;
        li.onclick = () => { selectedListId = list.id; selectedMatchIdx = 0; renderLists(); renderMatchList(); };
        listGroup.appendChild(li);
    });
}

function createList() {
    const name = document.getElementById('newListName').value.trim();
    if (!name) return alert('리스트 이름을 입력하세요.');
    const lists = getLists();
    const id = 'list-' + Date.now();
    lists.push({ id, name, matches: [] });
    saveLists(lists);
    document.getElementById('newListName').value = '';
    selectedListId = id;
    renderLists();
    renderMatchList();
}
function renameList() {
    if (!selectedListId) return;
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    const newName = prompt('새 리스트 이름을 입력하세요', list.name);
    if (newName && newName.trim()) {
        list.name = newName.trim();
        saveLists(lists);
        renderLists();
        renderMatchList();
    }
}
function deleteList() {
    if (!selectedListId) return;
    if (!confirm('정말 삭제하시겠습니까?')) return;
    let lists = getLists();
    lists = lists.filter(l => l.id !== selectedListId);
    saveLists(lists);
    selectedListId = null;
    renderLists();
    renderMatchList();
}
function renderMatchList() {
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    const body = document.getElementById('matchListBody');
    const nav = document.getElementById('matchNavFooter');
    const nameSpan = document.getElementById('selectedListName');
    if (!list) {
        body.innerHTML = '<div class="text-muted">리스트를 선택하면 경기가 표시됩니다.</div>';
        nav.style.display = 'none';
        nameSpan.textContent = '리스트를 선택하세요';
        return;
    }
    nameSpan.textContent = list.name;
    if (!list.matches.length) {
        body.innerHTML = '<div class="text-muted">경기를 추가하세요.</div>';
        nav.style.display = 'none';
        return;
    }
    // 한 줄에 하나씩 카드 렌더링, 대진 왼쪽, 버튼 오른쪽
    body.innerHTML = `<div class="match-grid">${list.matches.map((m, idx) => `
        <div class="match-card${idx === selectedMatchIdx ? ' selected' : ''}" onclick="if(event.target.tagName!=='BUTTON'){selectedMatchIdx=${idx};renderMatchList();}">
            <div class="match-card-title">${m.home_team} vs ${m.away_team} <span class="badge bg-secondary">${m.sport_type}</span></div>
            <div class="btn-group">
            <button class="btn btn-outline-primary btn-sm" onclick="goControl('${m.sport_type}','${m.id}')">컨트롤</button>
            <button class="btn btn-outline-success btn-sm" onclick="goOverlay('${m.sport_type}','${m.id}')">오버레이</button>
            <button class="btn btn-outline-danger btn-sm" onclick="removeMatch(${idx})">삭제</button>
            <button class="btn btn-outline-secondary btn-sm" onclick="moveMatch(${idx},-1)">↑</button>
            <button class="btn btn-outline-secondary btn-sm" onclick="moveMatch(${idx},1)">↓</button>
            </div>
        </div>
    `).join('')}</div>`;
    nav.style.display = 'flex';
    document.getElementById('prevMatchBtn').onclick = () => { if (selectedMatchIdx > 0) { selectedMatchIdx--; renderMatchList(); } };
    document.getElementById('nextMatchBtn').onclick = () => { if (selectedMatchIdx < list.matches.length - 1) { selectedMatchIdx++; renderMatchList(); } };
}
function removeMatch(idx) {
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    list.matches.splice(idx, 1);
    saveLists(lists);
    if (selectedMatchIdx >= list.matches.length) selectedMatchIdx = list.matches.length - 1;
    renderMatchList();
}
function moveMatch(idx, dir) {
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    const newIdx = idx + dir;
    if (newIdx < 0 || newIdx >= list.matches.length) return;
    const temp = list.matches[idx];
    list.matches[idx] = list.matches[newIdx];
    list.matches[newIdx] = temp;
    saveLists(lists);
    if (selectedMatchIdx === idx) selectedMatchIdx = newIdx;
    renderMatchList();
}
function goControl(sport, id) {
    window.open(`/${sport}/${String(id).padStart(6, '0')}/control`, '_blank');
}
function goOverlay(sport, id) {
    window.open(`/${sport}/${String(id).padStart(6, '0')}/overlay`, '_blank');
}
// 경기 추가 모달
let allMatches = [];
// 팝업 내 추가 가능한 경기 목록 렌더링 함수
function renderAddMatchList() {
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    const addedIds = list ? list.matches.map(m => m.id) : [];
    const filtered = allMatches.filter(m => !addedIds.includes(m.id));
    const listDiv = document.getElementById('allMatchesList');
    if(filtered.length === 0) {
        listDiv.innerHTML = '<div class="text-muted">추가할 수 있는 경기가 없습니다.</div>';
    } else {
        listDiv.innerHTML = `<div class=\"add-match-list\">${filtered.map(m => `
            <div class=\"add-match-row\">
                <span class=\"add-match-title\">${m.home_team} vs ${m.away_team} <span class=\"badge bg-secondary\">${m.sport_type}</span></span>
                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"addMatchToList('${m.id}')\">추가</button>
            </div>
        `).join('')}</div>`;
    }
}

function openAddMatchModal() {
    fetch('/api/matches', { cache: 'no-store' }).then(r=>r.json()).then(matches => {
        allMatches = matches;
        renderAddMatchList();
        new bootstrap.Modal(document.getElementById('addMatchModal')).show();
    });
}
function addMatchToList(matchId) {
    const match = allMatches.find(m => m.id === matchId);
    if (!match) return;
    const lists = getLists();
    const list = lists.find(l => l.id === selectedListId);
    if (!list.matches.some(m => m.id === match.id)) {
        list.matches.push({
            id: match.id,
            sport_type: match.sport_type,
            home_team: match.home_team,
            away_team: match.away_team
        });
        saveLists(lists);
        renderMatchList();
        renderAddMatchList(); // 팝업 목록 갱신
    }
    // 팝업창 닫는 코드 없음
}
function updateAllSoccerTeamColors() {
  if (!confirm('정말로 모든 축구 경기의 팀컬러를 녹색(#00cc33)으로 일괄 변경하시겠습니까?')) return;
  fetch('/admin/update-all-soccer-team-colors', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ color: '#00cc33' })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert('모든 축구 경기의 팀컬러가 녹색(#00cc33)으로 변경되었습니다.');
      location.reload();
    } else {
      alert('변경 실패: ' + (data.error || '알 수 없는 오류'));
    }
  })
  .catch(err => alert('요청 중 오류 발생: ' + err));
}
// 초기 렌더링
renderLists();
renderMatchList();
</script>
</body>
</html> 