<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축구 경기 컨트롤 - <%= match.home_team %> vs <%= match.away_team %></title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .control-panel {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
            min-height: 100vh;
        }
        
        .match-header {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .score-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .team-controls {
            display: flex;
            justify-content: space-between;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .team-section {
            flex: 1;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .score-display {
            font-size: 3rem;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
        }
        
        .score-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s;
        }
        
        .btn-primary {
            background: #007bff;
            color: white;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn:hover {
            opacity: 0.8;
        }
        
        .timer-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .timer-display {
            font-size: 2rem;
            text-align: center;
            margin: 20px 0;
            font-family: monospace;
        }
        
        .timer-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }
        
        .input-group {
            margin: 10px 0;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .input-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .url-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .url-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <!-- 경기 헤더 -->
        <div class="match-header">
            <h1><%= match.home_team %> vs <%= match.away_team %></h1>
            <p>경기 ID: <%= match.id %></p>
        </div>
        
        <!-- 점수 섹션 -->
        <div class="score-section">
            <div class="score-display">
                <span id="home-score-display"><%= match.home_score || 0 %></span> - 
                <span id="away-score-display"><%= match.away_score || 0 %></span>
            </div>
            
            <div class="score-controls">
                <button class="btn btn-success" onclick="updateScore('home', 1)">홈팀 +1</button>
                <button class="btn btn-danger" onclick="updateScore('home', -1)">홈팀 -1</button>
                <button class="btn btn-success" onclick="updateScore('away', 1)">어웨이팀 +1</button>
                <button class="btn btn-danger" onclick="updateScore('away', -1)">어웨이팀 -1</button>
            </div>
        </div>
        
        <!-- 팀 컨트롤 섹션 -->
        <div class="team-controls">
            <div class="team-section">
                <h3>홈팀</h3>
                <div class="input-group">
                    <label>팀명</label>
                    <input type="text" id="home-team" value="<%= match.home_team %>" onchange="updateTeamName('home', this.value)">
                </div>
                <div class="input-group">
                    <label>점수</label>
                    <input type="number" id="home-score" value="<%= match.home_score || 0 %>" min="0">
                </div>
            </div>
            
            <div class="team-section">
                <h3>어웨이팀</h3>
                <div class="input-group">
                    <label>팀명</label>
                    <input type="text" id="away-team" value="<%= match.away_team %>" onchange="updateTeamName('away', this.value)">
                </div>
                <div class="input-group">
                    <label>점수</label>
                    <input type="number" id="away-score" value="<%= match.away_score || 0 %>" min="0">
                </div>
            </div>
        </div>
        
        <!-- 타이머 섹션 -->
        <div class="timer-section">
            <h3>경기 타이머</h3>
            <div class="timer-display" id="timer-display">00:00</div>
            <div class="timer-controls">
                <button class="btn btn-primary" onclick="startTimer()">시작</button>
                <button class="btn btn-danger" onclick="stopTimer()">정지</button>
                <button class="btn btn-success" onclick="resetTimer()">리셋</button>
            </div>
            <div style="display: flex; gap: 10px; justify-content: center; margin-top: 10px;">
                <input type="number" id="minutes" placeholder="분" min="0" max="59" style="width: 80px;">
                <input type="number" id="seconds" placeholder="초" min="0" max="59" style="width: 80px;">
                <button class="btn btn-primary" onclick="setTimer()">설정</button>
            </div>
        </div>
        
        <!-- URL 섹션 -->
        <div class="url-section">
            <h3>링크</h3>
            <div class="input-group">
                <label>모바일 컨트롤</label>
                <input type="text" class="url-input" id="mobile-url" readonly>
            </div>
            <div class="input-group">
                <label>오버레이</label>
                <input type="text" class="url-input" id="overlay-url" readonly>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const matchId = '<%= match.id %>';
        
        // Socket.IO 연결
        socket.on('connect', () => {
            console.log('WebSocket 연결됨');
            socket.emit('join_match', matchId);
        });
        
        // 점수 업데이트 함수
        function updateScore(team, change) {
            const scoreInput = document.getElementById(`${team}-score`);
            const currentScore = parseInt(scoreInput.value) || 0;
            const newScore = Math.max(0, currentScore + change);
            scoreInput.value = newScore;
            
            // API를 통해 업데이트
            updateMatchInfo();
            
            // 실시간 점수 업데이트 이벤트 전송
            emitScoreUpdate();
        }
        
        // 경기 정보 업데이트
        async function updateMatchInfo() {
            try {
                const homeScore = document.getElementById('home-score').value;
                const awayScore = document.getElementById('away-score').value;
                
                const response = await fetch(`/api/matches/${matchId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        home_score: parseInt(homeScore),
                        away_score: parseInt(awayScore),
                        match_data: {
                            state: '전반'
                        }
                    })
                });
                
                if (response.ok) {
                    console.log('경기 정보 업데이트 성공');
                }
            } catch (error) {
                console.error('경기 정보 업데이트 중 오류 발생:', error);
            }
        }
        
        // 실시간 점수 업데이트 이벤트 전송
        function emitScoreUpdate() {
            const homeScore = document.getElementById('home-score').value;
            const awayScore = document.getElementById('away-score').value;
            
            socket.emit('match_updated', {
                matchId: matchId,
                home_score: parseInt(homeScore),
                away_score: parseInt(awayScore),
                state: '전반'
            });
        }
        
        // 팀명 업데이트
        async function updateTeamName(team, newTeamName) {
            try {
                const response = await fetch(`/api/matches/${matchId}/team-name`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        team: team,
                        teamName: newTeamName
                    })
                });
                
                if (response.ok) {
                    console.log(`${team}팀명 업데이트 성공: ${newTeamName}`);
                }
            } catch (error) {
                console.error('팀명 업데이트 중 오류 발생:', error);
            }
        }
        
        // 타이머 관련 함수들
        let timerInterval;
        let currentSeconds = 0;
        
        function startTimer() {
            if (timerInterval) clearInterval(timerInterval);
            
            timerInterval = setInterval(() => {
                currentSeconds++;
                updateTimerDisplay();
            }, 1000);
            
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'start'
            });
        }
        
        function stopTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'stop'
            });
        }
        
        function resetTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            
            currentSeconds = 0;
            updateTimerDisplay();
            
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'reset'
            });
        }
        
        function setTimer() {
            const minutes = parseInt(document.getElementById('minutes').value) || 0;
            const seconds = parseInt(document.getElementById('seconds').value) || 0;
            
            currentSeconds = minutes * 60 + seconds;
            updateTimerDisplay();
            
            socket.emit('timer_control', {
                matchId: matchId,
                action: 'set',
                minutes: minutes,
                seconds: seconds
            });
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(currentSeconds / 60);
            const seconds = currentSeconds % 60;
            const formattedMinutes = minutes.toString().padStart(2, '0');
            const formattedSeconds = seconds.toString().padStart(2, '0');
            document.getElementById('timer-display').textContent = `${formattedMinutes}:${formattedSeconds}`;
        }
        
        // Socket.IO 이벤트 리스너
        socket.on('match_updated', (data) => {
            if (data.matchId === matchId) {
                document.getElementById('home-score').value = data.home_score;
                document.getElementById('away-score').value = data.away_score;
                document.getElementById('home-score-display').textContent = data.home_score;
                document.getElementById('away-score-display').textContent = data.away_score;
            }
        });
        
        socket.on('timer_update', (data) => {
            if (data.matchId === matchId) {
                currentSeconds = data.currentSeconds;
                updateTimerDisplay();
            }
        });
        
        // 페이지 로드 시 URL 설정
        document.addEventListener('DOMContentLoaded', function() {
            const base = window.location.origin;
            document.getElementById('mobile-url').value = `${base}/soccer-control-mobile/${matchId}`;
            document.getElementById('overlay-url').value = `${base}/soccer/${matchId}/overlay`;
        });
    </script>
</body>
</html>
